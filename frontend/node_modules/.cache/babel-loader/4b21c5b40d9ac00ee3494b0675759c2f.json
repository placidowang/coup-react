{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './Player.css';\nimport Card from '../components/Card.js';\n\nclass Player extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.yourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.takeAction = action => {\n      console.log(action);\n\n      switch (action) {\n        case 'Income':\n          this.props.updateCoins(1);\n          this.nextTurn();\n          break;\n\n        default:\n          console.error('Invalid player action');\n      }\n    };\n\n    this.updatePlayers = players => {};\n\n    this.nextTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'nextTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n  }\n\n  componentDidMount() {// this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n    //   switch (msg.message.type) {\n    //     case 'nextTurn':\n    //       this.props.nextTurn()\n    //       console.log(this.props.whosTurnIsIt)\n    //       this.props.setActivePlayer()\n    //       break\n    //     case 'log':\n    //       console.log(msg.message.text)\n    //       break\n    //     default:\n    //       console.error('Unknown player message.')\n    //       console.log(msg)\n    //   }\n    // })\n  }\n\n  componentDidUpdate() {// console.log(this.props.player)\n  }\n\n  render() {\n    const player = this.props.player;\n    const actions = [];\n\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-hand-coin-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-coins-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, player.username)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"coins\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"Coins: \", player.coins))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hand-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, \"Hand \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, player.hand.map(card => /*#__PURE__*/React.createElement(Card, {\n      key: card.id,\n      card: card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 40\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Actions:\", actions.map(action => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      key: action.action,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.takeAction(e.target.value),\n      value: action.action,\n      disabled: this.yourTurn() ? '' : 'disabled',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, action.action)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    nextTurn: () => dispatch({\n      type: 'nextTurn'\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js"],"names":["React","connect","Card","Player","Component","yourTurn","props","activePlayer","id","player","takeAction","action","console","log","updateCoins","nextTurn","error","updatePlayers","players","pubnub","publish","message","type","channel","gameChannel","componentDidMount","componentDidUpdate","render","actions","push","username","coins","hand","map","card","e","target","value","mapStateToProps","state","connectionReducer","isHost","deck","gameReducer","playerReducer","mapDispatchToProps","dispatch","amt"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport './Player.css'\nimport Card from '../components/Card.js'\n\nclass Player extends React.Component {\n  componentDidMount() {\n    // this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n    //   switch (msg.message.type) {\n\n    //     case 'nextTurn':\n    //       this.props.nextTurn()\n    //       console.log(this.props.whosTurnIsIt)\n    //       this.props.setActivePlayer()\n    //       break\n    //     case 'log':\n    //       console.log(msg.message.text)\n    //       break\n    //     default:\n    //       console.error('Unknown player message.')\n    //       console.log(msg)\n    //   }\n    // })\n  }\n  componentDidUpdate() {\n    // console.log(this.props.player)\n  }\n\n  yourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // don't need to account for turn anymore; actions are disabled if it's not your turn\n  takeAction = (action) => {\n    console.log(action)\n    switch (action) {\n      case 'Income':\n        this.props.updateCoins(1)\n        this.nextTurn()\n        break\n      default:\n        console.error('Invalid player action')\n    }\n  }\n\n  updatePlayers = (players) => {\n    \n  }\n\n  nextTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'nextTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  render() {\n    const player = this.props.player\n    const actions = []\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action])\n    }\n    return (\n      <div className='player-container'>\n        {/* <p>Current hand: {player.hand.map(card => card.name).join(', ')}</p> */}\n        <div className='player-name-hand-coin-container'>\n          <div className='player-name-coins-container'>\n            <div>\n            <p className='player-name'>{player.username}</p>\n            </div><div>\n            <p className='coins'>Coins: {player.coins}</p>\n            </div>\n          </div>\n          <div className='hand-container'>\n            <p>Hand </p>\n            <div className='hand'>\n              {player.hand.map(card => <Card key={card.id} card={card} />)}\n            </div>\n          </div>\n        </div>\n        <div className='actions'>Actions: \n          {actions.map(action => \n            <div className='actions' key={action.action}>\n              <button onClick={e => this.takeAction(e.target.value)} value={action.action} disabled={this.yourTurn() ? '' : 'disabled'}>{action.action}</button>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    nextTurn: (() => dispatch({type: 'nextTurn'})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)"]},"metadata":{},"sourceType":"module"}