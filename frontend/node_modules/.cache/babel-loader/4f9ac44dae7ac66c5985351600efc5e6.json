{"ast":null,"code":"const initialState = {\n  deck: [],\n  // isPlaying: false,\n  isPlaying: true\n};\nexport default function gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'initializeDeck':\n      return { ...state,\n        deck: action.cards\n      };\n\n    case 'startGame':\n      return { ...state,\n        isPlaying: true\n      };\n\n    case 'shuffleDeck':\n      return { ...state,\n        deck: action.shuffledDeck\n      };\n\n    default:\n      return state;\n  }\n}\n\nfor (let i = shuffledDeck.length - 1; i > 0; i--) {\n  let j = Math.floor(Math.random() * (i + 1));\n  [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n}","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/reducers/gameReducer.js"],"names":["initialState","deck","isPlaying","gameReducer","state","action","type","cards","shuffledDeck","i","length","j","Math","floor","random"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnB;AACAC,EAAAA,SAAS,EAAE;AAHQ,CAArB;AAOA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,YAA7B,EAA2CK,MAA3C,EAAmD;AAChE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELH,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAFR,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELH,QAAAA,IAAI,EAAEI,MAAM,CAACG;AAFR,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAjBJ;AAmBD;;AAED,KAAK,IAAIK,CAAC,GAAGD,YAAY,CAACE,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,GAAG,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,MAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,GAACD,YAAY,CAACC,CAAD,CAAb,EAAkBD,YAAY,CAACG,CAAD,CAA9B,IAAqC,CAACH,YAAY,CAACG,CAAD,CAAb,EAAkBH,YAAY,CAACC,CAAD,CAA9B,CAArC;AACD","sourcesContent":["const initialState = {\n  deck: [],\n  // isPlaying: false,\n  isPlaying: true,\n\n}\n\nexport default function gameReducer(state = initialState, action) {\n  switch(action.type) {\n    case 'initializeDeck':\n      return {\n        ...state,\n        deck: action.cards\n      }\n    case 'startGame':\n      return {\n        ...state,\n        isPlaying: true\n      }\n    case 'shuffleDeck':\n      return {\n        ...state,\n        deck: action.shuffledDeck\n      }\n    default:\n      return state\n  }\n}\n\nfor (let i = shuffledDeck.length - 1; i > 0; i--) {\n  let j = Math.floor(Math.random() * (i + 1));\n  [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n}"]},"metadata":{},"sourceType":"module"}