{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport Card from './Card.js';\nimport './Game.css';\nconst globalSwalTimer = 10000;\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.loseCard = () => {\n      /* if player only has one unrevealed card, player loses the game */\n      Swal.fire({\n        title: `Pick a card to lose.`,\n        focusConfirm: false,\n        showCancelButton: true,\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n        cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        timer: globalSwalTimer,\n        timerProgressBar: true,\n        html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n        onBeforeOpen: () => {\n          setInterval(() => {\n            const content = Swal.getContent();\n\n            if (content) {\n              const b = content.querySelector('b');\n\n              if (b && Swal.getTimerLeft()) {\n                b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n              }\n            }\n          }, 100);\n        } // footer: 'fuck',\n\n      }).then(r => {\n        console.log(r);\n        let i;\n\n        if (r.value) {\n          i = 0;\n        } else if (r.dismiss === 'cancel') {\n          i = 1;\n        } else {\n          i = Math.round(Math.random());\n        }\n\n        Swal.fire({\n          title: `Lost ${this.props.player.hand[i].name}!`,\n          timer: 1500,\n          showConfirmButton: false\n        }).then(r => {\n          this.props.revealCard(i);\n          this.updatePlayer();\n          this.endTurn();\n        });\n      });\n    };\n\n    this.showCard = card => {};\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.gameOver = () => {};\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'addCardsToHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n            this.updatePlayer(this.props.player);\n          }\n\n          break;\n\n        case 'endTurn':\n          // Swal.close()\n          this.props.endTurn();\n          console.log(this.props.whosTurnIsIt);\n          this.props.setActivePlayer();\n          break;\n\n        case 'alert':\n          if (!this.isYourTurn()) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      action: msg.message.action,\n                      counterCard: msg.message.counterCard,\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            else if (msg.message.associatedCard && msg.message.counterCard) {}\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You used ${msg.message.action}!`,\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                }); // case switch reward depending on action\n\n                this.updateCoins(2);\n                this.updateTreasury(-2);\n                this.endTurn();\n              }\n            });\n          }\n\n          break;\n\n        case 'counter':\n          if (this.props.player.id === msg.message.counteredPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'CHALLENGE',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n              onBeforeOpen: () => {\n                setInterval(() => {\n                  const content = Swal.getContent();\n\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b && Swal.getTimerLeft()) {\n                      b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                    }\n                  }\n                }, 100);\n              }\n            }).then(r => {\n              if (r.value) {\n                console.log('send challenge to: ' + this.props.activePlayer);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.counteringPlayerId,\n                    challengedPlayerUn: msg.message.counteringPlayerUn,\n                    challengingPlayerId: this.props.player.id,\n                    challengingPlayerUn: this.props.player.username,\n                    challengedCard: msg.message.counterCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else if (r.dismiss) {\n                console.log(\"Where's your honor??\"); // send message that blocker won, close swal\n\n                this.endTurn();\n              }\n            });\n          } else if (this.props.player.id === msg.message.counteringPlayerId) {\n            console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`);\n            Swal.fire({\n              title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                  icon: 'success',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                  showConfirmButton: false\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challenge':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard);\n\n            if (challengedCard && !challengedCard.isRevealed) {\n              Swal.fire({\n                title: `${msg.message.challengingPlayerUn} challenged you!`,\n                showCancelButton: true,\n                confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                cancelButtonText: \"Lose a card (Hint: don't do this)\"\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerWon',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else if (r.dismiss) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                }\n              });\n            } else {\n              Swal.fire({\n                title: 'You were called out!',\n                timer: globalSwalTimer,\n                // showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false\n              }).then(r => {\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challengedPlayerLost',\n                    challengedPlayerId: msg.message.challengedPlayerId,\n                    challengedPlayerUn: msg.message.challengedPlayerUn,\n                    challengingPlayerId: msg.message.challengingPlayerId,\n                    challengingPlayerUn: msg.message.challengingPlayerUn,\n                    challengedCard: msg.message.challengedCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              });\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`);\n            Swal.fire({\n              title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n              showConfirmButton: false,\n              allowOutsideClick: false,\n              allowEscapeKey: false // need to have no timer, wait on challenged player's response\n              // timer: globalSwalTimer,\n              // timerProgressBar: true,\n\n            });\n          } else {\n            console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challengedPlayerWon':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.fire({\n              title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n              text: `${msg.message.challengingPlayerUn} loses a card and ${msg.message.challengedPlayerUn} doesn't get to ${msg.message.action}.`,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => this.showCard(msg.message.challengedCard));\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}! You lost the challenge!`,\n              text: 'You lose a card.',\n              icon: 'error',\n              allowEscapeKey: false,\n              allowOutsideClick: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => this.loseCard());\n          }\n\n          break;\n\n        case 'challengedPlayerLost':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.fire({\n              title: 'You lost the challenge!',\n              text: 'You lose a card.',\n              icon: 'error',\n              allowEscapeKey: false,\n              allowOutsideClick: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => this.loseCard());\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            // Swal.close()\n            // switch case rewards per action type\n            this.updateCoins(2);\n            this.updateTreasury(-2);\n            Swal.fire({\n              title: `You show your ${msg.message.challengedCard}, winning the challenge! You use ${msg.message.action}.`,\n              text: `${msg.message.challengingPlayerUn} loses a card.`,\n              icon: 'success',\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => this.showCard(msg.message.challengedCard));\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"whose-turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treasury\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 11\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"court-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }\n    }, \"Court Deck: \", this.props.deck.length, \" cards\")), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    revealCard: i => dispatch({\n      type: 'revealCard',\n      i: i\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","Card","globalSwalTimer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","isYourTurn","activePlayer","updatePlayer","updateTreasury","amt","treasury","updateCoins","loseCard","fire","title","focusConfirm","showCancelButton","cancelButtonColor","confirmButtonText","hand","name","cancelButtonText","allowOutsideClick","allowEscapeKey","timer","timerProgressBar","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","then","r","console","log","value","dismiss","round","showConfirmButton","revealCard","endTurn","showCard","gameOver","testMsg","msg","text","hereNow","channels","logPlayers","componentDidMount","isHost","fetch","json","getMessage","changeTreasury","setActivePlayer","addCardsToHand","whosTurnIsIt","associatedCard","counterCard","username","action","counteredPlayerId","counteredPlayerUn","counteringPlayerId","counteringPlayerUn","icon","close","challengedPlayerId","challengedPlayerUn","challengingPlayerId","challengingPlayerUn","challengedCard","find","error","componentDidUpdate","render","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,YAAP;AAEA,MAAMC,eAAe,GAAG,KAAxB;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SA6UjCC,cA7UiC,GA6UfC,QAAD,IAAc;AAC7B,YAAMC,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAeC,GAAf,CAAmBC,IAAI,KAAK,EAAC,GAAGA,IAAJ;AAAUC,QAAAA,UAAU,EAAE;AAAtB,OAAL,CAAvB,CAAb;AACA,YAAMC,YAAY,GAAG,KAAKC,WAAL,CAAiBN,IAAjB,CAArB;AACA,WAAKO,eAAL,CAAqBF,YAArB;AACD,KAjVgC;;AAAA,SAmVjCC,WAnViC,GAmVnB,CAACN,IAAI,GAAG,CAAC,GAAG,KAAKQ,KAAL,CAAWR,IAAf,CAAR,KAAiC;AAC7C,WAAK,IAAIS,CAAC,GAAGT,IAAI,CAACU,MAAL,GAAc,CAA3B,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,YAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,SAACT,IAAI,CAACS,CAAD,CAAL,EAAUT,IAAI,CAACW,CAAD,CAAd,IAAqB,CAACX,IAAI,CAACW,CAAD,CAAL,EAAUX,IAAI,CAACS,CAAD,CAAd,CAArB;AACD;;AAED,WAAKM,UAAL,CAAgBf,IAAhB;AACA,aAAOA,IAAP;AACD,KA3VgC;;AAAA,SA6VjCe,UA7ViC,GA6VnBf,IAAD,IAAU;AACrB,WAAKQ,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,WAAW,EAAEpB;AAAnC,SADe;AAExBqB,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAFI,OAA1B;AAID,KAlWgC;;AAAA,SAqWjCf,eArWiC,GAqWdP,IAAD,IAAU;AAC1B,WAAK,MAAMuB,MAAX,IAAqB,KAAKf,KAAL,CAAWgB,OAAhC,EAAyC;AACvC,cAAMC,KAAK,GAAGzB,IAAI,CAAC0B,KAAL,EAAd;AACA,cAAMC,KAAK,GAAG3B,IAAI,CAAC0B,KAAL,EAAd;AAEA,aAAKlB,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE,gBADC;AAEPS,YAAAA,QAAQ,EAAEL,MAAM,CAACM,EAFV;AAGP5B,YAAAA,KAAK,EAAE,CAACwB,KAAD,EAAQE,KAAR;AAHA,WADe;AAMxBN,UAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AANI,SAA1B;AAQD;;AAED,WAAKP,UAAL,CAAgBf,IAAhB;AACD,KArXgC;;AAAA,SA+XjC8B,UA/XiC,GA+XpB,MAAM;AACjB,aAAQ,KAAKtB,KAAL,CAAWuB,YAAX,CAAwBF,EAAxB,KAA+B,KAAKrB,KAAL,CAAWe,MAAX,CAAkBM,EAAzD;AACD,KAjYgC;;AAAA,SAoYjCG,YApYiC,GAoYlB,MAAM;AACnB;AACA,WAAKxB,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPI,UAAAA,MAAM,EAAE,KAAKf,KAAL,CAAWe;AAFZ,SADe;AAKxBF,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AALI,OAA1B;AAOD,KA7YgC;;AAAA,SA+YjCW,cA/YiC,GA+YfC,GAAD,IAAS;AACxB;AACA,WAAK1B,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,gBADC;AAEPgB,UAAAA,QAAQ,EAAE,KAAK3B,KAAL,CAAW2B,QAAX,GAAsBD;AAFzB,SADe;AAKxBb,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AALI,OAA1B;AAOD,KAxZgC;;AAAA,SA0ZjCc,WA1ZiC,GA0ZnB,MAAMF,GAAN,IAAc;AAC1B,YAAM,KAAK1B,KAAL,CAAW4B,WAAX,CAAuBF,GAAvB,CAAN;AACA,WAAKF,YAAL;AACD,KA7ZgC;;AAAA,SAgajCK,QAhaiC,GAgatB,MAAM;AACf;AACA/C,MAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,QAAAA,KAAK,EAAG,sBADA;AAERC,QAAAA,YAAY,EAAE,KAFN;AAGRC,QAAAA,gBAAgB,EAAE,IAHV;AAIRC,QAAAA,iBAAiB,EAAE,SAJX;AAKRC,QAAAA,iBAAiB,EAAG,QAAO,KAAKnC,KAAL,CAAWe,MAAX,CAAkBqB,IAAlB,CAAuB,CAAvB,EAA0BC,IAAK,EALlD;AAMRC,QAAAA,gBAAgB,EAAG,QAAO,KAAKtC,KAAL,CAAWe,MAAX,CAAkBqB,IAAlB,CAAuB,CAAvB,EAA0BC,IAAK,EANjD;AAORE,QAAAA,iBAAiB,EAAE,KAPX;AAQRC,QAAAA,cAAc,EAAE,KARR;AASRC,QAAAA,KAAK,EAAEtD,eATC;AAURuD,QAAAA,gBAAgB,EAAE,IAVV;AAWRC,QAAAA,IAAI,EAAE,iEAXE;AAYRC,QAAAA,YAAY,EAAE,MAAM;AAClBC,UAAAA,WAAW,CAAC,MAAM;AAChB,kBAAMC,OAAO,GAAGhE,IAAI,CAACiE,UAAL,EAAhB;;AACA,gBAAID,OAAJ,EAAa;AACX,oBAAME,CAAC,GAAGF,OAAO,CAACG,aAAR,CAAsB,GAAtB,CAAV;;AACA,kBAAID,CAAC,IAAIlE,IAAI,CAACoE,YAAL,EAAT,EAA8B;AAC5BF,gBAAAA,CAAC,CAACG,WAAF,GAAgB/C,IAAI,CAACgD,IAAL,CAAUtE,IAAI,CAACoE,YAAL,KAAsB,IAAhC,CAAhB;AACD;AACF;AACF,WARU,EAQR,GARQ,CAAX;AASD,SAtBO,CAuBR;;AAvBQ,OAAV,EAyBCG,IAzBD,CAyBMC,CAAC,IAAI;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAIrD,CAAJ;;AACA,YAAIqD,CAAC,CAACG,KAAN,EAAa;AACXxD,UAAAA,CAAC,GAAG,CAAJ;AACD,SAFD,MAEO,IAAIqD,CAAC,CAACI,OAAF,KAAc,QAAlB,EAA4B;AACjCzD,UAAAA,CAAC,GAAG,CAAJ;AACD,SAFM,MAEA;AACLA,UAAAA,CAAC,GAAGG,IAAI,CAACuD,KAAL,CAAWvD,IAAI,CAACE,MAAL,EAAX,CAAJ;AACD;;AAEDxB,QAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,UAAAA,KAAK,EAAG,QAAO,KAAK/B,KAAL,CAAWe,MAAX,CAAkBqB,IAAlB,CAAuBnC,CAAvB,EAA0BoC,IAAK,GADtC;AAERI,UAAAA,KAAK,EAAE,IAFC;AAGRmB,UAAAA,iBAAiB,EAAE;AAHX,SAAV,EAKCP,IALD,CAKMC,CAAC,IAAI;AACT,eAAKtD,KAAL,CAAW6D,UAAX,CAAsB5D,CAAtB;AACA,eAAKuB,YAAL;AACA,eAAKsC,OAAL;AACD,SATD;AAUD,OA9CD;AA+CD,KAjdgC;;AAAA,SAodjCC,QApdiC,GAodrBpE,IAAD,IAAU,CAEpB,CAtdgC;;AAAA,SAydjCmE,OAzdiC,GAydvB,MAAM;AACd,WAAK9D,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADe;AAExBE,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAFI,OAA1B;AAID,KA9dgC;;AAAA,SAgejCkD,QAheiC,GAgetB,MAAM,CAEhB,CAlegC;;AAAA,SAoejCC,OApeiC,GAoetBC,GAAD,IAAS;AACjB,WAAKlE,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AAACC,UAAAA,IAAI,EAAE,KAAP;AAAcwD,UAAAA,IAAI,EAAED;AAApB,SADe;AAExBrD,QAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAFI,OAA1B;AAID,KAzegC;;AAAA,SA2ejCsD,OA3eiC,GA2evB,MAAM;AACd,WAAKpE,KAAL,CAAWQ,MAAX,CAAkB4D,OAAlB,CAA0B;AACxBC,QAAAA,QAAQ,EAAE,CAAC,KAAKrE,KAAL,CAAWc,WAAZ;AADc,OAA1B,EAGCuC,IAHD,CAGME,OAAO,CAACC,GAHd;AAID,KAhfgC;;AAAA,SAkfjCc,UAlfiC,GAkfpB,MAAM;AACjBf,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWgB,OAAvB;AACD,KApfgC;AAAA;;AACjCuD,EAAAA,iBAAiB,GAAE;AACjB,QAAI,KAAKvE,KAAL,CAAWwE,MAAf,EAAuB;AACrBC,MAAAA,KAAK,CAAC,4BAAD,CAAL,CACCpB,IADD,CACMC,CAAC,IAAIA,CAAC,CAACoB,IAAF,EADX,EAECrB,IAFD,CAEM9D,QAAQ,IAAI;AAChB,aAAKD,cAAL,CAAoBC,QAApB;AACD,OAJD;AAKD,KAPgB,CASjB;;;AACE,SAAKS,KAAL,CAAWQ,MAAX,CAAkBmE,UAAlB,CAA6B,KAAK3E,KAAL,CAAWc,WAAxC,EAAsDoD,GAAD,IAAS;AAC5D,cAAQA,GAAG,CAACxD,OAAJ,CAAYC,IAApB;AACE,aAAK,YAAL;AACE,eAAKX,KAAL,CAAWO,UAAX,CAAsB2D,GAAG,CAACxD,OAAJ,CAAYE,WAAlC;AACA;;AACF,aAAK,cAAL;AACE,eAAKZ,KAAL,CAAWwB,YAAX,CAAwB0C,GAAG,CAACxD,OAAJ,CAAYK,MAApC;AACA;;AACF,aAAK,gBAAL;AACE,eAAKf,KAAL,CAAW4E,cAAX,CAA0BV,GAAG,CAACxD,OAAJ,CAAYgB,GAAtC;AACA;;AACF,aAAK,gBAAL;AACE,eAAK1B,KAAL,CAAWyB,cAAX,CAA0ByC,GAAG,CAACxD,OAAJ,CAAYiB,QAAtC;AACA;;AACF,aAAK,gBAAL;AACE,eAAK3B,KAAL,CAAW6E,eAAX;;AACA,cAAIX,GAAG,CAACxD,OAAJ,CAAYU,QAAZ,KAAyB,KAAKpB,KAAL,CAAWe,MAAX,CAAkBM,EAA/C,EAAmD;AACjD,iBAAKrB,KAAL,CAAW8E,cAAX,CAA0BZ,GAAG,CAACxD,OAAJ,CAAYjB,KAAtC;AACA,iBAAK+B,YAAL,CAAkB,KAAKxB,KAAL,CAAWe,MAA7B;AACD;;AACD;;AACF,aAAK,SAAL;AACE;AACA,eAAKf,KAAL,CAAW8D,OAAX;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAW+E,YAAvB;AACA,eAAK/E,KAAL,CAAW6E,eAAX;AACA;;AACF,aAAK,OAAL;AACE,cAAI,CAAC,KAAKvD,UAAL,EAAL,EAAwB;AACtB,gBAAI,CAAC4C,GAAG,CAACxD,OAAJ,CAAYsE,cAAb,IAA+Bd,GAAG,CAACxD,OAAJ,CAAYuE,WAA/C,EAA4D;AAC1DnG,cAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,gBAAAA,KAAK,EAAG,GAAE,KAAK/B,KAAL,CAAWuB,YAAX,CAAwB2D,QAAS,qBAAoBhB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GAD1E;AAER1C,gBAAAA,KAAK,EAAEtD,eAFC;AAGRuD,gBAAAA,gBAAgB,EAAE,IAHV;AAIRT,gBAAAA,gBAAgB,EAAE,IAJV;AAKRK,gBAAAA,gBAAgB,EAAG,OAAM,KAAKtC,KAAL,CAAWuB,YAAX,CAAwB2D,QAAS,QAAOhB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,gBAL5E;AAMRhD,gBAAAA,iBAAiB,EAAG,SAAQ,KAAKnC,KAAL,CAAWuB,YAAX,CAAwB2D,QAAS,WAAUhB,GAAG,CAACxD,OAAJ,CAAYuE,WAAY,GANvF;AAORtC,gBAAAA,IAAI,EAAG,oCAAmC,KAAK3C,KAAL,CAAWuB,YAAX,CAAwB2D,QAAS,QAAOhB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,oBAP7F;AAQRvC,gBAAAA,YAAY,EAAE,MAAM;AAClBC,kBAAAA,WAAW,CAAC,MAAM;AAChB,0BAAMC,OAAO,GAAGhE,IAAI,CAACiE,UAAL,EAAhB;;AACA,wBAAID,OAAJ,EAAa;AACX,4BAAME,CAAC,GAAGF,OAAO,CAACG,aAAR,CAAsB,GAAtB,CAAV;;AACA,0BAAID,CAAC,IAAIlE,IAAI,CAACoE,YAAL,EAAT,EAA8B;AAC5BF,wBAAAA,CAAC,CAACG,WAAF,GAAgB/C,IAAI,CAACgD,IAAL,CAAUtE,IAAI,CAACoE,YAAL,KAAsB,IAAhC,CAAhB;AACD;AACF;AACF,mBARU,EAQR,GARQ,CAAX;AASD;AAlBO,eAAV,EAoBCG,IApBD,CAoBMC,CAAC,IAAI;AACT,oBAAIA,CAAC,CAACG,KAAN,EAAa;AACX,uBAAKzD,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,IAAI,EAAE,SADC;AAEPwE,sBAAAA,MAAM,EAAEjB,GAAG,CAACxD,OAAJ,CAAYyE,MAFb;AAGPF,sBAAAA,WAAW,EAAEf,GAAG,CAACxD,OAAJ,CAAYuE,WAHlB;AAIPG,sBAAAA,iBAAiB,EAAE,KAAKpF,KAAL,CAAWuB,YAAX,CAAwBF,EAJpC;AAKPgE,sBAAAA,iBAAiB,EAAE,KAAKrF,KAAL,CAAWuB,YAAX,CAAwB2D,QALpC;AAMPI,sBAAAA,kBAAkB,EAAE,KAAKtF,KAAL,CAAWe,MAAX,CAAkBM,EAN/B;AAOPkE,sBAAAA,kBAAkB,EAAE,KAAKvF,KAAL,CAAWe,MAAX,CAAkBmE;AAP/B,qBADe;AAUxBrE,oBAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAVI,mBAA1B;AAYD,iBAbD,MAaO;AACLyC,kBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,eArCD;AAsCD,aAvCD,CAwCA;AAxCA,iBAyCK,IAAIU,GAAG,CAACxD,OAAJ,CAAYsE,cAAZ,IAA8Bd,GAAG,CAACxD,OAAJ,CAAYuE,WAA9C,EAA2D,CAE/D;AACF,WA7CD,MA6CO;AACLnG,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAE,4BADC;AAERQ,cAAAA,iBAAiB,EAAE,KAFX;AAGRC,cAAAA,cAAc,EAAE,KAHR;AAIRoB,cAAAA,iBAAiB,EAAE,KAJX;AAKRnB,cAAAA,KAAK,EAAEtD,eALC;AAMRuD,cAAAA,gBAAgB,EAAE;AANV,aAAV,EAQCW,IARD,CAQMC,CAAC,IAAI;AACT,kBAAIA,CAAC,CAACI,OAAF,KAAc,OAAlB,EAA2B;AACzB5E,gBAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,kBAAAA,KAAK,EAAG,YAAWmC,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GAD9B;AAERvB,kBAAAA,iBAAiB,EAAE,KAFX;AAGRnB,kBAAAA,KAAK,EAAE,IAHC;AAIR+C,kBAAAA,IAAI,EAAE;AAJE,iBAAV,EADyB,CAOzB;;AACA,qBAAK5D,WAAL,CAAiB,CAAjB;AACA,qBAAKH,cAAL,CAAoB,CAAC,CAArB;AACA,qBAAKqC,OAAL;AACD;AACF,aArBD;AAsBD;;AACD;;AACF,aAAK,SAAL;AACE,cAAI,KAAK9D,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAY0E,iBAAzC,EAA4D;AAC1DtG,YAAAA,IAAI,CAAC2G,KAAL;AACA3G,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,GAAEmC,GAAG,CAACxD,OAAJ,CAAY6E,kBAAmB,4BAA2BrB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,WAAUjB,GAAG,CAACxD,OAAJ,CAAYuE,WAAY,GADjH;AAERhD,cAAAA,gBAAgB,EAAE,IAFV;AAGRK,cAAAA,gBAAgB,EAAE,WAHV;AAIRH,cAAAA,iBAAiB,EAAE,WAJX;AAKRI,cAAAA,iBAAiB,EAAE,KALX;AAMRC,cAAAA,cAAc,EAAE,KANR;AAORC,cAAAA,KAAK,EAAEtD,eAPC;AAQRuD,cAAAA,gBAAgB,EAAE,IARV;AASRC,cAAAA,IAAI,EAAE,yDATE;AAURC,cAAAA,YAAY,EAAE,MAAM;AAClBC,gBAAAA,WAAW,CAAC,MAAM;AAChB,wBAAMC,OAAO,GAAGhE,IAAI,CAACiE,UAAL,EAAhB;;AACA,sBAAID,OAAJ,EAAa;AACX,0BAAME,CAAC,GAAGF,OAAO,CAACG,aAAR,CAAsB,GAAtB,CAAV;;AACA,wBAAID,CAAC,IAAIlE,IAAI,CAACoE,YAAL,EAAT,EAA8B;AAC5BF,sBAAAA,CAAC,CAACG,WAAF,GAAgB/C,IAAI,CAACgD,IAAL,CAAUtE,IAAI,CAACoE,YAAL,KAAsB,IAAhC,CAAhB;AACD;AACF;AACF,iBARU,EAQR,GARQ,CAAX;AASD;AApBO,aAAV,EAsBCG,IAtBD,CAsBMC,CAAC,IAAI;AACT,kBAAIA,CAAC,CAACG,KAAN,EAAa;AACXF,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB,KAAKxD,KAAL,CAAWuB,YAA/C;AACA,qBAAKvB,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,IAAI,EAAE,WADC;AAEP+E,oBAAAA,kBAAkB,EAAExB,GAAG,CAACxD,OAAJ,CAAY4E,kBAFzB;AAGPK,oBAAAA,kBAAkB,EAAEzB,GAAG,CAACxD,OAAJ,CAAY6E,kBAHzB;AAIPK,oBAAAA,mBAAmB,EAAE,KAAK5F,KAAL,CAAWe,MAAX,CAAkBM,EAJhC;AAKPwE,oBAAAA,mBAAmB,EAAE,KAAK7F,KAAL,CAAWe,MAAX,CAAkBmE,QALhC;AAMPY,oBAAAA,cAAc,EAAE5B,GAAG,CAACxD,OAAJ,CAAYuE,WANrB;AAOPE,oBAAAA,MAAM,EAAEjB,GAAG,CAACxD,OAAJ,CAAYyE;AAPb,mBADe;AAUxBtE,kBAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAVI,iBAA1B;AAYD,eAdD,MAcO,IAAIwC,CAAC,CAACI,OAAN,EAAe;AACpBH,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADoB,CAEpB;;AACA,qBAAKM,OAAL;AACD;AACF,aA1CD;AA2CD,WA7CD,MA6CO,IAAI,KAAK9D,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAY4E,kBAAzC,EAA6D;AAClE/B,YAAAA,OAAO,CAACC,GAAR,CAAa,+BAA8BU,GAAG,CAACxD,OAAJ,CAAY2E,iBAAkB,MAAKnB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GAAjG;AACArG,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,+BAA8BmC,GAAG,CAACxD,OAAJ,CAAY2E,iBAAkB,MAAKnB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GADpF;AAER1C,cAAAA,KAAK,EAAEtD,eAFC;AAGRuD,cAAAA,gBAAgB,EAAE,IAHV;AAIRH,cAAAA,iBAAiB,EAAE,KAJX;AAKRC,cAAAA,cAAc,EAAE,KALR;AAMRoB,cAAAA,iBAAiB,EAAE;AANX,aAAV,EAQCP,IARD,CAQMC,CAAC,IAAI;AACT,kBAAIA,CAAC,CAACI,OAAF,KAAc,OAAlB,EAA2B;AACzB5E,gBAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,kBAAAA,KAAK,EAAG,eAAcmC,GAAG,CAACxD,OAAJ,CAAY2E,iBAAkB,MAAKnB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GADpE;AAERK,kBAAAA,IAAI,EAAE,SAFE;AAGR/C,kBAAAA,KAAK,EAAE,IAHC;AAIRC,kBAAAA,gBAAgB,EAAE,IAJV;AAKRH,kBAAAA,iBAAiB,EAAE,KALX;AAMRC,kBAAAA,cAAc,EAAE,KANR;AAORoB,kBAAAA,iBAAiB,EAAE;AAPX,iBAAV;AASD;AACF,aApBD;AAqBD,WAvBM,MAuBA;AACLL,YAAAA,OAAO,CAACC,GAAR,CAAa,GAAEU,GAAG,CAACxD,OAAJ,CAAY6E,kBAAmB,2BAA0BrB,GAAG,CAACxD,OAAJ,CAAY2E,iBAAkB,GAAtG;AACAvG,YAAAA,IAAI,CAAC2G,KAAL;AACD;;AACD;;AACF,aAAK,WAAL;AACE,cAAI,KAAKzF,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYgF,kBAAzC,EAA6D;AAC3D5G,YAAAA,IAAI,CAAC2G,KAAL;AACA,kBAAMK,cAAc,GAAG,KAAK9F,KAAL,CAAWe,MAAX,CAAkBqB,IAAlB,CAAuB2D,IAAvB,CAA4BpG,IAAI,IAAIA,IAAI,CAAC0C,IAAL,KAAc6B,GAAG,CAACxD,OAAJ,CAAYoF,cAA9D,CAAvB;;AACA,gBAAIA,cAAc,IAAI,CAACA,cAAc,CAAClG,UAAtC,EAAkD;AAChDd,cAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,gBAAAA,KAAK,EAAG,GAAEmC,GAAG,CAACxD,OAAJ,CAAYmF,mBAAoB,kBADlC;AAER5D,gBAAAA,gBAAgB,EAAE,IAFV;AAGRE,gBAAAA,iBAAiB,EAAG,WAAU+B,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,GAHjD;AAIRxD,gBAAAA,gBAAgB,EAAE;AAJV,eAAV,EAMCe,IAND,CAMMC,CAAC,IAAI;AACT,oBAAIA,CAAC,CAACG,KAAN,EAAa;AACX,uBAAKzD,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,IAAI,EAAE,qBADC;AAEP+E,sBAAAA,kBAAkB,EAAExB,GAAG,CAACxD,OAAJ,CAAYgF,kBAFzB;AAGPC,sBAAAA,kBAAkB,EAAEzB,GAAG,CAACxD,OAAJ,CAAYiF,kBAHzB;AAIPC,sBAAAA,mBAAmB,EAAE1B,GAAG,CAACxD,OAAJ,CAAYkF,mBAJ1B;AAKPC,sBAAAA,mBAAmB,EAAE3B,GAAG,CAACxD,OAAJ,CAAYmF,mBAL1B;AAMPC,sBAAAA,cAAc,EAAE5B,GAAG,CAACxD,OAAJ,CAAYoF,cANrB;AAOPX,sBAAAA,MAAM,EAAEjB,GAAG,CAACxD,OAAJ,CAAYyE;AAPb,qBADe;AAUxBtE,oBAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAVI,mBAA1B;AAYD,iBAbD,MAaO,IAAIwC,CAAC,CAACI,OAAN,EAAe;AACpB,uBAAK1D,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,IAAI,EAAE,sBADC;AAEP+E,sBAAAA,kBAAkB,EAAExB,GAAG,CAACxD,OAAJ,CAAYgF,kBAFzB;AAGPC,sBAAAA,kBAAkB,EAAEzB,GAAG,CAACxD,OAAJ,CAAYiF,kBAHzB;AAIPC,sBAAAA,mBAAmB,EAAE1B,GAAG,CAACxD,OAAJ,CAAYkF,mBAJ1B;AAKPC,sBAAAA,mBAAmB,EAAE3B,GAAG,CAACxD,OAAJ,CAAYmF,mBAL1B;AAMPC,sBAAAA,cAAc,EAAE5B,GAAG,CAACxD,OAAJ,CAAYoF,cANrB;AAOPX,sBAAAA,MAAM,EAAEjB,GAAG,CAACxD,OAAJ,CAAYyE;AAPb,qBADe;AAUxBtE,oBAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAVI,mBAA1B;AAYD;AACF,eAlCD;AAmCD,aApCD,MAoCO;AACLhC,cAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,gBAAAA,KAAK,EAAE,sBADC;AAERU,gBAAAA,KAAK,EAAEtD,eAFC;AAGR;AACAoD,gBAAAA,iBAAiB,EAAE,KAJX;AAKRC,gBAAAA,cAAc,EAAE;AALR,eAAV,EAOCa,IAPD,CAOMC,CAAC,IAAI;AACT,qBAAKtD,KAAL,CAAWQ,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,IAAI,EAAE,sBADC;AAEP+E,oBAAAA,kBAAkB,EAAExB,GAAG,CAACxD,OAAJ,CAAYgF,kBAFzB;AAGPC,oBAAAA,kBAAkB,EAAEzB,GAAG,CAACxD,OAAJ,CAAYiF,kBAHzB;AAIPC,oBAAAA,mBAAmB,EAAE1B,GAAG,CAACxD,OAAJ,CAAYkF,mBAJ1B;AAKPC,oBAAAA,mBAAmB,EAAE3B,GAAG,CAACxD,OAAJ,CAAYmF,mBAL1B;AAMPC,oBAAAA,cAAc,EAAE5B,GAAG,CAACxD,OAAJ,CAAYoF,cANrB;AAOPX,oBAAAA,MAAM,EAAEjB,GAAG,CAACxD,OAAJ,CAAYyE;AAPb,mBADe;AAUxBtE,kBAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc;AAVI,iBAA1B;AAYD,eApBD;AAqBD;AACF,WA9DD,MA8DO,IAAI,KAAKd,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYkF,mBAAzC,EAA8D;AACnErC,YAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBU,GAAG,CAACxD,OAAJ,CAAYiF,kBAAmB,MAAKzB,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,GAA7F;AACAhH,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,kBAAiBmC,GAAG,CAACxD,OAAJ,CAAYiF,kBAAmB,MAAKzB,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,GADhF;AAERlC,cAAAA,iBAAiB,EAAE,KAFX;AAGRrB,cAAAA,iBAAiB,EAAE,KAHX;AAIRC,cAAAA,cAAc,EAAE,KAJR,CAKR;AACA;AACA;;AAPQ,aAAV;AASD,WAXM,MAWA;AACLe,YAAAA,OAAO,CAACC,GAAR,CAAa,GAAEU,GAAG,CAACxD,OAAJ,CAAYiF,kBAAmB,2BAA0BzB,GAAG,CAACxD,OAAJ,CAAYmF,mBAAoB,GAAxG;AACA/G,YAAAA,IAAI,CAAC2G,KAAL;AACD;;AACD;;AACF,aAAK,qBAAL;AACE,cAAI,KAAKzF,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYgF,kBAAzC,EAA6D;AAC3D5G,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,iBAAgBmC,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,0BAD3C;AAER3B,cAAAA,IAAI,EAAG,GAAED,GAAG,CAACxD,OAAJ,CAAYmF,mBAAoB,qBAAoB3B,GAAG,CAACxD,OAAJ,CAAYiF,kBAAmB,mBAAkBzB,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GAFzH;AAGR1C,cAAAA,KAAK,EAAEtD,eAHC;AAIRuD,cAAAA,gBAAgB,EAAE;AAJV,aAAV,EAMCW,IAND,CAMMC,CAAC,IAAI,KAAKS,QAAL,CAAcG,GAAG,CAACxD,OAAJ,CAAYoF,cAA1B,CANX;AAOD,WARD,MAQO,IAAI,KAAK9F,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYkF,mBAAzC,EAA8D;AACnE9G,YAAAA,IAAI,CAAC2G,KAAL;AACA3G,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,GAAEmC,GAAG,CAACxD,OAAJ,CAAYiF,kBAAmB,UAASzB,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,2BADrE;AAER3B,cAAAA,IAAI,EAAE,kBAFE;AAGRqB,cAAAA,IAAI,EAAE,OAHE;AAIRhD,cAAAA,cAAc,EAAE,KAJR;AAKRD,cAAAA,iBAAiB,EAAE,KALX;AAMRE,cAAAA,KAAK,EAAEtD,eANC;AAORuD,cAAAA,gBAAgB,EAAE;AAPV,aAAV,EASCW,IATD,CASMC,CAAC,IAAI,KAAKzB,QAAL,EATX;AAUD;;AACD;;AACF,aAAK,sBAAL;AACE,cAAI,KAAK7B,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYgF,kBAAzC,EAA6D;AAC3D5G,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAE,yBADC;AAERoC,cAAAA,IAAI,EAAE,kBAFE;AAGRqB,cAAAA,IAAI,EAAE,OAHE;AAIRhD,cAAAA,cAAc,EAAE,KAJR;AAKRD,cAAAA,iBAAiB,EAAE,KALX;AAMRE,cAAAA,KAAK,EAAEtD,eANC;AAORuD,cAAAA,gBAAgB,EAAE;AAPV,aAAV,EASCW,IATD,CASMC,CAAC,IAAI,KAAKzB,QAAL,EATX;AAUD,WAXD,MAWO,IAAI,KAAK7B,KAAL,CAAWe,MAAX,CAAkBM,EAAlB,KAAyB6C,GAAG,CAACxD,OAAJ,CAAYkF,mBAAzC,EAA8D;AACnE;AAEA;AACA,iBAAKhE,WAAL,CAAiB,CAAjB;AACA,iBAAKH,cAAL,CAAoB,CAAC,CAArB;AAEA3C,YAAAA,IAAI,CAACgD,IAAL,CAAU;AACRC,cAAAA,KAAK,EAAG,iBAAgBmC,GAAG,CAACxD,OAAJ,CAAYoF,cAAe,oCAAmC5B,GAAG,CAACxD,OAAJ,CAAYyE,MAAO,GADjG;AAERhB,cAAAA,IAAI,EAAG,GAAED,GAAG,CAACxD,OAAJ,CAAYmF,mBAAoB,gBAFjC;AAGRL,cAAAA,IAAI,EAAE,SAHE;AAIR/C,cAAAA,KAAK,EAAEtD,eAJC;AAKRuD,cAAAA,gBAAgB,EAAE;AALV,aAAV,EAOCW,IAPD,CAOMC,CAAC,IAAI,KAAKS,QAAL,CAAcG,GAAG,CAACxD,OAAJ,CAAYoF,cAA1B,CAPX;AAQD;;AACD;;AACF,aAAK,KAAL;AACEvC,UAAAA,OAAO,CAACC,GAAR,CAAYU,GAAG,CAACxD,OAAJ,CAAYyD,IAAxB;AACA;;AACF;AACEZ,UAAAA,OAAO,CAACyC,KAAR,CAAc,uBAAd;AACAzC,UAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AAnTJ;AAqTD,KAtTD,EAVe,CAiUjB;AAEA;;AACA,SAAKlE,KAAL,CAAW4E,cAAX,CAA0B,EAAE,KAAK5E,KAAL,CAAWgB,OAAX,CAAmBd,MAAnB,GAA4B,CAA9B,CAA1B;AACD;;AAED+F,EAAAA,kBAAkB,GAAG,CACnB;AAED;;AA2KDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAuC,KAAKlG,KAAL,CAAWuB,YAAX,CAAwB2D,QAAxB,GAAmC,KAAKlF,KAAL,CAAWuB,YAAX,CAAwB2D,QAA3D,GAAsE,IAA7G,CAFF,eAIE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAc,KAAKlF,KAAL,CAAW2B,QAAzB,WADF,CAJF,eAQE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgB,KAAK3B,KAAL,CAAWR,IAAX,CAAgBU,MAAhC,WAFF,CARF,eAqBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBF,CADF;AAyBD;;AAhhBgC;;AAmhBnC,MAAMiG,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACL5F,IAAAA,MAAM,EAAE4F,KAAK,CAACC,iBAAN,CAAwB7F,MAD3B;AAELM,IAAAA,WAAW,EAAEsF,KAAK,CAACC,iBAAN,CAAwBvF,WAFhC;AAGL0D,IAAAA,MAAM,EAAE4B,KAAK,CAACC,iBAAN,CAAwB7B,MAH3B;AAILzD,IAAAA,MAAM,EAAEqF,KAAK,CAACE,aAJT;AAKLtF,IAAAA,OAAO,EAAEoF,KAAK,CAACG,WAAN,CAAkBvF,OALtB;AAMLxB,IAAAA,IAAI,EAAE4G,KAAK,CAACG,WAAN,CAAkB/G,IANnB;AAOLmC,IAAAA,QAAQ,EAAEyE,KAAK,CAACG,WAAN,CAAkB5E,QAPvB;AAQLoD,IAAAA,YAAY,EAAEqB,KAAK,CAACG,WAAN,CAAkBxB,YAR3B;AASLxD,IAAAA,YAAY,EAAE6E,KAAK,CAACG,WAAN,CAAkBhF;AAT3B,GAAP;AAWD,CAZD;;AAcA,MAAMiF,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,QAAQ,EAAIjH,KAAD,IAAWgH,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,gBAAP;AAAyBlB,MAAAA,KAAK,EAAEA;AAAhC,KAAD,CADzB;AAELc,IAAAA,UAAU,EAAIf,IAAD,IAAUiH,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,YAAP;AAAqBC,MAAAA,WAAW,EAAEpB;AAAlC,KAAD,CAF1B;AAGLgC,IAAAA,YAAY,EAAIT,MAAD,IAAY0F,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,cAAP;AAAuBI,MAAAA,MAAM,EAAEA;AAA/B,KAAD,CAH9B;AAIL;AACA+D,IAAAA,cAAc,EAAIrF,KAAD,IAAWgH,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,gBAAP;AAAyBlB,MAAAA,KAAK,EAAEA;AAAhC,KAAD,CAL/B;AAMLmF,IAAAA,cAAc,EAAIlD,GAAD,IAAS+E,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,gBAAP;AAAyBe,MAAAA,GAAG,EAAEA;AAA9B,KAAD,CAN7B;AAOLE,IAAAA,WAAW,EAAIF,GAAD,IAAS+E,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,aAAP;AAAsBe,MAAAA,GAAG,EAAEA;AAA3B,KAAD,CAP1B;AAQLD,IAAAA,cAAc,EAAIE,QAAD,IAAc8E,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,gBAAP;AAAyBgB,MAAAA,QAAQ,EAAEA;AAAnC,KAAD,CARlC;AASLkD,IAAAA,eAAe,EAAG,MAAM4B,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE;AAAP,KAAD,CAT3B;AAULkD,IAAAA,UAAU,EAAI5D,CAAD,IAAOwG,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE,YAAP;AAAqBV,MAAAA,CAAC,EAAEA;AAAxB,KAAD,CAVvB;AAWL6D,IAAAA,OAAO,EAAG,MAAM2C,QAAQ,CAAC;AAAC9F,MAAAA,IAAI,EAAE;AAAP,KAAD;AAXnB,GAAP;AAaD,CAdD;;AAgBA,eAAe5B,OAAO,CAACoH,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CpH,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport Card from './Card.js'\nimport './Game.css'\n\nconst globalSwalTimer = 10000\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'addCardsToHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n              this.updatePlayer(this.props.player)\n            }\n            break\n          case 'endTurn':\n            // Swal.close()\n            this.props.endTurn()\n            console.log(this.props.whosTurnIsIt)\n            this.props.setActivePlayer()\n            break\n          case 'alert':\n            if (!this.isYourTurn()) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        action: msg.message.action,\n                        counterCard: msg.message.counterCard,\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                \n              }\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You used ${msg.message.action}!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                  // case switch reward depending on action\n                  this.updateCoins(2)\n                  this.updateTreasury(-2)\n                  this.endTurn()\n                }\n              })\n            }\n            break\n          case 'counter':\n            if (this.props.player.id === msg.message.counteredPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'CHALLENGE',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent()\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                    }\n                  }, 100)\n                }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('send challenge to: ' + this.props.activePlayer)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.counteringPlayerId,\n                      challengedPlayerUn: msg.message.counteringPlayerUn,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.counterCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else if (r.dismiss) {\n                  console.log(\"Where's your honor??\")\n                  // send message that blocker won, close swal\n                  this.endTurn()\n                }\n              })\n            } else if (this.props.player.id === msg.message.counteringPlayerId) {\n              console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`)\n              Swal.fire({\n                title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                    icon: 'success',\n                    timer: 1500,\n                    timerProgressBar: true,\n                    allowOutsideClick: false,\n                    allowEscapeKey: false,\n                    showConfirmButton: false,\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challenge':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard)\n              if (challengedCard && !challengedCard.isRevealed) {\n                Swal.fire({\n                  title: `${msg.message.challengingPlayerUn} challenged you!`,\n                  showCancelButton: true,\n                  confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                  cancelButtonText: \"Lose a card (Hint: don't do this)\",\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerWon',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else if (r.dismiss) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerLost',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  }\n                })\n              } else {\n                Swal.fire({\n                  title: 'You were called out!',\n                  timer: globalSwalTimer,\n                  // showConfirmButton: false,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                })\n                .then(r => {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                })\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`)\n              Swal.fire({\n                title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n                showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                // need to have no timer, wait on challenged player's response\n                // timer: globalSwalTimer,\n                // timerProgressBar: true,\n              })\n            } else {\n              console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challengedPlayerWon':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                text: `${msg.message.challengingPlayerUn} loses a card and ${msg.message.challengedPlayerUn} doesn't get to ${msg.message.action}.`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => this.showCard(msg.message.challengedCard))\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}! You lost the challenge!`,\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => this.loseCard())\n            }\n            break\n          case 'challengedPlayerLost':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.fire({\n                title: 'You lost the challenge!',\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => this.loseCard())\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              // Swal.close()\n\n              // switch case rewards per action type\n              this.updateCoins(2)\n              this.updateTreasury(-2)\n\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge! You use ${msg.message.action}.`,\n                text: `${msg.message.challengingPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => this.showCard(msg.message.challengedCard))\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n  \n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n  \n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  // pick card to reveal, or lose one randomly based on timer\n  loseCard = () => {\n    /* if player only has one unrevealed card, player loses the game */\n    Swal.fire({\n      title: `Pick a card to lose.`,\n      focusConfirm: false,\n      showCancelButton: true,\n      cancelButtonColor: '#3085d6',\n      confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n      cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      timer: globalSwalTimer,\n      timerProgressBar: true,\n      html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n      onBeforeOpen: () => {\n        setInterval(() => {\n          const content = Swal.getContent()\n          if (content) {\n            const b = content.querySelector('b')\n            if (b && Swal.getTimerLeft()) {\n              b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n            }\n          }\n        }, 100)\n      }\n      // footer: 'fuck',\n    })\n    .then(r => {\n      console.log(r)\n      let i\n      if (r.value) {\n        i = 0\n      } else if (r.dismiss === 'cancel') {\n        i = 1\n      } else {\n        i = Math.round(Math.random())\n      }\n      \n      Swal.fire({\n        title: `Lost ${this.props.player.hand[i].name}!`,\n        timer: 1500,\n        showConfirmButton: false,\n      })\n      .then(r => {\n        this.props.revealCard(i)\n        this.updatePlayer()\n        this.endTurn()\n      })\n    })\n  }\n\n  // choose card to show when challenged, show on timer(?), shuffle into deck and draw a new card\n  showCard = (card) => {\n    \n  }\n\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  gameOver = () => {\n\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p className='whose-turn'>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        <div className='treasury'>\n          <p>Treasury: {this.props.treasury} coins</p>\n        </div>\n\n        <div className='court-deck'>\n          <Card />\n          <p>Court Deck: {this.props.deck.length} cards</p>\n        </div>\n        {/* <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p> */}\n        {/* <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button> */}\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        {/* <button onClick={this.hereNow}>log who's here</button> */}\n        {/* <button onClick={this.logPlayers}>log players</button> */}\n\n        {/* <br/><button onClick={this.endTurn}>End Turn</button> */}\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    revealCard: ((i) => dispatch({type: 'revealCard', i: i})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}