{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.yourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.updatePlayer = () => {};\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'addCardsToHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n          }\n\n          break;\n\n        case 'endTurn':\n          this.props.endTurn();\n          console.log(this.props.whosTurnIsIt);\n          this.props.setActivePlayer();\n          break;\n\n        case 'alert':\n          if (!this.yourTurn()) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                timer: 15000,\n                timerProgressBar: true,\n                showCancelButton: true,\n                // cancelButtonColor: '#B0B0B0',\n                cancelButtonText: 'Let him get away with it... this time',\n                confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                html: \"<span class='swal2-text'><b></b></span>\",\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                console.log(r);\n\n                if (r.value) {\n                  console.log('send challenge to: ' + msg.message.fromPlayerId);\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: this.props.activePlayer.id,\n                      challengerPlayerId: this.props.player.id\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Where's your honor??\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            else if (msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                  timer: 15000,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  // cancelButtonColor: '#B0B0B0',\n                  cancelButtonText: 'Let him get away with it... this time',\n                  confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                  html: \"<span class='swal2-text'><b></b></span>\",\n                  onBeforeOpen: () => {\n                    // Swal.showLoading()\n                    setInterval(() => {\n                      const content = Swal.getContent();\n\n                      if (content) {\n                        const b = content.querySelector('b'); // if (b) {\n\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000); // b.textContent = Swal.getTimerLeft()\n                        }\n                      }\n                    }, 100);\n                  } // onClose: () => {\n                  //   clearInterval(timerInterval)\n                  // }\n\n                }).then(r => {\n                  if (r.value) {\n                    console.log('send challenge to: ' + msg.message.fromPlayerId);\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: msg.message.fromPlayerId,\n                        challengerPlayerId: this.props.player.id\n                      },\n                      channel: this.props.gameChannel\n                    });\n                  } else {\n                    console.log(\"Where's your honor??\");\n                  }\n                });\n              }\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              showConfirmButton: false,\n              timer: 5000,\n              timerProgressBar: true\n            });\n          }\n\n          break;\n\n        case 'challenge':\n          // console.log(this.props.player.id)\n          // console.log(msg)\n          // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: \"You've been challenged!!\",\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'Oh YEAH??'\n            });\n          } else if (this.props.player.id === msg.message.challengerPlayerId) {\n            console.log(\"You have challenged the player!\");\n            Swal.fire('You have challenged the player!');\n          } else {\n            console.log(\"Player has been challenged.\");\n            Swal.close();\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, \"log who's here\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logPlayers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }\n    }, \"log players\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.endTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 14\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","Game","Component","yourTurn","props","activePlayer","id","player","endTurn","pubnub","publish","message","type","channel","gameChannel","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","i","length","j","Math","floor","random","updateDeck","updatedDeck","players","card1","shift","card2","playerId","updatePlayer","testMsg","msg","text","hereNow","channels","then","console","log","logPlayers","componentDidMount","isHost","fetch","r","json","getMessage","changeTreasury","amt","updateTreasury","treasury","setActivePlayer","addCardsToHand","whosTurnIsIt","associatedCard","counterCard","fire","title","username","action","timer","timerProgressBar","showCancelButton","cancelButtonText","confirmButtonText","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","value","fromPlayerId","challengedPlayerId","challengerPlayerId","allowOutsideClick","showConfirmButton","close","error","componentDidUpdate","render","name","join","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport './Game.css'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'addCardsToHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n            }\n            break\n          case 'endTurn':\n            this.props.endTurn()\n            console.log(this.props.whosTurnIsIt)\n            this.props.setActivePlayer()\n            break\n          case 'alert':\n            if (!this.yourTurn()) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                  timer: 15000,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  // cancelButtonColor: '#B0B0B0',\n                  cancelButtonText: 'Let him get away with it... this time',\n                  confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                  html: \"<span class='swal2-text'><b></b></span>\",\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  console.log(r)\n                  if (r.value) {\n                    console.log('send challenge to: ' + msg.message.fromPlayerId)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: this.props.activePlayer.id,\n                        challengerPlayerId: this.props.player.id\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Where's your honor??\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                  timer: 15000,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  // cancelButtonColor: '#B0B0B0',\n                  cancelButtonText: 'Let him get away with it... this time',\n                  confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                  html: \"<span class='swal2-text'><b></b></span>\",\n                  onBeforeOpen: () => {\n                    // Swal.showLoading()\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        // if (b) {\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                          // b.textContent = Swal.getTimerLeft()\n                        }\n                      }\n                    }, 100)\n                  },\n                  // onClose: () => {\n                  //   clearInterval(timerInterval)\n                  // }\n                })\n                .then(r => {\n                  if (r.value) {\n                    console.log('send challenge to: ' + msg.message.fromPlayerId)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: msg.message.fromPlayerId,\n                        challengerPlayerId: this.props.player.id\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Where's your honor??\")\n                  }\n                })\n              }\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                showConfirmButton: false,\n                timer: 5000,\n                timerProgressBar: true,\n              })\n            }\n            break\n          case 'challenge':\n            // console.log(this.props.player.id)\n            // console.log(msg)\n            // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: \"You've been challenged!!\",\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'Oh YEAH??'\n              })\n            } else if (this.props.player.id === msg.message.challengerPlayerId) {\n              console.log(\"You have challenged the player!\")\n              Swal.fire('You have challenged the player!')\n            } else {\n              console.log(\"Player has been challenged.\")\n              Swal.close()\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n\n  yourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  } \n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  // currently being used in Player.js\n  updatePlayer = () => {\n\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n\n  \n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <p>Treasury: {this.props.treasury} coins</p>\n\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        <button onClick={this.hereNow}>log who's here</button>\n        <button onClick={this.logPlayers}>log players</button>\n        <br/><button onClick={this.endTurn}>End Turn</button>\n\n        <p>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}