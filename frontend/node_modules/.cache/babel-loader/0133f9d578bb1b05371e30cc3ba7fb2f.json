{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      let title = winner === null ? 'Tie game!' : `Player ${winner} won!`; // Show this if the player is not the room creator\n\n      if (this.props.isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: 'top',\n          allowOutsideClick: false,\n          title: title,\n          text: 'Waiting for a new round...',\n          confirmButtonColor: 'rgb(208,33,41)',\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class'\n          }\n        });\n        this.turn = 'X'; // Set turn to X so Player O can't make a move \n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: title,\n            text: 'Continue Playing?',\n            showCancelButton: true,\n            confirmButtonColor: 'rgb(208,33,41)',\n            cancelButtonColor: '#aaa',\n            cancelButtonText: 'Nope',\n            confirmButtonText: 'Yea!',\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: 'title-class',\n              popup: 'popup-class',\n              confirmButton: 'button-class',\n              cancelButton: 'button-class'\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceWinner = winner => {\n      let pieces = {\n        'X': this.state.xScore,\n        'O': this.state.oScore\n      };\n\n      if (winner === 'X') {\n        pieces['X'] += 1;\n        this.setState({\n          xScore: pieces['X']\n        });\n      } else {\n        pieces['O'] += 1;\n        this.setState({\n          oScore: pieces['O']\n        });\n      } // End the game once there is a winner\n\n\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const [a, b, c] = possibleCombinations[i];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter++; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      const squares = this.state.squares;\n      squares[index] = piece;\n      this.turn = squares[index] === 'X' ? 'O' : 'X';\n      this.setState({\n        squares: squares,\n        whosTurn: !this.state.whosTurn\n      });\n      this.checkForWinner(squares);\n    };\n\n    this.onMakeMove = index => {\n      const squares = this.state.squares; // Check if the square is empty and if it's the player's turn to make a move\n\n      if (!squares[index] && this.turn === this.props.piece) {\n        squares[index] = this.props.piece;\n        this.setState({\n          squares: squares,\n          whosTurn: !this.state.whosTurn\n        }); // Other player's turn to make a move\n\n        this.turn = this.turn === 'X' ? 'O' : 'X'; // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            index: index,\n            piece: this.props.piece,\n            turn: this.turn\n          },\n          channel: this.props.gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner(squares);\n      }\n    };\n\n    this.state = {\n      squares: Array(9).fill(''),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn\n    };\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === this.props.piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(''),\n            whosTurn: this.props.myTurn\n          });\n          this.turn = 'X';\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            this.props.endGame();\n          }\n    });\n  }\n\n  render() {\n    let status; // Change to current player's turn\n\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      onClick: index => this.onMakeMove(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"status-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    }, status)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scores-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, \"Player X: \", this.state.xScore, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, \"Player O: \", this.state.oScore, \" \"))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","title","isRoomCreator","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","pieces","state","xScore","oScore","setState","checkForWinner","squares","possibleCombinations","i","length","a","b","c","counter","publishMove","index","piece","whosTurn","onMakeMove","Array","fill","myTurn","componentDidMount","getMessage","msg","close","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";  \n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(''), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn\n    };\n\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount(){\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // Publish move to the opponent's board\n      if(msg.message.turn === this.props.piece){\n        this.publishMove(msg.message.index, msg.message.piece);\n      }\n\n      // Start a new round\n      else if(msg.message.reset){\n        this.setState({\n          squares: Array(9).fill(''),\n          whosTurn : this.props.myTurn\n        });\n\n        this.turn = 'X';\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close()\n      }\n\n      // End the game and go back to the lobby\n      else if(msg.message.endGame){\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = (winner) => {\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if((this.props.isRoomCreator === false) && this.gameOver){\n      Swal.fire({  \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'rgb(208,33,41)',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n        } ,\n      });\n      this.turn = 'X'; // Set turn to X so Player O can't make a move \n    } \n\n    // Show this to the room creator\n    else if(this.props.isRoomCreator && this.gameOver){\n      Swal.fire({      \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n            cancelButton: 'button-class'\n        } ,\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n\n        else{\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })      \n    }\n   }\n\n\t// Update score for the winner\n  announceWinner = (winner) => {\n\t\tlet pieces = {\n\t\t\t'X': this.state.xScore,\n\t\t\t'O': this.state.oScore\n\t\t}\n\t\n\t\tif(winner === 'X'){\n\t\t\tpieces['X'] += 1;\n\t\t\tthis.setState({\n\t\t\t\txScore: pieces['X']\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tpieces['O'] += 1;\n\t\t\tthis.setState({\n\t\t\t\toScore: pieces['O']\n\t\t\t});\n\t\t}\n\t\t// End the game once there is a winner\n\t\tthis.gameOver = true;\n\t\tthis.newRound(winner);\t\n  }\n  \n  checkForWinner = (squares) => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n  \n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if(this.counter === 9){\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n   \n  // Opponent's move is published to the board\n  publishMove = (index, piece) => {\n    const squares = this.state.squares;\n\n    squares[index] = piece;\n    this.turn = (squares[index] === 'X')? 'O' : 'X';\n\n    this.setState({\n      squares: squares,\n      whosTurn: !this.state.whosTurn\n    });\n\n    this.checkForWinner(squares)\n  }\n\n  onMakeMove = (index) =>{\n    const squares = this.state.squares;\n\n    // Check if the square is empty and if it's the player's turn to make a move\n    if(!squares[index] && (this.turn === this.props.piece)){ \n      squares[index] = this.props.piece;\n\n      this.setState({\n        squares: squares,\n        whosTurn: !this.state.whosTurn\n      });\n  \n      // Other player's turn to make a move\n      this.turn = (this.turn === 'X') ? 'O' : 'X';\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          index: index,\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });  \n\n      // Check if there is a winner\n      this.checkForWinner(squares)\n    }\n  }\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n              squares={this.state.squares}\n              onClick={index => this.onMakeMove(index)}\n            />  \n            <p className=\"status-info\">{status}</p>        \n        </div>\n        \n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {this.state.xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {this.state.oScore} </p>\n          </div>\n        </div>   \n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}