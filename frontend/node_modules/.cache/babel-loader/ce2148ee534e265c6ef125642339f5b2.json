{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStatus = getStatus;\n\nvar _immutabilityHelper = require('immutability-helper');\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getStatus(callback) {\n  var _this = this;\n\n  this._broadcast.status(callback);\n\n  if (!this._listener.status) {\n    this._listener.status = function (st) {\n      if (!_this._broadcast.isSubscribe('status')) {\n        return true;\n      }\n\n      _this._component.setState(function (prevState) {\n        return {\n          pn_status: (0, _immutabilityHelper2.default)(prevState.pn_status, {\n            $set: st\n          })\n        };\n      });\n\n      _this._broadcast.emitStatus(st);\n    };\n  }\n\n  if (this._component.state && this._component.state.pn_status) {\n    return this._component.state.pn_status;\n  } else {\n    return {};\n  }\n}","map":{"version":3,"sources":["modules/getStatus.js"],"names":["getStatus","pn_status","prevState","$set"],"mappings":";;;;;QAQgBA,S,GAAAA,S;;AARhB,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;;;AAQO,SAAA,SAAA,CAAA,QAAA,EAA6B;AAAA,MAAA,KAAA,GAAA,IAAA;;AAClC,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA;;AAEA,MAAI,CAAC,KAAA,SAAA,CAAL,MAAA,EAA4B;AAC1B,SAAA,SAAA,CAAA,MAAA,GAAwB,UAAA,EAAA,EAAQ;AAC9B,UAAI,CAAC,KAAA,CAAA,UAAA,CAAA,WAAA,CAAL,QAAK,CAAL,EAA4C;AAC1C,eAAA,IAAA;AACD;;AAED,MAAA,KAAA,CAAA,UAAA,CAAA,QAAA,CAAyB,UAAA,SAAA,EAAA;AAAA,eAAc;AACrCC,UAAAA,SAAAA,EAAW,CAAA,GAAA,oBAAA,CAAA,OAAA,EAAOC,SAAAA,CAAP,SAAA,EAA4B;AAAEC,YAAAA,IAAAA,EAA9B;AAA4B,WAA5B;AAD0B,SAAd;AAAzB,OAAA;;AAIA,MAAA,KAAA,CAAA,UAAA,CAAA,UAAA,CAAA,EAAA;AATF,KAAA;AAWD;;AAED,MAAI,KAAA,UAAA,CAAA,KAAA,IAAyB,KAAA,UAAA,CAAA,KAAA,CAA7B,SAAA,EAA8D;AAC5D,WAAO,KAAA,UAAA,CAAA,KAAA,CAAP,SAAA;AADF,GAAA,MAEO;AACL,WAAA,EAAA;AACD;AACF","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Get to receive status information from a channel through a callback\n *\n * @param {function} callback\n * @returns {object}\n */\nexport function getStatus(callback) {\n  this._broadcast.status(callback);\n\n  if (!this._listener.status) {\n    this._listener.status = (st) => {\n      if (!this._broadcast.isSubscribe('status')) {\n        return true;\n      }\n\n      this._component.setState(prevState => ({\n        pn_status: update(prevState.pn_status, { $set: st })\n      }));\n\n      this._broadcast.emitStatus(st);\n    };\n  }\n\n  if (this._component.state && this._component.state.pn_status) {\n    return this._component.state.pn_status;\n  } else {\n    return {};\n  }\n}\n"]},"metadata":{},"sourceType":"script"}