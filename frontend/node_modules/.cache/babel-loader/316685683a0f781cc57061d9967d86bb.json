{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport './Game.css';\nconst globalSwalTimer = 10000;\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.handHasCard = cardname => {};\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'addCardsToHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n          }\n\n          break;\n\n        case 'endTurn':\n          // Swal.close()\n          this.props.endTurn();\n          console.log(this.props.whosTurnIsIt);\n          this.props.setActivePlayer();\n          break;\n\n        case 'alert':\n          if (!this.isYourTurn()) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} get away with it... this time`,\n                confirmButtonText: `BLOCK ${this.props.activePlayer.username} with my ${msg.message.counterCard}.`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} get away with it in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username,\n                      counterCard: msg.message.counterCard\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            else if (msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                  showCancelButton: true,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  // cancelButtonColor: '#B0B0B0',\n                  cancelButtonText: 'Let him get away with it... this time',\n                  confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                  html: \"<span class='swal2-text'><b></b></span>\",\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent();\n\n                      if (content) {\n                        const b = content.querySelector('b');\n\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                        }\n                      }\n                    }, 100);\n                  }\n                }).then(r => {\n                  // console.log(msg.message.counterCard)\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteringPlayerId: this.props.player.id,\n                        counterCard: msg.message.counterCard\n                      },\n                      channel: this.props.gameChannel\n                    });\n                  } else {\n                    console.log(\"Letting it slide\");\n                  }\n                });\n              }\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              showConfirmButton: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: 'Nobody challenged you!',\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                }); // case switch reward depending on action\n\n                this.updateCoins(2);\n                this.updateTreasury(-2);\n                this.endTurn();\n              }\n            });\n          }\n\n          break;\n\n        case 'counter':\n          if (this.props.player.id === msg.message.counteredPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.counteringPlayerUn} is trying to BLOCK you with a ${msg.message.counterCard}!!`,\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'CHALLENGE',\n              allowOutsideClick: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n              onBeforeOpen: () => {\n                setInterval(() => {\n                  const content = Swal.getContent();\n\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b && Swal.getTimerLeft()) {\n                      b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                    }\n                  }\n                }, 100);\n              }\n            }).then(r => {\n              if (r.value) {\n                console.log('send challenge to: ' + this.props.activePlayer);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.counteringPlayerId,\n                    challengedPlayerUn: msg.message.counteringPlayerUn,\n                    challengingPlayerId: this.props.player.id,\n                    challengingPlayerUn: this.props.player.username,\n                    challengedCard: msg.message.counterCard\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else if (r.dismiss) {\n                console.log(\"Where's your honor??\");\n                this.endTurn();\n              }\n            });\n          } else if (this.props.player.id === msg.message.counteringPlayerId) {\n            console.log(`You have attempted to block ${msg.message.counteredPlayerUn}!`);\n            Swal.fire({\n              title: `You have attempted to block ${msg.message.counteredPlayerUn}!`,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              allowOutsideClick: false,\n              showConfirmButton: false\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `${msg.message.counteredPlayerUn} backed down!`,\n                  icon: 'success',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  allowOutsideClick: false,\n                  showConfirmButton: false\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challenge':\n          // console.log(this.props.player.id)\n          // console.log(msg)\n          // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            if (this.props.player.hand.includes()) Swal.fire({\n              title: `${msg.message.challengingPlayerUn} challenged you!`,\n              showCancelButton: true,\n              cancelButtonText: 'Aw shit',\n              confirmButtonText: `Oh YEAH?? Show my ${msg.message.challengedCard}.`\n            }).then(r => console.log(r));\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            console.log(`You have challenged ${msg.message.challengedPlayerUn}!`);\n            Swal.fire({\n              title: 'You have challenged the player!',\n              showConfirmButton: false // timer: globalSwalTimer,\n              // timerProgressBar: true,\n\n            }).then(r => {\n              console.log(r);\n\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: 'They backed down!',\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                });\n              }\n            });\n          } else {\n            console.log(\"Player has been challenged.\");\n            Swal.close();\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, \"log who's here\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logPlayers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }\n    }, \"log players\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.endTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 14\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","globalSwalTimer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","isYourTurn","activePlayer","updatePlayer","updateTreasury","amt","treasury","updateCoins","endTurn","handHasCard","cardname","testMsg","msg","text","hereNow","channels","then","console","log","logPlayers","componentDidMount","isHost","fetch","r","json","getMessage","changeTreasury","setActivePlayer","addCardsToHand","whosTurnIsIt","associatedCard","counterCard","fire","title","username","action","timer","timerProgressBar","showCancelButton","cancelButtonText","confirmButtonText","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","value","counteredPlayerId","counteredPlayerUn","counteringPlayerId","counteringPlayerUn","allowOutsideClick","showConfirmButton","dismiss","icon","close","challengedPlayerId","challengedPlayerUn","challengingPlayerId","challengingPlayerUn","challengedCard","hand","includes","error","componentDidUpdate","render","name","join","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport './Game.css'\n\nconst globalSwalTimer = 10000\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'addCardsToHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n            }\n            break\n          case 'endTurn':\n            // Swal.close()\n            this.props.endTurn()\n            console.log(this.props.whosTurnIsIt)\n            this.props.setActivePlayer()\n            break\n          case 'alert':\n            if (!this.isYourTurn()) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} get away with it... this time`,\n                  confirmButtonText: `BLOCK ${this.props.activePlayer.username} with my ${msg.message.counterCard}.`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} get away with it in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                        counterCard: msg.message.counterCard\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `Oh SHIT, ${this.props.activePlayer.username} is trying to use ${msg.message.action}!!!`,\n                  showCancelButton: true,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  // cancelButtonColor: '#B0B0B0',\n                  cancelButtonText: 'Let him get away with it... this time',\n                  confirmButtonText: `COUNTER the bastard with my ${msg.message.counterCard}.`,\n                  html: \"<span class='swal2-text'><b></b></span>\",\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  // console.log(msg.message.counterCard)\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteringPlayerId: this.props.player.id,\n                        counterCard: msg.message.counterCard\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                showConfirmButton: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: 'Nobody challenged you!',\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                  // case switch reward depending on action\n                  this.updateCoins(2)\n                  this.updateTreasury(-2)\n                  this.endTurn()\n                }\n              })\n              \n            }\n            break\n          case 'counter':\n            if (this.props.player.id === msg.message.counteredPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.counteringPlayerUn} is trying to BLOCK you with a ${msg.message.counterCard}!!`,\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'CHALLENGE',\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent()\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                    }\n                  }, 100)\n                }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('send challenge to: ' + this.props.activePlayer)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.counteringPlayerId,\n                      challengedPlayerUn: msg.message.counteringPlayerUn,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.counterCard\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else if (r.dismiss) {\n                  console.log(\"Where's your honor??\")\n                  this.endTurn()\n                }\n              })\n            } else if (this.props.player.id === msg.message.counteringPlayerId) {\n              console.log(`You have attempted to block ${msg.message.counteredPlayerUn}!`)\n              Swal.fire({\n                title: `You have attempted to block ${msg.message.counteredPlayerUn}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                allowOutsideClick: false,\n                showConfirmButton: false,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `${msg.message.counteredPlayerUn} backed down!`,\n                    icon: 'success',\n                    timer: 1500,\n                    timerProgressBar: true,\n                    allowOutsideClick: false,\n                    showConfirmButton: false,\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challenge':\n            // console.log(this.props.player.id)\n            // console.log(msg)\n            // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              if (this.props.player.hand.includes())\n              Swal.fire({\n                title: `${msg.message.challengingPlayerUn} challenged you!`,\n                showCancelButton: true,\n                cancelButtonText: 'Aw shit',\n                confirmButtonText: `Oh YEAH?? Show my ${msg.message.challengedCard}.`\n              })\n              .then(r => console.log(r))\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              console.log(`You have challenged ${msg.message.challengedPlayerUn}!`)\n              Swal.fire({\n                title: 'You have challenged the player!',\n                showConfirmButton: false,\n                // timer: globalSwalTimer,\n                // timerProgressBar: true,\n              })\n              .then(r => {\n                console.log(r)\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: 'They backed down!',\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                }\n              })\n            } else {\n              console.log(\"Player has been challenged.\")\n              Swal.close()\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n  \n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n  \n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n  \n  handHasCard = (cardname) => {\n    \n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <p>Treasury: {this.props.treasury} coins</p>\n\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        <button onClick={this.hereNow}>log who's here</button>\n        <button onClick={this.logPlayers}>log players</button>\n        <br/><button onClick={this.endTurn}>End Turn</button>\n\n        <p>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}