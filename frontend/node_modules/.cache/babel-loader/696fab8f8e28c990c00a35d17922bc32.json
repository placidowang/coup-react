{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards;\n      this.props.initDeck(deck);\n      this.shuffleDeck();\n    };\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      } // this.props.shuffleDeck(shuffledDeck)\n\n\n      console.log('updating deck: ' + shuffleddeck);\n      this.updateDeck(shuffledDeck);\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: msg,\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            // if (!this.props.isHost) {\n            this.props.updateDeck(msg.message.updatedDeck);\n          // }\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \" who here\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    // shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck})),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","initializeGame","deckData","deck","cards","props","initDeck","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","console","log","shuffleddeck","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","testMsg","msg","hereNow","then","componentDidMount","isHost","fetch","r","json","componentDidUpdate","getMessage","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards\n    this.props.initDeck(deck)\n    this.shuffleDeck()\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            // if (!this.props.isHost) {\n              this.props.updateDeck(msg.message.updatedDeck)\n            // }\n        }\n      })\n    }\n  }\n\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    // this.props.shuffleDeck(shuffledDeck)\n    console.log('updating deck: ' + shuffleddeck)\n\n    this.updateDeck(shuffledDeck)\n  }\n\n  updateDeck = (deck) => {\n\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: msg,\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}> who here</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    // shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}