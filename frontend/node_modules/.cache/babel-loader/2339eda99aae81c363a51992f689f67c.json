{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Player from './Player.js';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      this.shuffleDeck(deck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  componentDidUpdate() {\n    console.log(deck);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"who here\"), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Player","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffleDeck","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","testMsg","msg","text","hereNow","then","console","log","componentDidMount","isHost","fetch","r","json","getMessage","error","componentDidUpdate","render","name","join","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport Player from './Player.js'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    this.shuffleDeck(deck)\n\n  }\n\n  componentDidUpdate() {\n    console.log(deck)\n\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}>who here</button>\n\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}