{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      this.shuffleDeck(deck);\n      this.distributeCards();\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      // let deck = [...this.props.deck]\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift(); // console.log([card1, card2])\n\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.updatePlayers = players => {};\n\n    this.nextTurn = () => {\n      //whosturnisit + 1 % 5\n      console.log(this.props.whosTurnIsIt);\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'addCardsToHand':\n          if (msg.message.playerId === this.props.player.id) {\n            console.log('Adding ' + msg.message.cards);\n            this.props.addCardsToHand(msg.message.cards);\n            console.log('Current hand: ' + this.props.player.hand);\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, \"who here\"), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Player","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","updatePlayers","nextTurn","console","log","whosTurnIsIt","testMsg","msg","text","hereNow","then","componentDidMount","isHost","fetch","r","json","getMessage","addCardsToHand","hand","error","componentDidUpdate","render","name","join","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'addCardsToHand':\n            if (msg.message.playerId === this.props.player.id) {\n              console.log('Adding ' + msg.message.cards)\n              this.props.addCardsToHand(msg.message.cards)\n              console.log('Current hand: ' + this.props.player.hand)\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    this.shuffleDeck(deck)\n    this.distributeCards()\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    // let deck = [...this.props.deck]\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      // console.log([card1, card2])\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayers = (players) => {\n\n  }\n\n  nextTurn = () => {\n    //whosturnisit + 1 % 5\n    \n    console.log(this.props.whosTurnIsIt)\n  }\n  \n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}>who here</button>\n\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}