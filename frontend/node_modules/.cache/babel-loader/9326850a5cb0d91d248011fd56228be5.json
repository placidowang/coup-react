{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport Card from './Card.js';\nimport './Game.css';\nconst globalSwalTimer = 10000;\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      let deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      })); // deck = deck.filter(card => card.name === \"Duke\" || card.name === \"Assassin\")\n\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck], getNewCard = false) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      if (getNewCard) {\n        const newCard = deck.shift();\n        this.updateDeck(deck);\n        return newCard;\n      } else {\n        this.updateDeck(deck);\n        return deck;\n      }\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'updateHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.actionSuccessful = (action, targetPlayerId) => {\n      switch (action) {\n        case 'Foreign Aid':\n          break;\n\n        case 'Coup':\n          break;\n\n        case 'Tax':\n          break;\n\n        case 'Assassinate':\n          break;\n\n        case 'Exchange':\n          break;\n\n        case 'Steal':\n          break;\n\n        default:\n          console.error('Invalid action.');\n      }\n    };\n\n    this.loseCard = () => {\n      /* if player only has one unrevealed card, player loses the game */\n      Swal.fire({\n        title: `Pick a card to lose.`,\n        focusConfirm: false,\n        showCancelButton: true,\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n        cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        timer: globalSwalTimer,\n        timerProgressBar: true,\n        html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n        onBeforeOpen: () => {\n          setInterval(() => {\n            const content = Swal.getContent();\n\n            if (content) {\n              const b = content.querySelector('b');\n\n              if (b && Swal.getTimerLeft()) {\n                b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n              }\n            }\n          }, 100);\n        } // footer: 'fuck',\n\n      }).then(r => {\n        // console.log(r)\n        let i;\n\n        if (r.value) {\n          i = 0;\n        } else if (r.dismiss === 'cancel') {\n          i = 1;\n        } else {\n          i = Math.round(Math.random());\n        }\n\n        Swal.fire({\n          title: `Lost ${this.props.player.hand[i].name}!`,\n          timer: 1500,\n          showConfirmButton: false\n        }).then(r => {\n          this.props.revealCard(i);\n          this.updatePlayer();\n          this.endTurn();\n        });\n      });\n    };\n\n    this.getNewCard = challengedCard => {\n      const oldCard = this.props.player.hand.find(card => card.name === challengedCard);\n      this.props.deck.push(oldCard);\n      const newCard = this.shuffleDeck(this.props.deck, true);\n      const aOrAn = /[AEIOU]/.test(newCard.name.charAt(0)) ? \"an\" : \"a\";\n      console.log(`You shuffled in your ${oldCard.name} and got ${aOrAn} ${newCard.name}!`);\n      Swal.fire({\n        title: `You shuffled in your ${oldCard.name} and got ${aOrAn} ${newCard.name}!`,\n        timer: 2000,\n        showConfirmButton: false\n      });\n      const newHand = [...this.props.player.hand];\n      newHand[newHand.findIndex(card => card.id === oldCard.id)] = newCard;\n      this.props.updateHand(newHand);\n      this.updatePlayer();\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.gameOver = () => {\n      Swal.close();\n      Swal.fire({\n        title: 'Game over, man!',\n        showConfirmButton: false,\n        allowOutsideClick: false\n      }); // reveal remaining card\n\n      const newHand = [...this.props.player.hand];\n      const i = this.props.player.hand[0].isRevealed ? 1 : 0;\n      newHand[i] = { ...newHand[i],\n        isRevealed: true\n      };\n      this.props.updateHand(newHand); // skip player in turn order; cannot just remove player from players list or their cards will also be removed\n\n      this.props.gameOver();\n      this.updatePlayer();\n      this.endTurn();\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'updateHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.updateHand(msg.message.cards); // this.updatePlayer(this.props.player)\n\n            this.updatePlayer();\n          }\n\n          break;\n\n        case 'endTurn':\n          // Swal.close()\n          const currentActivePlayerId = this.props.activePlayer.id;\n          this.props.endTurn();\n          this.props.setActivePlayer();\n\n          if (this.props.activePlayer.id === currentActivePlayerId && this.isYourTurn()) {\n            Swal.close();\n            Swal.fire({\n              title: 'u win gj gg',\n              confirmButtonText: 'New Game?',\n              allowOutsideClick: false\n            });\n          }\n\n          console.log(`${this.props.players[this.props.whosTurnIsIt].username}'s turn.`);\n          break;\n\n        case 'target':\n          const targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId);\n\n          if (this.props.player.id === targetPlayer.id) {\n            // console.log(msg.message.action)\n            // console.log(msg.message.associatedCard)\n            // console.log(msg.message.counterCards)\n            if (msg.message.action === 'Coup') {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} couped you!`,\n                showConfirmButton: false,\n                allowOutsideClick: false,\n                timer: 2000\n              }).then(r => {\n                this.loseCard();\n              });\n            } else {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} on you!`\n              });\n            }\n          } else if (this.isYourTurn()) {\n            if (msg.message.action === 'Coup') {\n              this.updateCoins(-7);\n              this.updateTreasury(7);\n              Swal.fire({\n                title: `You spent 7 coins and couped ${targetPlayer.username}!`,\n                showConfirmButton: false,\n                timer: 2000\n              });\n            } else {\n              Swal.fire({\n                title: `Waiting for ${targetPlayer.username}.`,\n                showConfirmButton: false,\n                allowOutsideClick: false\n              });\n            }\n          }\n\n          break;\n\n        case 'alert':\n          if (!this.isYourTurn()) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      action: msg.message.action,\n                      counterCard: msg.message.counterCard,\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } else if (msg.message.associatedCard && !msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} with a ${msg.message.associatedCard}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `CHALLENGE`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  console.log('Sending challenge to ' + msg.message.counteringPlayerUn);\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: this.props.activePlayer.id,\n                      challengedPlayerUn: this.props.activePlayer.username,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.associatedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            else if (msg.message.associatedCard && msg.message.counterCard) {}\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You used ${msg.message.action}!`,\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                }); // case switch reward depending on action\n\n                this.updateCoins(2);\n                this.updateTreasury(-2);\n                this.endTurn();\n              }\n            });\n          }\n\n          break;\n\n        case 'counter':\n          if (this.props.player.id === msg.message.counteredPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'CHALLENGE',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              timer: 9999999,\n              timerProgressBar: true,\n              html: \"<span class='swal2-text'>Backing down in <b></b></span><button id='testBtn'>sup</button>\",\n              onBeforeOpen: () => {\n                const content = Swal.getContent();\n                setInterval(() => {\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b && Swal.getTimerLeft()) {\n                      b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                    }\n                  }\n                }, 100);\n                const testBtn = content.querySelector('#testBtn');\n                testBtn.addEventListener('click', () => {\n                  console.log('clicked test button');\n                });\n                const actionsDiv = document.querySelector('.swal2-actions');\n                const testBtn2 = document.createElement('button');\n                testBtn2.innerHTML = 'Test2';\n                testBtn2.addEventListener('click', () => {\n                  console.log('test2'); // r will be {}\n\n                  Swal.close();\n                });\n                testBtn2.className = \"swal2-confirm swal2-styled\";\n                actionsDiv.append(testBtn2);\n              }\n            }).then(r => {\n              if (r.value) {\n                console.log('Sending challenge to ' + msg.message.counteringPlayerUn);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.counteringPlayerId,\n                    challengedPlayerUn: msg.message.counteringPlayerUn,\n                    challengingPlayerId: this.props.player.id,\n                    challengingPlayerUn: this.props.player.username,\n                    challengedCard: msg.message.counterCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else if (r.dismiss) {\n                console.log(\"Where's your honor??\"); // send message that blocker won, close swal\n\n                this.endTurn();\n              }\n            });\n          } else if (this.props.player.id === msg.message.counteringPlayerId) {\n            console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`);\n            Swal.fire({\n              title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                  icon: 'success',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                  showConfirmButton: false\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challenge':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard);\n\n            if (challengedCard && !challengedCard.isRevealed) {\n              Swal.fire({\n                title: `${msg.message.challengingPlayerUn} challenged you!`,\n                showCancelButton: true,\n                confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                cancelButtonText: \"Lose a card (Hint: don't do this)\"\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerWon',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else if (r.dismiss) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                }\n              });\n            } else {\n              Swal.fire({\n                title: 'You were called out!',\n                timer: 1500,\n                timerProgressBar: true,\n                // showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false\n              }).then(r => {\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challengedPlayerLost',\n                    challengedPlayerId: msg.message.challengedPlayerId,\n                    challengedPlayerUn: msg.message.challengedPlayerUn,\n                    challengingPlayerId: msg.message.challengingPlayerId,\n                    challengingPlayerUn: msg.message.challengingPlayerUn,\n                    challengedCard: msg.message.challengedCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              });\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`);\n            Swal.fire({\n              title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n              showConfirmButton: false,\n              allowOutsideClick: false,\n              allowEscapeKey: false // need to have no timer, wait on challenged player's response\n              // timer: globalSwalTimer,\n              // timerProgressBar: true,\n\n            });\n          } else {\n            console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challengedPlayerWon':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            if (this.isYourTurn()) {\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                text: `You use ${msg.message.action} and ${msg.message.challengingPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.getNewCard(msg.message.challengedCard));\n            } else if (!this.isYourTurn()) {\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                text: `${msg.message.challengingPlayerUn} loses a card and doesn't get to ${msg.message.action}.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.getNewCard(msg.message.challengedCard));\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n              Swal.fire({\n                title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}!`,\n                timer: 2000,\n                showConfirmButton: false,\n                allowOutsideClick: false\n              }).then(r => this.gameOver());\n            } else {\n              Swal.close();\n              Swal.fire({\n                title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}! You lost the challenge!`,\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.loseCard());\n            }\n          }\n\n          break;\n\n        case 'challengedPlayerLost':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n              this.gameOver();\n            } else {\n              Swal.fire({\n                title: 'You lost the challenge!',\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.loseCard());\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            // Swal.close()\n            if (this.isYourTurn()) {\n              // switch case rewards per action type\n              this.updateCoins(2);\n              this.updateTreasury(-2);\n              Swal.fire({\n                title: `You won the challenge! You use ${msg.message.action}.`,\n                text: `${msg.message.challengedPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              });\n            } else if (!this.isYourTurn()) {\n              Swal.fire({\n                title: `You won the challenge! You blocked ${msg.message.challengedPlayerUn}'s ${msg.message.action}!`,\n                text: `${msg.message.challengedPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              });\n            }\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"whose-turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treasury\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 11\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"court-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 11\n      }\n    }, \"Court Deck: \", this.props.deck.length, \" cards\")), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    getNewCard: card => dispatch({\n      type: 'getNewCard',\n      card: card\n    }),\n    updateHand: cards => dispatch({\n      type: 'updateHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    revealCard: i => dispatch({\n      type: 'revealCard',\n      i: i\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    }),\n    gameOver: () => dispatch({\n      type: 'gameOver'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","Card","globalSwalTimer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","getNewCard","i","length","j","Math","floor","random","newCard","shift","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","card2","playerId","id","isYourTurn","activePlayer","updatePlayer","updateTreasury","amt","treasury","updateCoins","actionSuccessful","action","targetPlayerId","console","error","loseCard","fire","title","focusConfirm","showCancelButton","cancelButtonColor","confirmButtonText","hand","name","cancelButtonText","allowOutsideClick","allowEscapeKey","timer","timerProgressBar","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","then","r","value","dismiss","round","showConfirmButton","revealCard","endTurn","challengedCard","oldCard","find","push","aOrAn","test","charAt","log","newHand","findIndex","updateHand","gameOver","close","testMsg","msg","text","hereNow","channels","logPlayers","componentDidMount","isHost","fetch","json","getMessage","changeTreasury","setActivePlayer","currentActivePlayerId","whosTurnIsIt","username","targetPlayer","associatedCard","counterCard","counteredPlayerId","counteredPlayerUn","counteringPlayerId","counteringPlayerUn","challengedPlayerId","challengedPlayerUn","challengingPlayerId","challengingPlayerUn","icon","testBtn","addEventListener","actionsDiv","document","testBtn2","createElement","innerHTML","className","append","filter","componentDidUpdate","render","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport Card from './Card.js'\nimport './Game.css'\n\nconst globalSwalTimer = 10000\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'updateHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.updateHand(msg.message.cards)\n              // this.updatePlayer(this.props.player)\n              this.updatePlayer()\n            }\n            break\n          case 'endTurn':\n            // Swal.close()\n            const currentActivePlayerId = this.props.activePlayer.id\n            this.props.endTurn()\n            this.props.setActivePlayer()\n            if (this.props.activePlayer.id === currentActivePlayerId && this.isYourTurn()) {\n              Swal.close()\n              Swal.fire({\n                title: 'u win gj gg',\n                confirmButtonText: 'New Game?',\n                allowOutsideClick: false\n              })\n            }\n            console.log(`${this.props.players[this.props.whosTurnIsIt].username}'s turn.`)\n            break\n          case 'target':\n            const targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId)\n            if (this.props.player.id === targetPlayer.id) {\n              // console.log(msg.message.action)\n              // console.log(msg.message.associatedCard)\n              // console.log(msg.message.counterCards)\n              if (msg.message.action === 'Coup') {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} couped you!`,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                  timer: 2000,\n                })\n                .then(r => {this.loseCard()})\n              } else {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} on you!`\n                })\n              }\n\n            } else if (this.isYourTurn()) {\n              if (msg.message.action === 'Coup') {\n                this.updateCoins(-7)\n                this.updateTreasury(7)\n                Swal.fire({\n                  title: `You spent 7 coins and couped ${targetPlayer.username}!`,\n                  showConfirmButton: false,\n                  timer: 2000,\n                })\n              } else {\n                Swal.fire({\n                  title: `Waiting for ${targetPlayer.username}.`,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                })\n              }\n            }\n            break\n          case 'alert':\n            if (!this.isYourTurn()) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        action: msg.message.action,\n                        counterCard: msg.message.counterCard,\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              } else if (msg.message.associatedCard && !msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} with a ${msg.message.associatedCard}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `CHALLENGE`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    console.log('Sending challenge to ' + msg.message.counteringPlayerUn)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: this.props.activePlayer.id,\n                        challengedPlayerUn: this.props.activePlayer.username,\n                        challengingPlayerId: this.props.player.id,\n                        challengingPlayerUn: this.props.player.username,\n                        challengedCard: msg.message.associatedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                \n              }\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You used ${msg.message.action}!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                  // case switch reward depending on action\n                  this.updateCoins(2)\n                  this.updateTreasury(-2)\n                  this.endTurn()\n                }\n              })\n            }\n            break\n          case 'counter':\n            if (this.props.player.id === msg.message.counteredPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'CHALLENGE',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                timer: 9999999,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span><button id='testBtn'>sup</button>\",\n                onBeforeOpen: () => {\n                  const content = Swal.getContent()\n                  setInterval(() => {\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                      \n                    }\n                  }, 100)\n                  \n                  const testBtn = content.querySelector('#testBtn')\n                  testBtn.addEventListener('click', () => {\n                    console.log('clicked test button')\n                  })\n\n                  const actionsDiv = document.querySelector('.swal2-actions')\n                  const testBtn2 = document.createElement('button')\n                  testBtn2.innerHTML = 'Test2'\n                  testBtn2.addEventListener('click', () => {\n                    console.log('test2')\n                    // r will be {}\n                    Swal.close()\n                  })\n                  testBtn2.className = \"swal2-confirm swal2-styled\"\n                  actionsDiv.append(testBtn2)\n                }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('Sending challenge to ' + msg.message.counteringPlayerUn)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.counteringPlayerId,\n                      challengedPlayerUn: msg.message.counteringPlayerUn,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.counterCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else if (r.dismiss) {\n                  console.log(\"Where's your honor??\")\n                  // send message that blocker won, close swal\n                  this.endTurn()\n                }\n              })\n            } else if (this.props.player.id === msg.message.counteringPlayerId) {\n              console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`)\n              Swal.fire({\n                title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                    icon: 'success',\n                    timer: 1500,\n                    timerProgressBar: true,\n                    allowOutsideClick: false,\n                    allowEscapeKey: false,\n                    showConfirmButton: false,\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challenge':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard)\n              if (challengedCard && !challengedCard.isRevealed) {\n                Swal.fire({\n                  title: `${msg.message.challengingPlayerUn} challenged you!`,\n                  showCancelButton: true,\n                  confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                  cancelButtonText: \"Lose a card (Hint: don't do this)\",\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerWon',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else if (r.dismiss) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerLost',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  }\n                })\n              } else {\n                Swal.fire({\n                  title: 'You were called out!',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  // showConfirmButton: false,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                })\n                .then(r => {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                })\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`)\n              Swal.fire({\n                title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n                showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                // need to have no timer, wait on challenged player's response\n                // timer: globalSwalTimer,\n                // timerProgressBar: true,\n              })\n            } else {\n              console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challengedPlayerWon':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              if (this.isYourTurn()) {\n                Swal.fire({\n                  title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                  text: `You use ${msg.message.action} and ${msg.message.challengingPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.getNewCard(msg.message.challengedCard))\n              } else if (!this.isYourTurn()) {\n                Swal.fire({\n                  title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                  text: `${msg.message.challengingPlayerUn} loses a card and doesn't get to ${msg.message.action}.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.getNewCard(msg.message.challengedCard))\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n                Swal.fire({\n                  title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}!`,\n                  timer: 2000,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                })\n                .then(r => this.gameOver())\n              } else {\n                Swal.close()\n                Swal.fire({\n                  title: `${msg.message.challengedPlayerUn} had a ${msg.message.challengedCard}! You lost the challenge!`,\n                  text: 'You lose a card.',\n                  icon: 'error',\n                  allowEscapeKey: false,\n                  allowOutsideClick: false,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.loseCard())\n              }\n            }\n            break\n          case 'challengedPlayerLost':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n                this.gameOver()\n              } else {\n                Swal.fire({\n                  title: 'You lost the challenge!',\n                  text: 'You lose a card.',\n                  icon: 'error',\n                  allowEscapeKey: false,\n                  allowOutsideClick: false,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.loseCard())  \n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              // Swal.close()\n\n              if (this.isYourTurn()) {\n                // switch case rewards per action type\n                this.updateCoins(2)\n                this.updateTreasury(-2)\n  \n                Swal.fire({\n                  title: `You won the challenge! You use ${msg.message.action}.`,\n                  text: `${msg.message.challengedPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n              } else if (!this.isYourTurn()) {\n                Swal.fire({\n                  title: `You won the challenge! You blocked ${msg.message.challengedPlayerUn}'s ${msg.message.action}!`,\n                  text: `${msg.message.challengedPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n              }\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n  \n  initializeGame = (deckData) => {\n    let deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    // deck = deck.filter(card => card.name === \"Duke\" || card.name === \"Assassin\")\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck], getNewCard = false) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    if (getNewCard) {\n      const newCard = deck.shift()\n      this.updateDeck(deck)\n      return newCard\n    } else {\n      this.updateDeck(deck)\n      return deck\n    }\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n  \n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  // may need to move up or down\n  actionSuccessful = (action, targetPlayerId) => {\n    switch (action) {\n      case 'Foreign Aid':\n\n        break\n      case 'Coup':\n\n        break\n      case 'Tax':\n\n        break\n      case 'Assassinate':\n        break\n      case 'Exchange':\n        break\n      case 'Steal':\n        break\n      default:\n        console.error('Invalid action.')\n    }\n  }\n\n  // pick card to reveal, or lose one randomly based on timer\n  loseCard = () => {\n    /* if player only has one unrevealed card, player loses the game */\n    Swal.fire({\n      title: `Pick a card to lose.`,\n      focusConfirm: false,\n      showCancelButton: true,\n      cancelButtonColor: '#3085d6',\n      confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n      cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      timer: globalSwalTimer,\n      timerProgressBar: true,\n      html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n      onBeforeOpen: () => {\n        setInterval(() => {\n          const content = Swal.getContent()\n          if (content) {\n            const b = content.querySelector('b')\n            if (b && Swal.getTimerLeft()) {\n              b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n            }\n          }\n        }, 100)\n      }\n      // footer: 'fuck',\n    })\n    .then(r => {\n      // console.log(r)\n      let i\n      if (r.value) {\n        i = 0\n      } else if (r.dismiss === 'cancel') {\n        i = 1\n      } else {\n        i = Math.round(Math.random())\n      }\n      \n      Swal.fire({\n        title: `Lost ${this.props.player.hand[i].name}!`,\n        timer: 1500,\n        showConfirmButton: false,\n      })\n      .then(r => {\n        this.props.revealCard(i)\n        this.updatePlayer()\n        this.endTurn()\n      })\n    })\n  }\n\n  // after showing winning a card, shuffle it into deck and draw a new card\n  getNewCard = (challengedCard) => {\n    const oldCard = this.props.player.hand.find(card => card.name === challengedCard)\n    this.props.deck.push(oldCard)\n    const newCard = this.shuffleDeck(this.props.deck, true)\n    const aOrAn = /[AEIOU]/.test(newCard.name.charAt(0)) ? \"an\" : \"a\"\n    console.log(`You shuffled in your ${oldCard.name} and got ${aOrAn} ${newCard.name}!`)\n    Swal.fire({\n      title: `You shuffled in your ${oldCard.name} and got ${aOrAn} ${newCard.name}!`,\n      timer: 2000,\n      showConfirmButton: false,\n    })\n\n    const newHand = [...this.props.player.hand]\n    newHand[newHand.findIndex(card => card.id === oldCard.id)] = newCard\n    this.props.updateHand(newHand)\n    this.updatePlayer()\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  gameOver = () => {\n    Swal.close()\n    Swal.fire({\n      title: 'Game over, man!',\n      showConfirmButton: false,\n      allowOutsideClick: false\n    })\n    // reveal remaining card\n    const newHand = [...this.props.player.hand]\n    const i = (this.props.player.hand[0].isRevealed) ? 1 : 0\n    newHand[i] = {...newHand[i], isRevealed: true}\n    this.props.updateHand(newHand)\n    // skip player in turn order; cannot just remove player from players list or their cards will also be removed\n    this.props.gameOver()\n    this.updatePlayer()\n    this.endTurn()\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p className='whose-turn'>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        <div className='treasury'>\n          <p>Treasury: {this.props.treasury} coins</p>\n        </div>\n\n        <div className='court-deck'>\n          <Card />\n          <p>Court Deck: {this.props.deck.length} cards</p>\n        </div>\n        {/* <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p> */}\n        {/* <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button> */}\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        {/* <button onClick={this.hereNow}>log who's here</button> */}\n        {/* <button onClick={this.logPlayers}>log players</button> */}\n\n        {/* <br/><button onClick={this.endTurn}>End Turn</button> */}\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    getNewCard: ((card) => dispatch({type: 'getNewCard', card: card})),\n    updateHand: ((cards) => dispatch({type: 'updateHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    revealCard: ((i) => dispatch({type: 'revealCard', i: i})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n    gameOver: (() => dispatch({type: 'gameOver'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}