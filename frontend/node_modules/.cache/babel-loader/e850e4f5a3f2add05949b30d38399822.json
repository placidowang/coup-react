{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Broadcast = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _config = require('../config.json');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction subscribeChannel(event, channel, callback) {\n  if (!event[channel]) {\n    event[channel] = callback || {};\n  } else if (event[channel] === {} && callback) {\n    event[channel] = callback;\n  }\n}\n\nfunction unsubscribeChannel(event, channel) {\n  if (event[channel]) {\n    delete event[channel];\n  }\n}\n\nvar Broadcast = exports.Broadcast = function () {\n  function Broadcast() {\n    _classCallCheck(this, Broadcast);\n\n    this._message = {};\n    this._presence = {};\n    this._status = null;\n  }\n\n  _createClass(Broadcast, [{\n    key: 'message',\n    value: function message(channel, callback) {\n      subscribeChannel(this._message, channel, callback);\n    }\n  }, {\n    key: 'presence',\n    value: function presence(channel, callback) {\n      subscribeChannel(this._presence, channel, callback);\n    }\n  }, {\n    key: 'status',\n    value: function status(callback) {\n      if (!this._status) {\n        this._status = callback || {};\n      } else if (this._status === {} && callback) {\n        this._status = callback;\n      }\n    }\n  }, {\n    key: 'isSubscribe',\n    value: function isSubscribe(event, channel) {\n      var subscriber = '_' + event;\n\n      if (subscriber === '_status') {\n        return this[subscriber];\n      } else {\n        return this[subscriber] && this[subscriber][channel];\n      }\n    }\n  }, {\n    key: 'emit',\n    value: function emit(event, channel, args) {\n      var subscriber = '_' + event;\n\n      if (this[subscriber] && this[subscriber][channel] && typeof this[subscriber][channel] === 'function') {\n        this[subscriber][channel].call(null, args);\n      }\n    }\n  }, {\n    key: 'emitStatus',\n    value: function emitStatus(args) {\n      if (this._status && typeof this._status === 'function') {\n        this._status.call(null, args);\n      }\n    }\n  }, {\n    key: 'error',\n    value: function error(callback) {\n      this._error = callback;\n    }\n  }, {\n    key: 'emitError',\n    value: function emitError(args) {\n      if (this._error) {\n        this._error.call(null, args);\n      }\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe(channel) {\n      var _this = this;\n\n      _config2.default.subscribe_listener_events_to_broadcast.forEach(function (event) {\n        var subscriber = '_' + event;\n        unsubscribeChannel(_this[subscriber], channel);\n      });\n    }\n  }]);\n\n  return Broadcast;\n}();","map":{"version":3,"sources":["broadcast.js"],"names":["event","callback","Broadcast","channel","subscribeChannel","subscriber","args","config","unsubscribeChannel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;;;;;;;;;;AASA,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAoD;AAClD,MAAI,CAACA,KAAAA,CAAL,OAAKA,CAAL,EAAqB;AACnBA,IAAAA,KAAAA,CAAAA,OAAAA,CAAAA,GAAiBC,QAAAA,IAAjBD,EAAAA;AADF,GAAA,MAEO,IAAIA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAAAA,IAAJ,QAAA,EAAuC;AAC5CA,IAAAA,KAAAA,CAAAA,OAAAA,CAAAA,GAAAA,QAAAA;AACD;AACF;;AAQD,SAAA,kBAAA,CAAA,KAAA,EAAA,OAAA,EAA4C;AAC1C,MAAIA,KAAAA,CAAJ,OAAIA,CAAJ,EAAoB;AAClB,WAAOA,KAAAA,CAAP,OAAOA,CAAP;AACD;AACF;;IAEYE,S,WAAAA,S;AACX,WAAA,SAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACZ,SAAA,QAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,OAAA,GAAA,IAAA;AACD;;;;4BAQOC,O,EAASF,Q,EAAU;AACzBG,MAAAA,gBAAAA,CAAiB,KAAjBA,QAAAA,EAAAA,OAAAA,EAAAA,QAAAA,CAAAA;AACD;;;6BAQQD,O,EAASF,Q,EAAU;AAC1BG,MAAAA,gBAAAA,CAAiB,KAAjBA,SAAAA,EAAAA,OAAAA,EAAAA,QAAAA,CAAAA;AACD;;;2BAOMH,Q,EAAU;AACf,UAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,aAAA,OAAA,GAAeA,QAAAA,IAAf,EAAA;AADF,OAAA,MAEO,IAAI,KAAA,OAAA,KAAA,EAAA,IAAJ,QAAA,EAAqC;AAC1C,aAAA,OAAA,GAAA,QAAA;AACD;AACF;;;gCASWD,K,EAAOG,O,EAAS;AAC1B,UAAIE,UAAAA,GAAAA,MAAJ,KAAA;;AAEA,UAAIA,UAAAA,KAAJ,SAAA,EAA8B;AAC5B,eAAO,KAAP,UAAO,CAAP;AADF,OAAA,MAEO;AACL,eAAQ,KAAA,UAAA,KAAoB,KAAA,UAAA,EAA5B,OAA4B,CAA5B;AACD;AACF;;;yBASIL,K,EAAOG,O,EAASG,I,EAAM;AACzB,UAAID,UAAAA,GAAAA,MAAJ,KAAA;;AAEA,UAAI,KAAA,UAAA,KAAoB,KAAA,UAAA,EAApB,OAAoB,CAApB,IAAiD,OAAO,KAAA,UAAA,EAAP,OAAO,CAAP,KAArD,UAAA,EAAsG;AACpG,aAAA,UAAA,EAAA,OAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA;AACD;AACF;;;+BAOUC,I,EAAM;AACf,UAAI,KAAA,OAAA,IAAgB,OAAO,KAAP,OAAA,KAApB,UAAA,EAAwD;AACtD,aAAA,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA;AACD;AACF;;;0BAOKL,Q,EAAU;AACd,WAAA,MAAA,GAAA,QAAA;AACD;;;8BAOSK,I,EAAM;AACd,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA;AACD;AACF;;;gCAOWH,O,EAAS;AAAA,UAAA,KAAA,GAAA,IAAA;;AACnBI,MAAAA,QAAAA,CAAAA,OAAAA,CAAAA,sCAAAA,CAAAA,OAAAA,CAAsD,UAAA,KAAA,EAAW;AAC/D,YAAIF,UAAAA,GAAAA,MAAJ,KAAA;AAEAG,QAAAA,kBAAAA,CAAmB,KAAA,CAAnBA,UAAmB,CAAnBA,EAAAA,OAAAA,CAAAA;AAHFD,OAAAA;AAKD","sourcesContent":["import config from '../config.json';\n\n/**\n * Subscribe a channel to a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n * @param {function} callback to execute.\n */\nfunction subscribeChannel(event, channel, callback) {\n  if (!event[channel]) {\n    event[channel] = callback || {};\n  } else if (event[channel] === {} && callback) {\n    event[channel] = callback;\n  }\n}\n\n/**\n * Unsubscribe a channel of a trigger event\n *\n * @param {string} event - (message, presence, status)\n * @param {string|[string]} channel\n */\nfunction unsubscribeChannel(event, channel) {\n  if (event[channel]) {\n    delete event[channel];\n  }\n}\n\nexport class Broadcast {\n  constructor() {\n    this._message = {};\n    this._presence = {};\n    this._status = null;\n  }\n\n  /**\n   * Subscribe a callback to a channel through the message event\n   *\n   * @param {string} channel\n   * @param {function} callback\n   */\n  message(channel, callback) {\n    subscribeChannel(this._message, channel, callback);\n  }\n\n  /**\n   * Subscribe a callback to a channel through the presence event\n   *\n   * @param {string} channel\n   * @param {function} callback\n   */\n  presence(channel, callback) {\n    subscribeChannel(this._presence, channel, callback);\n  }\n\n  /**\n   * Subscribe a callback through the status event\n   *\n   * @param callback\n   */\n  status(callback) {\n    if (!this._status) {\n      this._status = callback || {};\n    } else if (this._status === {} && callback) {\n      this._status = callback;\n    }\n  }\n\n  /**\n   * Validate if a channel is subscribe to an event\n   *\n   * @param {string} event\n   * @param {string} channel\n   * @returns {boolean}\n   */\n  isSubscribe(event, channel) {\n    let subscriber = `_${event}`;\n\n    if (subscriber === '_status') {\n      return this[subscriber];\n    } else {\n      return (this[subscriber] && this[subscriber][channel]);\n    }\n  }\n\n  /**\n   * Emit a message to a channel through an event\n   *\n   * @param {string} event - (message, presence)\n   * @param {string} channel\n   * @param {object} args\n   */\n  emit(event, channel, args) {\n    let subscriber = `_${event}`;\n\n    if (this[subscriber] && this[subscriber][channel] && typeof this[subscriber][channel] === 'function') {\n      this[subscriber][channel].call(null, args);\n    }\n  }\n\n  /**\n   * Emit the status event through the callback subscribed\n   *\n   * @param {object} args\n   */\n  emitStatus(args) {\n    if (this._status && typeof this._status === 'function') {\n      this._status.call(null, args);\n    }\n  }\n\n  /**\n   * Subscribe or unsubscribe for catching errors from trigger events\n   *\n   * @param {function|null} callback\n   */\n  error(callback) {\n    this._error = callback;\n  }\n\n  /**\n   * Emit an error to the callback subscribed\n   *\n   * @param {object} args\n   */\n  emitError(args) {\n    if (this._error) {\n      this._error.call(null, args);\n    }\n  }\n\n  /**\n   * Unsubscribe a channel of all events\n   *\n   * @param {string} channel\n   */\n  unsubscribe(channel) {\n    config.subscribe_listener_events_to_broadcast.forEach((event) => {\n      let subscriber = `_${event}`;\n\n      unsubscribeChannel(this[subscriber], channel);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}