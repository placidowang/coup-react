{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards;\n      this.props.initDeck(deck);\n      this.shuffleDeck(deck);\n    };\n\n    this.shuffleDeck = (shuffledDeck = [...this.props.deck]) => {\n      console.log(shuffledDeck); // let shuffledDeck = [...this.props.deck]\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.updateDeck(shuffledDeck);\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \" who here\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","initializeGame","deckData","deck","cards","props","initDeck","shuffleDeck","shuffledDeck","console","log","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","testMsg","msg","text","hereNow","then","componentDidMount","isHost","fetch","r","json","getMessage","error","componentDidUpdate","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards\n    this.props.initDeck(deck)\n    this.shuffleDeck(deck)\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  shuffleDeck = (shuffledDeck = [...this.props.deck]) => {\n    console.log(shuffledDeck)\n    // let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n\n    this.updateDeck(shuffledDeck)\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}> who here</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}