{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport Card from './Card.js';\nimport './Game.css';\nconst globalSwalTimer = 10000;\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      let deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      })); // deck = deck.filter(card => card.name === \"Duke\" || card.name === \"Assassin\")\n\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck], getNewCard = false) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      if (getNewCard) {\n        const newCard = deck.shift();\n        this.updateDeck(deck);\n        return newCard;\n      } else {\n        this.updateDeck(deck);\n        return deck;\n      }\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'updateHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.aOrAn = word => {\n      return /[aeiouAEIOU]/.test(word.charAt(0)) ? \"an\" : \"a\";\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.useAction = (action, targetPlayerId = NaN) => {\n      console.log('Using ' + action);\n      console.log('Target player ID: ' + targetPlayerId);\n\n      switch (action) {\n        // income is handled in Player.js\n        case 'Foreign Aid':\n          this.updateCoins(2);\n          this.updateTreasury(-2);\n          this.endTurn();\n          break;\n\n        case 'Tax':\n          this.updateCoins(3);\n          this.updateTreasury(-3);\n          this.endTurn();\n          break;\n\n        case 'Steal':\n          let amt = 2;\n          const remainder = this.props.players.find(player => player.id === targetPlayerId).coins - 2;\n\n          if (remainder < 0) {\n            amt += remainder;\n          }\n\n          this.updateCoins(amt);\n        // eslint-disable-next-line\n\n        case 'Coup':\n        case 'Assassinate':\n          this.props.pubnub.publish({\n            message: {\n              type: 'useTargetedAction',\n              action: action,\n              targetPlayerId: targetPlayerId\n            },\n            channel: this.props.gameChannel\n          });\n          break;\n\n        case 'Exchange':\n          let numberOfCards;\n\n          if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {}\n\n          Swal.fire({\n            title: 'Choose '\n          });\n          break;\n\n        default:\n          console.error('Invalid action.');\n      }\n    };\n\n    this.loseCard = () => {\n      /* if player only has one unrevealed card, player loses the game */\n      if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n        this.gameOver();\n        return;\n      }\n\n      Swal.fire({\n        title: `Pick a card to lose.`,\n        focusConfirm: false,\n        showCancelButton: true,\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n        cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        timer: globalSwalTimer,\n        timerProgressBar: true,\n        html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n        onBeforeOpen: () => {\n          setInterval(() => {\n            const content = Swal.getContent();\n\n            if (content) {\n              const b = content.querySelector('b');\n\n              if (b && Swal.getTimerLeft()) {\n                b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n              }\n            }\n          }, 100);\n        } // footer: 'fuck',\n\n      }).then(r => {\n        // console.log(r)\n        let i;\n\n        if (r.value) {\n          i = 0;\n        } else if (r.dismiss === 'cancel') {\n          i = 1;\n        } else {\n          i = Math.round(Math.random());\n        }\n\n        Swal.fire({\n          title: `Lost ${this.props.player.hand[i].name}!`,\n          timer: 1500,\n          showConfirmButton: false\n        }).then(r => {\n          this.props.revealCard(i);\n          this.updatePlayer();\n          this.endTurn();\n        });\n      });\n    };\n\n    this.getNewCard = challengedCard => {\n      const oldCard = this.props.player.hand.find(card => card.name === challengedCard);\n      this.props.deck.push(oldCard);\n      const newCard = this.shuffleDeck(this.props.deck, true);\n      console.log(`You shuffled in your ${oldCard.name} and got ${this.aOrAn(newCard.name)} ${newCard.name}!`);\n      Swal.fire({\n        title: `You shuffled in your ${oldCard.name} and got ${this.aOrAn(newCard.name)} ${newCard.name}!`,\n        timer: 2000,\n        showConfirmButton: false\n      });\n      const newHand = [...this.props.player.hand];\n      newHand[newHand.findIndex(card => card.id === oldCard.id)] = newCard;\n      this.props.updateHand(newHand);\n      this.updatePlayer();\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.gameOver = async () => {\n      Swal.close();\n      Swal.fire({\n        title: 'Game over, man!',\n        showConfirmButton: false,\n        allowOutsideClick: false\n      }); // reveal remaining card\n\n      const newHand = [...this.props.player.hand];\n      const i = this.props.player.hand[0].isRevealed ? 1 : 0;\n      newHand[i] = { ...newHand[i],\n        isRevealed: true\n      };\n      this.props.updateHand(newHand); // skip player in turn order; cannot just remove player from players list or their cards will also be removed\n      // await next line? problem with determining next turn when a player is defeated\n\n      await this.props.gameOver();\n      await this.updatePlayer();\n      this.endTurn();\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    }\n\n    let targetPlayer; // if (this.props.gameChannel) {\n\n    this.props.pubnub.getMessage(this.props.gameChannel, async msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'updateHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.updateHand(msg.message.cards); // this.updatePlayer(this.props.player)\n\n            this.updatePlayer();\n          }\n\n          break;\n\n        case 'endTurn':\n          // Swal.close()\n          const currentActivePlayerId = this.props.activePlayer.id;\n          this.props.endTurn();\n          this.props.setActivePlayer();\n\n          if (this.props.activePlayer.id === currentActivePlayerId && this.isYourTurn()) {\n            Swal.close();\n            Swal.fire({\n              title: 'u win gj gg',\n              confirmButtonText: 'New Game?',\n              allowOutsideClick: false\n            });\n          }\n\n          console.log(`${this.props.players[this.props.whosTurnIsIt].username}'s turn.`);\n          break;\n\n        case 'target':\n          targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId);\n\n          if (msg.message.action === 'Coup') {\n            if (this.isYourTurn()) {\n              this.updateCoins(-7);\n              this.updateTreasury(7);\n              Swal.fire({\n                title: `You spent 7 coins and Couped ${targetPlayer.username}!`,\n                showConfirmButton: false,\n                timer: 2000\n              });\n              this.useAction(msg.message.action, targetPlayer.id);\n            } // if targeted action is not Coup, i.e. Assassinate/Steal\n\n          } else {\n            if (this.props.player.id === targetPlayer.id) {\n              let counterCard = undefined;\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} on you with ${this.aOrAn(msg.message.associatedCard)} ${msg.message.associatedCard}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                confirmButtonText: 'CHALLENGE',\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}. :(`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                  const actionsDiv = Swal.getActions();\n\n                  for (const card of msg.message.counterCards) {\n                    const counterCardBtn = document.createElement('button');\n                    counterCardBtn.innerHTML = `BLOCK with ${card}`;\n                    counterCardBtn.className = \"swal2-confirm swal2-styled\"; // eslint-disable-next-line\n\n                    counterCardBtn.addEventListener('click', () => {\n                      counterCard = card;\n                      Swal.close();\n                    });\n                    actionsDiv.prepend(counterCardBtn);\n                  }\n                }\n              }).then(r => {\n                // console.log(r)\n                if (counterCard) {\n                  console.log(`Attempting to block with a(n) ${counterCard}.`);\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      action: msg.message.action,\n                      counterCard: counterCard,\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else if (r.value) {\n                  console.log('Sending challenge to ' + msg.message.counteringPlayerUn);\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: this.props.activePlayer.id,\n                      challengedPlayerUn: this.props.activePlayer.username,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.associatedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else if (r.dismiss) {\n                  console.log('ok :(');\n                }\n              });\n            } else if (this.isYourTurn()) {\n              let endTurn = true;\n              let title = `You Stole 2 coins from ${targetPlayer.username}!`;\n\n              if (msg.message.action === 'Assassinate') {\n                this.updateCoins(-3);\n                this.updateTreasury(3);\n                title = `You spent 3 coins and Assassinated ${targetPlayer.username}!`;\n                endTurn = false;\n              }\n\n              Swal.fire({\n                title: `Waiting for ${targetPlayer.username}.`,\n                showConfirmButton: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: title,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  });\n                  this.useAction(msg.message.action, targetPlayer.id);\n                  endTurn && this.endTurn();\n                }\n              });\n            }\n          }\n\n          break;\n\n        case 'alert':\n          if (!this.isYourTurn() && !this.props.player.gameOver) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `BLOCK with ${this.aOrAn(msg.message.counterCard)} ${msg.message.counterCard}.`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      action: msg.message.action,\n                      counterCard: msg.message.counterCard,\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } else if (msg.message.associatedCard && !msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} with ${this.aOrAn(msg.message.associatedCard)} ${msg.message.associatedCard}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `CHALLENGE`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  console.log('Sending challenge to ' + this.props.activePlayer.username);\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: this.props.activePlayer.id,\n                      challengedPlayerUn: this.props.activePlayer.username,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.associatedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            // only for Exchange, other actions are targeted\n            // nvm, Exchange belongs in cards with associated car and no counter card\n            else if (msg.message.associatedCard && msg.message.counterCard) {}\n          } else if (this.isYourTurn()) {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You use ${msg.message.action}!`,\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                });\n                this.useAction(msg.message.action);\n              }\n            });\n          }\n\n          break;\n\n        case 'counter':\n          if (this.props.player.id === msg.message.counteredPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with ${this.aOrAn(msg.message.counterCard)} ${msg.message.counterCard}!`,\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'CHALLENGE',\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n              onBeforeOpen: () => {\n                const content = Swal.getContent();\n                setInterval(() => {\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b && Swal.getTimerLeft()) {\n                      b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                    }\n                  }\n                }, 100);\n              }\n            }).then(r => {\n              if (r.value) {\n                console.log('Sending challenge to ' + msg.message.counteringPlayerUn);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.counteringPlayerId,\n                    challengedPlayerUn: msg.message.counteringPlayerUn,\n                    challengingPlayerId: this.props.player.id,\n                    challengingPlayerUn: this.props.player.username,\n                    challengedCard: msg.message.counterCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else if (r.dismiss) {\n                console.log(\"Where's your honor??\"); // send message that blocker won, close swal\n\n                this.endTurn();\n              }\n            });\n          } else if (this.props.player.id === msg.message.counteringPlayerId) {\n            console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`);\n            Swal.fire({\n              title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              allowOutsideClick: false,\n              allowEscapeKey: false,\n              showConfirmButton: false\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                  icon: 'success',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                  showConfirmButton: false\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`);\n\n            if (!this.props.player.gameOver) {\n              Swal.close();\n            }\n          }\n\n          break;\n\n        case 'challenge':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard);\n\n            if (challengedCard && !challengedCard.isRevealed) {\n              Swal.fire({\n                title: `${msg.message.challengingPlayerUn} challenged you!`,\n                showCancelButton: true,\n                confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                cancelButtonText: \"Lose a card (Hint: don't do this)\"\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerWon',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else if (r.dismiss) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action\n                    },\n                    channel: this.props.gameChannel\n                  });\n                }\n              });\n            } else {\n              Swal.fire({\n                title: 'You were called out!',\n                timer: 1500,\n                timerProgressBar: true,\n                // showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false\n              }).then(r => {\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challengedPlayerLost',\n                    challengedPlayerId: msg.message.challengedPlayerId,\n                    challengedPlayerUn: msg.message.challengedPlayerUn,\n                    challengingPlayerId: msg.message.challengingPlayerId,\n                    challengingPlayerUn: msg.message.challengingPlayerUn,\n                    challengedCard: msg.message.challengedCard,\n                    action: msg.message.action\n                  },\n                  channel: this.props.gameChannel\n                });\n              });\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`);\n            Swal.fire({\n              title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n              showConfirmButton: false,\n              allowOutsideClick: false,\n              allowEscapeKey: false // need to have no timer, wait on challenged player's response\n              // timer: globalSwalTimer,\n              // timerProgressBar: true,\n\n            });\n          } else {\n            console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`);\n\n            if (!this.props.player.gameOver) {\n              Swal.close();\n            }\n          }\n\n          break;\n\n        case 'challengedPlayerWon':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            if (this.isYourTurn()) {\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                text: `You use ${msg.message.action} and ${msg.message.challengingPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => {\n                this.useAction(msg.message.action, msg.message.challengingPlayerId);\n                this.getNewCard(msg.message.challengedCard);\n              });\n            } else if (!this.isYourTurn()) {\n              Swal.fire({\n                title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                text: `${msg.message.challengingPlayerUn} loses a card and doesn't get to ${msg.message.action}.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.getNewCard(msg.message.challengedCard));\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            // check if challenged card is assassin, if so then lose game, and avoid firing assassinated modal\n            if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n              Swal.fire({\n                title: `${msg.message.challengedPlayerUn} had ${this.aOrAn(msg.message.challengedCard)} ${msg.message.challengedCard}!`,\n                timer: 2000,\n                showConfirmButton: false,\n                allowOutsideClick: false\n              }).then(r => this.gameOver());\n            } else {\n              Swal.close();\n              Swal.fire({\n                title: `${msg.message.challengedPlayerUn} had ${this.aOrAn(msg.message.challengedCard)} ${msg.message.challengedCard}! You lost the challenge!`,\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.loseCard());\n            }\n          }\n\n          break;\n\n        case 'challengedPlayerLost':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            // check if challenged card is assassin, if so then lose game, and avoid firing assassinated modal\n            if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n              this.gameOver();\n            } else {\n              Swal.fire({\n                title: 'You lost the challenge!',\n                text: 'You lose a card.',\n                icon: 'error',\n                allowEscapeKey: false,\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              }).then(r => this.loseCard());\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            if (this.isYourTurn()) {\n              this.useAction(msg.message.action, msg.message.challengedPlayerId);\n              Swal.fire({\n                title: `You won the challenge! You use ${msg.message.action}.`,\n                text: `${msg.message.challengedPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              });\n            } else if (!this.isYourTurn()) {\n              Swal.fire({\n                title: `You won the challenge! You blocked ${msg.message.challengedPlayerUn}'s ${msg.message.action}!`,\n                text: `${msg.message.challengedPlayerUn} loses a card.`,\n                icon: 'success',\n                timer: globalSwalTimer,\n                timerProgressBar: true\n              });\n            }\n          }\n\n          break;\n\n        case 'useTargetedAction':\n          // targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId)\n          if (this.props.player.id === msg.message.targetPlayerId) {\n            let title = `${this.props.activePlayer.username} Couped you!`;\n\n            switch (msg.message.action) {\n              case 'Assassinate':\n                title = `${this.props.activePlayer.username} Assassinated you!`;\n              // eslint-disable-next-line\n\n              case 'Coup':\n                Swal.fire({\n                  title: title,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                  timer: 2000\n                }).then(r => {\n                  this.loseCard();\n                });\n                break;\n\n              case 'Steal':\n                let amt = 2;\n                const remainder = this.props.player.coins - 2;\n\n                if (remainder < 0) {\n                  amt += remainder;\n                }\n\n                this.updateCoins(-amt); // Swal.fire({\n                //   title: `${this.props.activePlayer.username} Stole 2 coins from you!`,\n                //   showConfirmButton: false,\n                //   allowOutsideClick: false,\n                //   timer: 2000,\n                // })\n\n                break;\n\n              default:\n                console.error(`Invalid Targeted Action: ${msg.message.action}`);\n            }\n          } else if (this.isYourTurn()) {}\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"whose-turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treasury\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 11\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"court-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 11\n      }\n    }, \"Court Deck: \", this.props.deck.length, \" cards\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    getNewCard: card => dispatch({\n      type: 'getNewCard',\n      card: card\n    }),\n    updateHand: cards => dispatch({\n      type: 'updateHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    revealCard: i => dispatch({\n      type: 'revealCard',\n      i: i\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    }),\n    gameOver: () => dispatch({\n      type: 'gameOver'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","Card","globalSwalTimer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","getNewCard","i","length","j","Math","floor","random","newCard","shift","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","card2","playerId","id","isYourTurn","activePlayer","aOrAn","word","test","charAt","updatePlayer","updateTreasury","amt","treasury","updateCoins","useAction","action","targetPlayerId","NaN","console","log","endTurn","remainder","find","coins","numberOfCards","hand","filter","fire","title","error","loseCard","gameOver","focusConfirm","showCancelButton","cancelButtonColor","confirmButtonText","name","cancelButtonText","allowOutsideClick","allowEscapeKey","timer","timerProgressBar","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","then","r","value","dismiss","round","showConfirmButton","revealCard","challengedCard","oldCard","push","newHand","findIndex","updateHand","close","testMsg","msg","text","hereNow","channels","logPlayers","componentDidMount","isHost","fetch","json","targetPlayer","getMessage","changeTreasury","setActivePlayer","currentActivePlayerId","whosTurnIsIt","username","counterCard","undefined","associatedCard","actionsDiv","getActions","counterCards","counterCardBtn","document","createElement","innerHTML","className","addEventListener","prepend","counteredPlayerId","counteredPlayerUn","counteringPlayerId","counteringPlayerUn","challengedPlayerId","challengedPlayerUn","challengingPlayerId","challengingPlayerUn","icon","componentDidUpdate","render","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport Card from './Card.js'\nimport './Game.css'\n\nconst globalSwalTimer = 10000\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    let targetPlayer\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, async(msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'updateHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.updateHand(msg.message.cards)\n              // this.updatePlayer(this.props.player)\n              this.updatePlayer()\n            }\n            break\n          case 'endTurn':\n            // Swal.close()\n            const currentActivePlayerId = this.props.activePlayer.id\n            this.props.endTurn()\n            this.props.setActivePlayer()\n            if (this.props.activePlayer.id === currentActivePlayerId && this.isYourTurn()) {\n              Swal.close()\n              Swal.fire({\n                title: 'u win gj gg',\n                confirmButtonText: 'New Game?',\n                allowOutsideClick: false\n              })\n            }\n            console.log(`${this.props.players[this.props.whosTurnIsIt].username}'s turn.`)\n            break\n          case 'target':\n            targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId)\n            if (msg.message.action === 'Coup') {\n              if (this.isYourTurn()) {\n                this.updateCoins(-7)\n                this.updateTreasury(7)\n                Swal.fire({\n                  title: `You spent 7 coins and Couped ${targetPlayer.username}!`,\n                  showConfirmButton: false,\n                  timer: 2000,\n                })\n                this.useAction(msg.message.action, targetPlayer.id)\n              }\n\n              // if targeted action is not Coup, i.e. Assassinate/Steal\n            } else {\n              if (this.props.player.id === targetPlayer.id) {\n                let counterCard = undefined\n\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} on you with ${this.aOrAn(msg.message.associatedCard)} ${msg.message.associatedCard}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  confirmButtonText: 'CHALLENGE',\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}. :(`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n\n                    const actionsDiv = Swal.getActions()\n\n                    for (const card of msg.message.counterCards) {\n                      const counterCardBtn = document.createElement('button')\n                      counterCardBtn.innerHTML = `BLOCK with ${card}`\n                      counterCardBtn.className = \"swal2-confirm swal2-styled\"\n                      // eslint-disable-next-line\n                      counterCardBtn.addEventListener('click', () => {\n                        counterCard = card\n                        Swal.close()\n                      })\n                      actionsDiv.prepend(counterCardBtn)\n                    }\n                  }\n                })\n                .then(r => {\n                  // console.log(r)\n                  if (counterCard) {\n                    console.log(`Attempting to block with a(n) ${counterCard}.`)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        action: msg.message.action,\n                        counterCard: counterCard,\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else if (r.value) {\n                    console.log('Sending challenge to ' + msg.message.counteringPlayerUn)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: this.props.activePlayer.id,\n                        challengedPlayerUn: this.props.activePlayer.username,\n                        challengingPlayerId: this.props.player.id,\n                        challengingPlayerUn: this.props.player.username,\n                        challengedCard: msg.message.associatedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else if (r.dismiss) {\n                    console.log('ok :(')\n                  }\n                })\n              } else if (this.isYourTurn()) {\n                let endTurn = true\n                let title = `You Stole 2 coins from ${targetPlayer.username}!`\n                if (msg.message.action === 'Assassinate') {\n                  this.updateCoins(-3)\n                  this.updateTreasury(3)\n                  title = `You spent 3 coins and Assassinated ${targetPlayer.username}!`\n                  endTurn = false\n                }\n                Swal.fire({\n                  title: `Waiting for ${targetPlayer.username}.`,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => {\n                  if (r.dismiss === 'timer') {\n                    Swal.fire({\n                      title: title,\n                      showConfirmButton: false,\n                      timer: 1500,\n                      icon: 'success'\n                    })\n                    this.useAction(msg.message.action, targetPlayer.id)\n                    endTurn && this.endTurn()\n                  }\n                })\n              }\n            }\n            break\n          case 'alert':\n            if (!this.isYourTurn() && !this.props.player.gameOver) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `BLOCK with ${this.aOrAn(msg.message.counterCard)} ${msg.message.counterCard}.`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        action: msg.message.action,\n                        counterCard: msg.message.counterCard,\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              } else if (msg.message.associatedCard && !msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action} with ${this.aOrAn(msg.message.associatedCard)} ${msg.message.associatedCard}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `CHALLENGE`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    console.log('Sending challenge to ' + this.props.activePlayer.username)\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challenge',\n                        challengedPlayerId: this.props.activePlayer.id,\n                        challengedPlayerUn: this.props.activePlayer.username,\n                        challengingPlayerId: this.props.player.id,\n                        challengingPlayerUn: this.props.player.username,\n                        challengedCard: msg.message.associatedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              // only for Exchange, other actions are targeted\n              // nvm, Exchange belongs in cards with associated car and no counter card\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                \n              }\n            } else if (this.isYourTurn()) {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You use ${msg.message.action}!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                  this.useAction(msg.message.action)\n                }\n              })\n            }\n            break\n          case 'counter':\n            if (this.props.player.id === msg.message.counteredPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with ${this.aOrAn(msg.message.counterCard)} ${msg.message.counterCard}!`,\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'CHALLENGE',\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n                onBeforeOpen: () => {\n                  const content = Swal.getContent()\n                  setInterval(() => {\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                      \n                    }\n                  }, 100)\n                }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('Sending challenge to ' + msg.message.counteringPlayerUn)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.counteringPlayerId,\n                      challengedPlayerUn: msg.message.counteringPlayerUn,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.counterCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else if (r.dismiss) {\n                  console.log(\"Where's your honor??\")\n                  // send message that blocker won, close swal\n                  this.endTurn()\n                }\n              })\n            } else if (this.props.player.id === msg.message.counteringPlayerId) {\n              console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`)\n              Swal.fire({\n                title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                showConfirmButton: false,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                    icon: 'success',\n                    timer: 1500,\n                    timerProgressBar: true,\n                    allowOutsideClick: false,\n                    allowEscapeKey: false,\n                    showConfirmButton: false,\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`)\n              if (!this.props.player.gameOver) {\n                Swal.close()\n              }\n            }\n            break\n          case 'challenge':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard)\n              if (challengedCard && !challengedCard.isRevealed) {\n                Swal.fire({\n                  title: `${msg.message.challengingPlayerUn} challenged you!`,\n                  showCancelButton: true,\n                  confirmButtonText: `Show my ${msg.message.challengedCard}.`,\n                  cancelButtonText: \"Lose a card (Hint: don't do this)\",\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerWon',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else if (r.dismiss) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'challengedPlayerLost',\n                        challengedPlayerId: msg.message.challengedPlayerId,\n                        challengedPlayerUn: msg.message.challengedPlayerUn,\n                        challengingPlayerId: msg.message.challengingPlayerId,\n                        challengingPlayerUn: msg.message.challengingPlayerUn,\n                        challengedCard: msg.message.challengedCard,\n                        action: msg.message.action,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  }\n                })\n              } else {\n                Swal.fire({\n                  title: 'You were called out!',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  // showConfirmButton: false,\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                })\n                .then(r => {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challengedPlayerLost',\n                      challengedPlayerId: msg.message.challengedPlayerId,\n                      challengedPlayerUn: msg.message.challengedPlayerUn,\n                      challengingPlayerId: msg.message.challengingPlayerId,\n                      challengingPlayerUn: msg.message.challengingPlayerUn,\n                      challengedCard: msg.message.challengedCard,\n                      action: msg.message.action,\n                    },\n                    channel: this.props.gameChannel\n                  })\n                })\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`)\n              Swal.fire({\n                title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n                showConfirmButton: false,\n                allowOutsideClick: false,\n                allowEscapeKey: false,\n                // need to have no timer, wait on challenged player's response\n                // timer: globalSwalTimer,\n                // timerProgressBar: true,\n              })\n            } else {\n              console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`)\n              if (!this.props.player.gameOver) {\n                Swal.close()\n              }\n            }\n            break\n          case 'challengedPlayerWon':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              if (this.isYourTurn()) {\n                Swal.fire({\n                  title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                  text: `You use ${msg.message.action} and ${msg.message.challengingPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => {\n                  this.useAction(msg.message.action, msg.message.challengingPlayerId)\n                  this.getNewCard(msg.message.challengedCard)\n                })\n              } else if (!this.isYourTurn()) {\n                Swal.fire({\n                  title: `You show your ${msg.message.challengedCard}, winning the challenge!`,\n                  text: `${msg.message.challengingPlayerUn} loses a card and doesn't get to ${msg.message.action}.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.getNewCard(msg.message.challengedCard))\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              // check if challenged card is assassin, if so then lose game, and avoid firing assassinated modal\n              if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n                Swal.fire({\n                  title: `${msg.message.challengedPlayerUn} had ${this.aOrAn(msg.message.challengedCard)} ${msg.message.challengedCard}!`,\n                  timer: 2000,\n                  showConfirmButton: false,\n                  allowOutsideClick: false,\n                })\n                .then(r => this.gameOver())\n              } else {\n                Swal.close()\n                Swal.fire({\n                  title: `${msg.message.challengedPlayerUn} had ${this.aOrAn(msg.message.challengedCard)} ${msg.message.challengedCard}! You lost the challenge!`,\n                  text: 'You lose a card.',\n                  icon: 'error',\n                  allowEscapeKey: false,\n                  allowOutsideClick: false,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.loseCard())\n              }\n            }\n            break\n          case 'challengedPlayerLost':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              // check if challenged card is assassin, if so then lose game, and avoid firing assassinated modal\n\n              if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n                this.gameOver()\n              } else {\n                Swal.fire({\n                  title: 'You lost the challenge!',\n                  text: 'You lose a card.',\n                  icon: 'error',\n                  allowEscapeKey: false,\n                  allowOutsideClick: false,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n                .then(r => this.loseCard())  \n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              if (this.isYourTurn()) {\n                this.useAction(msg.message.action, msg.message.challengedPlayerId)\n                Swal.fire({\n                  title: `You won the challenge! You use ${msg.message.action}.`,\n                  text: `${msg.message.challengedPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n              } else if (!this.isYourTurn()) {\n                Swal.fire({\n                  title: `You won the challenge! You blocked ${msg.message.challengedPlayerUn}'s ${msg.message.action}!`,\n                  text: `${msg.message.challengedPlayerUn} loses a card.`,\n                  icon: 'success',\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                })\n              }\n            }\n            break\n          case 'useTargetedAction':\n            // targetPlayer = this.props.players.find(player => player.id === msg.message.targetPlayerId)\n            if (this.props.player.id === msg.message.targetPlayerId) {\n              let title = `${this.props.activePlayer.username} Couped you!`\n              switch (msg.message.action) {\n                case 'Assassinate':\n                  title = `${this.props.activePlayer.username} Assassinated you!`\n                // eslint-disable-next-line\n                case 'Coup':\n                  Swal.fire({\n                    title: title,\n                    showConfirmButton: false,\n                    allowOutsideClick: false,\n                    timer: 2000,\n                  })\n                  .then(r => {this.loseCard()})\n                  break\n                case 'Steal':\n                  let amt = 2\n                  const remainder = this.props.player.coins - 2\n                  if (remainder < 0) {\n                    amt += remainder\n                  }\n                  this.updateCoins(-amt)\n                  // Swal.fire({\n                  //   title: `${this.props.activePlayer.username} Stole 2 coins from you!`,\n                  //   showConfirmButton: false,\n                  //   allowOutsideClick: false,\n                  //   timer: 2000,\n                  // })\n                  break\n                default:\n                  console.error(`Invalid Targeted Action: ${msg.message.action}`)\n              }\n            } else if (this.isYourTurn()) {\n\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n  \n  initializeGame = (deckData) => {\n    let deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    // deck = deck.filter(card => card.name === \"Duke\" || card.name === \"Assassin\")\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck], getNewCard = false) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    if (getNewCard) {\n      const newCard = deck.shift()\n      this.updateDeck(deck)\n      return newCard\n    } else {\n      this.updateDeck(deck)\n      return deck\n    }\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n  \n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  aOrAn = (word) => {\n    return /[aeiouAEIOU]/.test(word.charAt(0)) ? \"an\" : \"a\"\n  }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  // may need to move up or down\n  useAction = (action, targetPlayerId = NaN) => {\n    console.log('Using ' + action)\n    console.log('Target player ID: ' + targetPlayerId)\n    switch (action) {\n      // income is handled in Player.js\n      case 'Foreign Aid':\n        this.updateCoins(2)\n        this.updateTreasury(-2)\n        this.endTurn()\n        break\n      case 'Tax':\n        this.updateCoins(3)\n        this.updateTreasury(-3)\n        this.endTurn()\n        break\n      case 'Steal':\n        let amt = 2\n        const remainder = this.props.players.find(player => player.id === targetPlayerId).coins - 2\n        if (remainder < 0) {\n          amt += remainder\n        }\n        this.updateCoins(amt)\n      // eslint-disable-next-line\n      case 'Coup':\n      case 'Assassinate':\n        this.props.pubnub.publish({\n          message: {\n            type: 'useTargetedAction',\n            action: action,\n            targetPlayerId: targetPlayerId\n          },\n          channel: this.props.gameChannel\n        })\n        break\n      case 'Exchange':\n        let numberOfCards\n        if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n          \n        }\n        Swal.fire({\n          title: 'Choose '\n        })\n        break\n      default:\n        console.error('Invalid action.')\n    }\n  }\n\n  // pick card to reveal, or lose one randomly based on timer\n  loseCard = () => {\n    /* if player only has one unrevealed card, player loses the game */\n    if (this.props.player.hand.filter(card => card.isRevealed === true).length === 1) {\n      this.gameOver()\n      return\n    }\n\n    Swal.fire({\n      title: `Pick a card to lose.`,\n      focusConfirm: false,\n      showCancelButton: true,\n      cancelButtonColor: '#3085d6',\n      confirmButtonText: `Lose ${this.props.player.hand[0].name}`,\n      cancelButtonText: `Lose ${this.props.player.hand[1].name}`,\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      timer: globalSwalTimer,\n      timerProgressBar: true,\n      html: \"<span class='swal2-text'>Losing a random card in <b></b></span>\",\n      onBeforeOpen: () => {\n        setInterval(() => {\n          const content = Swal.getContent()\n          if (content) {\n            const b = content.querySelector('b')\n            if (b && Swal.getTimerLeft()) {\n              b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n            }\n          }\n        }, 100)\n      }\n      // footer: 'fuck',\n    })\n    .then(r => {\n      // console.log(r)\n      let i\n      if (r.value) {\n        i = 0\n      } else if (r.dismiss === 'cancel') {\n        i = 1\n      } else {\n        i = Math.round(Math.random())\n      }\n      \n      Swal.fire({\n        title: `Lost ${this.props.player.hand[i].name}!`,\n        timer: 1500,\n        showConfirmButton: false,\n      })\n      .then(r => {\n        this.props.revealCard(i)\n        this.updatePlayer()\n        this.endTurn()\n      })\n    })\n  }\n\n  // after showing winning a card, shuffle it into deck and draw a new card\n  getNewCard = (challengedCard) => {\n    const oldCard = this.props.player.hand.find(card => card.name === challengedCard)\n    this.props.deck.push(oldCard)\n    const newCard = this.shuffleDeck(this.props.deck, true)\n    console.log(`You shuffled in your ${oldCard.name} and got ${this.aOrAn(newCard.name)} ${newCard.name}!`)\n    Swal.fire({\n      title: `You shuffled in your ${oldCard.name} and got ${this.aOrAn(newCard.name)} ${newCard.name}!`,\n      timer: 2000,\n      showConfirmButton: false,\n    })\n\n    const newHand = [...this.props.player.hand]\n    newHand[newHand.findIndex(card => card.id === oldCard.id)] = newCard\n    this.props.updateHand(newHand)\n    this.updatePlayer()\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  gameOver = async() => {\n    Swal.close()\n    Swal.fire({\n      title: 'Game over, man!',\n      showConfirmButton: false,\n      allowOutsideClick: false\n    })\n    // reveal remaining card\n    const newHand = [...this.props.player.hand]\n    const i = (this.props.player.hand[0].isRevealed) ? 1 : 0\n    newHand[i] = {...newHand[i], isRevealed: true}\n    this.props.updateHand(newHand)\n\n    // skip player in turn order; cannot just remove player from players list or their cards will also be removed\n\n    // await next line? problem with determining next turn when a player is defeated\n    await this.props.gameOver()\n    await this.updatePlayer()\n    this.endTurn()\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p className='whose-turn'>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        <div className='treasury'>\n          <p>Treasury: {this.props.treasury} coins</p>\n        </div>\n\n        <div className='court-deck'>\n          <Card />\n          <p>Court Deck: {this.props.deck.length} cards</p>\n        </div>\n        <br/>\n        {/* <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p> */}\n        {/* <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button> */}\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        {/* <button onClick={this.hereNow}>log who's here</button> */}\n        {/* <button onClick={this.logPlayers}>log players</button> */}\n\n        {/* <br/><button onClick={this.endTurn}>End Turn</button> */}\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    getNewCard: ((card) => dispatch({type: 'getNewCard', card: card})),\n    updateHand: ((cards) => dispatch({type: 'updateHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    revealCard: ((i) => dispatch({type: 'revealCard', i: i})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n    gameOver: (() => dispatch({type: 'gameOver'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}