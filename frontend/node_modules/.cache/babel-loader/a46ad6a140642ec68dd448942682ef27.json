{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.props.shuffleDeck(shuffledDeck);\n    };\n\n    this.testMsg = msg => {\n      console.log(msg);\n      this.props.pubnub.publish({\n        message: {\n          test: msg\n        },\n        channel: this.props.lobbyChannel\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deck => {\n        this.props.init(deck.cards);\n      });\n    } // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n\n    this.props.pubnub.addListener({\n      message: msg => {\n        console.log(msg);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"message\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    init: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    shuffleDeck: shuffledDeck => dispatch({\n      type: 'shuffleDeck',\n      shuffledDeck: shuffledDeck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","shuffleDeck","shuffledDeck","props","deck","i","length","j","Math","floor","random","testMsg","msg","console","log","pubnub","publish","message","test","channel","lobbyChannel","componentDidMount","isHost","fetch","then","r","json","init","cards","addListener","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deck => {\n        this.props.init(deck.cards)\n      })\n    }\n\n\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n    this.props.pubnub.addListener({\n      message: (msg) => {\n        console.log(msg)\n      }\n    })\n  }\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    \n    this.props.shuffleDeck(shuffledDeck)\n  }\n\n  testMsg = (msg) => {\n    console.log(msg)\n    this.props.pubnub.publish({\n      message: {\n        test: msg\n      },\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    init: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}