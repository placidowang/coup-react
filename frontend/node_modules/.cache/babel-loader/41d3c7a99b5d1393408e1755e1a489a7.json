{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './Player.css';\nimport Card from '../components/Card.js';\n\nclass Player extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.takeAction = action => {\n      if (this.props.activePlayer.id === this.props.player.id) {\n        switch (action.action) {\n          case 'Income':\n            this.props.updateCoins(1);\n            this.setState({});\n        }\n      } else {\n        console.error('Please wait your turn.');\n      }\n    };\n\n    this.updatePlayers = players => {};\n  }\n\n  componentDidMount() {// this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n    //   switch (msg.message.type) {\n    //     case 'nextTurn':\n    //       this.props.nextTurn()\n    //       console.log(this.props.whosTurnIsIt)\n    //       this.props.setActivePlayer()\n    //       break\n    //     case 'log':\n    //       console.log(msg.message.text)\n    //       break\n    //     default:\n    //       console.error('Unknown player message.')\n    //       console.log(msg)\n    //   }\n    // })\n  }\n\n  componentDidUpdate() {// console.log(this.props.player)\n  }\n\n  // nextTurn = () => {\n  //   this.props.pubnub.publish({\n  //     message: { type: 'nextTurn' },\n  //     channel: this.props.gameChannel\n  //   })\n  // }\n  render() {\n    const player = this.props.player;\n    const actions = [];\n\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, player.username), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Current hand: \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, player.hand.map(card => /*#__PURE__*/React.createElement(Card, {\n      key: card.id,\n      card: card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 36\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Coins: \", player.coins), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, \"Actions: \", actions.map(action => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      key: action.action,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.takeAction(e.target.value),\n      value: action.action,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, action.action)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    nextTurn: () => dispatch({\n      type: 'nextTurn'\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js"],"names":["React","connect","Card","Player","Component","takeAction","action","props","activePlayer","id","player","updateCoins","setState","console","error","updatePlayers","players","componentDidMount","componentDidUpdate","render","actions","push","username","hand","map","card","coins","e","target","value","mapStateToProps","state","pubnub","connectionReducer","gameChannel","isHost","deck","gameReducer","playerReducer","mapDispatchToProps","dispatch","nextTurn","type","amt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAuBnCC,UAvBmC,GAuBrBC,MAAD,IAAY;AACvB,UAAI,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,EAAxB,KAA+B,KAAKF,KAAL,CAAWG,MAAX,CAAkBD,EAArD,EAAyD;AACvD,gBAAQH,MAAM,CAACA,MAAf;AACE,eAAK,QAAL;AACE,iBAAKC,KAAL,CAAWI,WAAX,CAAuB,CAAvB;AACA,iBAAKC,QAAL,CAAc,EAAd;AAHJ;AAKD,OAND,MAMO;AACLC,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;AACD;AACF,KAjCkC;;AAAA,SAmCnCC,aAnCmC,GAmClBC,OAAD,IAAa,CAE5B,CArCkC;AAAA;;AACnCC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACDC,EAAAA,kBAAkB,GAAG,CACnB;AACD;;AAkBD;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,UAAMT,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAA1B;AACA,UAAMU,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAMd,MAAX,IAAqB,KAAKC,KAAL,CAAWG,MAAX,CAAkBU,OAAvC,EAAgD;AAC9CA,MAAAA,OAAO,CAACC,IAAR,CAAa,KAAKd,KAAL,CAAWG,MAAX,CAAkBU,OAAlB,CAA0Bd,MAA1B,CAAb;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BI,MAAM,CAACY,QAAnC,CADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,eAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,MAAM,CAACa,IAAP,CAAYC,GAAZ,CAAgBC,IAAI,iBAAI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAAChB,EAAhB;AAAoB,MAAA,IAAI,EAAEgB,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,CADH,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWf,MAAM,CAACgB,KAAlB,CAPF,eAQE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmCN,OAAO,CAACI,GAAR,CAAYlB,MAAM,iBACnD;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,GAAG,EAAEA,MAAM,CAACA,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAEqB,CAAC,IAAI,KAAKtB,UAAL,CAAgBsB,CAAC,CAACC,MAAF,CAASC,KAAzB,CAAtB;AAAuD,MAAA,KAAK,EAAEvB,MAAM,CAACA,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8EA,MAAM,CAACA,MAArF,CADF,CADiC,CAAnC,CARF,CADF;AAiBD;;AArEkC;;AAwErC,MAAMwB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACE,iBAAN,CAAwBD,MAD3B;AAELE,IAAAA,WAAW,EAAEH,KAAK,CAACE,iBAAN,CAAwBC,WAFhC;AAGLC,IAAAA,MAAM,EAAEJ,KAAK,CAACE,iBAAN,CAAwBE,MAH3B;AAILnB,IAAAA,OAAO,EAAEe,KAAK,CAACE,iBAAN,CAAwBjB,OAJ5B;AAKLoB,IAAAA,IAAI,EAAEL,KAAK,CAACM,WAAN,CAAkBD,IALnB;AAML1B,IAAAA,MAAM,EAAEqB,KAAK,CAACO,aANT;AAOL9B,IAAAA,YAAY,EAAEuB,KAAK,CAACM,WAAN,CAAkB7B;AAP3B,GAAP;AASD,CAVD;;AAYA,MAAM+B,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,QAAQ,EAAG,MAAMD,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CADpB;AAEL/B,IAAAA,WAAW,EAAIgC,GAAD,IAASH,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,GAAG,EAAEA;AAA3B,KAAD;AAF1B,GAAP;AAID,CALD;;AAOA,eAAe1C,OAAO,CAAC6B,eAAD,EAAkBS,kBAAlB,CAAP,CAA6CpC,MAA7C,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport './Player.css'\nimport Card from '../components/Card.js'\n\nclass Player extends React.Component {\n  componentDidMount() {\n    // this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n    //   switch (msg.message.type) {\n\n    //     case 'nextTurn':\n    //       this.props.nextTurn()\n    //       console.log(this.props.whosTurnIsIt)\n    //       this.props.setActivePlayer()\n    //       break\n    //     case 'log':\n    //       console.log(msg.message.text)\n    //       break\n    //     default:\n    //       console.error('Unknown player message.')\n    //       console.log(msg)\n    //   }\n    // })\n  }\n  componentDidUpdate() {\n    // console.log(this.props.player)\n  }\n\n  takeAction = (action) => {\n    if (this.props.activePlayer.id === this.props.player.id) {\n      switch (action.action) {\n        case 'Income':\n          this.props.updateCoins(1)\n          this.setState({})\n      }\n    } else {\n      console.error('Please wait your turn.')\n    }\n  }\n\n  updatePlayers = (players) => {\n\n  }\n\n  // nextTurn = () => {\n  //   this.props.pubnub.publish({\n  //     message: { type: 'nextTurn' },\n  //     channel: this.props.gameChannel\n  //   })\n  // }\n\n  render() {\n    const player = this.props.player\n    const actions = []\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action])\n    }\n    return (\n      <div className='player-container'>\n        <p className='player-name'>{player.username}</p>\n        {/* <p>Current hand: {player.hand.map(card => card.name).join(', ')}</p> */}\n        <p>Current hand: </p>\n        <div className='hand'>\n          {player.hand.map(card => <Card key={card.id} card={card} />)}\n        </div>\n        <p>Coins: {player.coins}</p>\n        <div className='actions'>Actions: {actions.map(action => \n          <div className='actions' key={action.action}>\n            <button onClick={e => this.takeAction(e.target.value)} value={action.action}>{action.action}</button>\n          </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    nextTurn: (() => dispatch({type: 'nextTurn'})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)"]},"metadata":{},"sourceType":"module"}