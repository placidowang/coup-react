{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Lobby.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Lobby extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createLobby = () => {\n      console.log('You are the host!');\n      const roomId = Math.random().toString(36).slice(2, 7).toUpperCase(); // try again if roomId already exists\n\n      this.props.pubnub.hereNow({\n        channels: [`coup-lobby-${roomId}`]\n      }).then(channel => {\n        if (channel.totalOccupancy === 0) {\n          this.props.setHost();\n          this.subscribeToLobby(roomId);\n        } else {\n          console.log('Trying a different roomId');\n          this.createLobby();\n        }\n      });\n    };\n\n    this.joinLobby = e => {\n      console.log('You are not the host.');\n      e.preventDefault();\n      const roomId = e.target[0].value.toUpperCase(); // check if there's already 5 players:\n\n      this.props.pubnub.hereNow({\n        channels: [`coup-lobby-${roomId}`]\n      }).then(channel => {\n        if (channel.totalOccupancy < 5) {\n          this.subscribeToLobby(roomId);\n        } else {\n          console.error('Room is full!');\n        }\n      });\n    };\n\n    this.subscribeToLobby = roomId => {\n      const lobbyChannel = `coup-lobby-${roomId}`; // console.log(`Setting roomId to: ${roomId}`)\n\n      this.props.setRoomId(roomId);\n      this.props.joinLobby(lobbyChannel);\n      console.log(`Joining lobbyChannel: ${lobbyChannel}`);\n      this.props.pubnub.subscribe({\n        channels: [lobbyChannel],\n        withPresence: true\n      });\n      this.props.pubnub.publish({\n        message: {\n          type: 'addToPlayers',\n          player: this.props.player\n        },\n        channel: lobbyChannel\n      });\n    };\n\n    this.addToPlayers = player => {\n      if (this.props.isHost) {\n        this.props.addToPlayers(player); // console.log(this.props.players)\n\n        this.setState({}); // necessary to rerender playerlist? why not just updating reducer? is it because it's pushing player into array?\n\n        this.props.pubnub.publish({\n          message: {\n            type: 'syncPlayersList',\n            players: this.props.players\n          },\n          channel: this.props.lobbyChannel\n        });\n      }\n    };\n\n    this.syncPlayersList = players => {\n      if (!this.props.isHost) {\n        this.props.updatePlayers(players);\n      }\n    };\n\n    this.startGame = () => {\n      if (!this.props.isHost) {\n        console.log('You are NOT the host!!');\n        return;\n      } else {\n        console.log('Starting game'); // publish order for everyone to start game\n\n        this.props.pubnub.publish({\n          message: {\n            type: 'startGame'\n          },\n          channel: this.props.lobbyChannel\n        });\n      }\n    };\n\n    this.playGame = () => {\n      const gameChannel = `coup-game-${this.props.roomId}`;\n      this.props.joinGame(gameChannel);\n      this.props.pubnub.subscribe({\n        channels: [gameChannel],\n        withPresence: true\n      });\n      console.log(`Joining gameChannel: ${this.props.gameChannel}`);\n      console.log('Game start!!');\n      this.props.playGame();\n    };\n\n    this.nextTurn = () => {\n      //whosturnisit + 1 % 5\n      console.log(this.props.whosTurnIsIt);\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.lobbyChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.lobbyChannel]\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    if (this.props.lobbyChannel) {\n      this.props.pubnub.getMessage(this.props.lobbyChannel, msg => {\n        switch (msg.message.type) {\n          case 'startGame':\n            this.playGame();\n            break;\n\n          case 'log':\n            console.log(msg.message.text);\n            break;\n\n          case 'addToPlayers':\n            this.addToPlayers(msg.message.player);\n            break;\n\n          case 'syncPlayersList':\n            this.syncPlayersList(msg.message.players);\n\n          default:\n            console.error('Unknown lobby message.');\n            console.log(msg);\n        }\n      });\n    } // when there is a new activePlayer message, do I need to toggle myTurn?\n\n  }\n\n  render() {\n    // console.log('rendering: ' + this.props.players)\n    // this.props.players.map(player => console.log(player.username))\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, !this.props.lobbyChannel && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"Welcome, \", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'red',\n        fontSize: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, this.props.player.username), \".\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createLobby,\n      className: \"createLobby\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \"Create Lobby\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.joinLobby(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Lobby ID\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, \"Join Lobby\"))), this.props.lobbyChannel && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, \"Room ID: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }), this.props.roomId), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, \"Players: \"), this.props.players.map(player => /*#__PURE__*/React.createElement(\"p\", {\n      key: player.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 49\n      }\n    }, player.username))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.startGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 18\n      }\n    }, \"BEGIN\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('i am hostman'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \"send him a message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('hey host'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, \"msg\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, \"who here\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    roomId: state.connectionReducer.roomId,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setRoomId: roomId => dispatch({\n      type: 'setRoomId',\n      roomId: roomId\n    }),\n    setHost: () => dispatch({\n      type: 'setHost'\n    }),\n    joinLobby: lobbyChannel => dispatch({\n      type: 'joinLobby',\n      lobbyChannel: lobbyChannel\n    }),\n    joinGame: gameChannel => dispatch({\n      type: 'joinGame',\n      gameChannel: gameChannel\n    }),\n    addToPlayers: player => dispatch({\n      type: 'addToPlayers',\n      player: player\n    }),\n    playGame: () => dispatch({\n      type: 'playGame'\n    }),\n    syncPlayersList: players => dispatch({\n      type: 'syncPlayersList'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lobby);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Lobby.js"],"names":["React","connect","Lobby","Component","createLobby","console","log","roomId","Math","random","toString","slice","toUpperCase","props","pubnub","hereNow","channels","then","channel","totalOccupancy","setHost","subscribeToLobby","joinLobby","e","preventDefault","target","value","error","lobbyChannel","setRoomId","subscribe","withPresence","publish","message","type","player","addToPlayers","isHost","setState","players","syncPlayersList","updatePlayers","startGame","playGame","gameChannel","joinGame","nextTurn","whosTurnIsIt","testMsg","msg","text","componentDidMount","componentDidUpdate","getMessage","render","color","fontSize","username","map","id","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nclass Lobby extends React.Component {\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate() {\n    if (this.props.lobbyChannel) {\n      this.props.pubnub.getMessage(this.props.lobbyChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'startGame':\n            this.playGame()\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          case 'addToPlayers':\n            this.addToPlayers(msg.message.player)\n            break\n          case 'syncPlayersList':\n            this.syncPlayersList(msg.message.players)\n          default:\n            console.error('Unknown lobby message.')\n            console.log(msg)\n        }\n      })\n    }\n\n    // when there is a new activePlayer message, do I need to toggle myTurn?\n  }\n\n  createLobby = () => {\n    console.log('You are the host!')\n    const roomId = Math.random().toString(36).slice(2,7).toUpperCase()\n\n    // try again if roomId already exists\n    this.props.pubnub.hereNow({channels: [`coup-lobby-${roomId}`]})\n    .then(channel => {\n      if (channel.totalOccupancy === 0) {\n        this.props.setHost()\n        this.subscribeToLobby(roomId)\n      } else {\n        console.log('Trying a different roomId')\n        this.createLobby()\n      }\n    })\n  }\n\n  joinLobby = (e) => {\n    console.log('You are not the host.')\n    e.preventDefault()\n    const roomId = e.target[0].value.toUpperCase()\n\n    // check if there's already 5 players:\n    this.props.pubnub.hereNow({channels: [`coup-lobby-${roomId}`]})\n    .then(channel => {\n      if (channel.totalOccupancy < 5) {\n        this.subscribeToLobby(roomId)\n      } else {\n        console.error('Room is full!')\n      }\n    })\n  }\n\n  subscribeToLobby = (roomId) => {\n    const lobbyChannel = `coup-lobby-${roomId}`\n\n    // console.log(`Setting roomId to: ${roomId}`)\n    this.props.setRoomId(roomId)\n    this.props.joinLobby(lobbyChannel)\n\n    console.log(`Joining lobbyChannel: ${lobbyChannel}`)\n    this.props.pubnub.subscribe({\n      channels: [lobbyChannel],\n      withPresence: true\n    })\n    \n    this.props.pubnub.publish({\n      message: {\n        type: 'addToPlayers',\n        player: this.props.player\n      },\n      channel: lobbyChannel\n    })\n  }\n\n  addToPlayers = (player) => {\n    if (this.props.isHost) {\n      this.props.addToPlayers(player)\n      // console.log(this.props.players)\n      this.setState({}) // necessary to rerender playerlist? why not just updating reducer? is it because it's pushing player into array?\n      this.props.pubnub.publish({\n        message: {\n          type: 'syncPlayersList',\n          players: this.props.players\n        },\n        channel: this.props.lobbyChannel\n      })\n    }\n  }\n\n  syncPlayersList = (players) => {\n    if (!this.props.isHost) {\n      this.props.updatePlayers(players)\n    }\n  }\n\n  startGame = () => {\n    if (!this.props.isHost) {\n      console.log('You are NOT the host!!')\n      return\n    } else {\n      console.log('Starting game')\n\n      // publish order for everyone to start game\n      this.props.pubnub.publish({\n        message: { type: 'startGame' },\n        channel: this.props.lobbyChannel\n      })\n\n    }\n  }\n\n  playGame = () => {\n    const gameChannel = `coup-game-${this.props.roomId}`\n\n    this.props.joinGame(gameChannel)\n\n    this.props.pubnub.subscribe({\n      channels: [gameChannel],\n      withPresence: true\n    })\n\n    console.log(`Joining gameChannel: ${this.props.gameChannel}`)\n    console.log('Game start!!')\n\n    this.props.playGame()\n  }\n\n  nextTurn = () => {\n    //whosturnisit + 1 % 5\n    \n    console.log(this.props.whosTurnIsIt)\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.lobbyChannel]\n    })\n    .then(console.log)\n  }\n\n  render() {\n    // console.log('rendering: ' + this.props.players)\n    // this.props.players.map(player => console.log(player.username))\n    return(\n      <div>\n\n        {!this.props.lobbyChannel &&\n          <div>\n            <p>Welcome, <span style={{color: 'red', fontSize: 40}}>{this.props.player.username}</span>.</p>\n            <button onClick={this.createLobby} className='createLobby'>Create Lobby</button>\n\n            <form onSubmit={(e)=>this.joinLobby(e)}>\n              <input type='text' placeholder='Enter Lobby ID'/>\n              <button type='submit'>Join Lobby</button>\n            </form>\n\n          </div>\n        }\n\n        {this.props.lobbyChannel &&\n          <div>\n            <p>Room ID: <br/>{this.props.roomId}</p>\n            <div className='player-list'>\n            <p>Players: </p>\n              {/* <p>{this.props.player.username + ' (You)'}</p> */}\n              {this.props.players.map(player => <p key={player.id}>{player.username}</p>)}\n            </div>\n\n            <br/><button onClick={this.startGame}>BEGIN</button>\n            <button onClick={() => this.testMsg('i am hostman')}>send him a message</button>\n            <button onClick={()=>this.testMsg('hey host')}>msg</button>\n            <button onClick={this.hereNow}>who here</button>\n\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    roomId: state.connectionReducer.roomId,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setRoomId: ((roomId) => dispatch({type: 'setRoomId', roomId: roomId})),\n    setHost: (() => dispatch({type: 'setHost'})),\n    joinLobby: ((lobbyChannel) => dispatch({type: 'joinLobby', lobbyChannel: lobbyChannel})),\n    joinGame: ((gameChannel) => dispatch({type: 'joinGame', gameChannel: gameChannel})),\n    addToPlayers: ((player) => dispatch({type: 'addToPlayers', player: player})),\n    playGame: (() => dispatch({type: 'playGame'})),\n    syncPlayersList: ((players) => dispatch({type: 'syncPlayersList',}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lobby)"]},"metadata":{},"sourceType":"module"}