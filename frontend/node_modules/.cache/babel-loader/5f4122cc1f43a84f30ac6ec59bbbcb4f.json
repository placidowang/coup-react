{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './Player.css';\nimport Card from '../components/Card.js';\n\nclass Player extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.yourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.takeAction = action => {\n      console.log(action);\n\n      switch (action) {\n        case 'Income':\n          this.updateCoins(1); // await this.props.changeTreasury(-amt)\n\n          this.updateTreasury(-1);\n          this.endTurn();\n          break;\n\n        case 'Foreign Aid':\n          if (this.props.treasury >= 2) {\n            this.updateCoins(2);\n            this.updateTreasury(-2);\n            this.endTurn();\n          } else {\n            console.error;\n          }\n\n          break;\n\n        case 'Coup':\n          this.targetPlayer();\n          break;\n\n        default:\n          console.error('Invalid player action');\n      }\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.targetPlayer = () => {};\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {// console.log(this.props.player)\n  }\n\n  render() {\n    const player = this.props.player;\n    const actions = [];\n\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-hand-coin-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-coins-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, player.username), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"coins\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"Coins: \", player.coins)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hand-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"Hand \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, player.hand.map(card => /*#__PURE__*/React.createElement(Card, {\n      key: card.id,\n      card: card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 40\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"Actions:\", actions.map(action => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      key: action.action,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.takeAction(e.target.value),\n      value: action.action,\n      disabled: this.yourTurn() ? '' : 'disabled',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, action.action)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/Player.js"],"names":["React","connect","Card","Player","Component","yourTurn","props","activePlayer","id","player","takeAction","action","console","log","updateCoins","updateTreasury","endTurn","treasury","error","targetPlayer","updatePlayer","pubnub","publish","message","type","channel","gameChannel","amt","componentDidMount","componentDidUpdate","render","actions","push","username","coins","hand","map","card","e","target","value","mapStateToProps","state","connectionReducer","isHost","players","deck","gameReducer","playerReducer","mapDispatchToProps","dispatch","changeTreasury"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport './Player.css'\nimport Card from '../components/Card.js'\n\nclass Player extends React.Component {\n  componentDidMount() {\n\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.player)\n  }\n\n  yourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // don't need to account for turn anymore; actions are disabled if it's not your turn\n  takeAction = (action) => {\n    console.log(action)\n    switch (action) {\n      case 'Income':\n        this.updateCoins(1)\n        // await this.props.changeTreasury(-amt)\n        this.updateTreasury(-1)\n        this.endTurn()\n        break\n      case 'Foreign Aid':\n        if (this.props.treasury >= 2) {\n          this.updateCoins(2)\n          this.updateTreasury(-2)\n          this.endTurn()\n        } else {\n          console.error\n        }\n        break\n      case 'Coup':\n        this.targetPlayer()\n        break\n      default:\n        console.error('Invalid player action')\n    }\n  }\n\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  targetPlayer = () => {\n\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  render() {\n    const player = this.props.player\n    const actions = []\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action])\n    }\n    return (\n      <div className='player-container'>\n        <div className='player-name-hand-coin-container'>\n          <div className='player-name-coins-container'>\n            <p className='player-name'>{player.username}</p>\n            <p className='coins'>Coins: {player.coins}</p>\n          </div>\n          <div className='hand-container'>\n            <p>Hand </p>\n            <div className='hand'>\n              {player.hand.map(card => <Card key={card.id} card={card} />)}\n            </div>\n          </div>\n        </div>\n        <div className='actions'>Actions: \n          {actions.map(action => \n            <div className='actions' key={action.action}>\n              <button onClick={e => this.takeAction(e.target.value)} value={action.action} disabled={this.yourTurn() ? '' : 'disabled'}>{action.action}</button>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    endTurn: (() => dispatch({type: 'endTurn'})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)"]},"metadata":{},"sourceType":"module"}