{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/containers/Player.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './Player.css';\nimport Card from '../components/Card.js';\nimport Swal from 'sweetalert2';\n\nclass Player extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.takeAction = action => {\n      console.log(action);\n\n      switch (action) {\n        case 'Income':\n          if (this.props.treasury >= 1) {\n            this.updateCoins(1); // await this.props.changeTreasury(-amt)\n\n            this.updateTreasury(-1);\n            this.endTurn();\n          } else {\n            Swal.fire('Not enough coins in Treasury!');\n            console.error('Not enough coins in Treasury');\n          }\n\n          break;\n\n        case 'Foreign Aid':\n          if (this.props.treasury >= 2) {\n            this.alertPlayers(action, undefined, 'Duke'); // this.updateCoins(2)\n            // this.updateTreasury(-2)\n            // this.endTurn()\n          } else {\n            Swal.fire('Not enough coins in Treasury!');\n            console.error('Not enough coins in Treasury');\n          }\n\n          break;\n\n        case 'Tax':\n          if (this.props.treasury >= 3) {\n            this.alertPlayers(action, 'Duke', undefined); // this.updateCoins(3)\n            // this.updateTreasury(-3)\n            // this.endTurn()\n          } else {\n            Swal.fire('Not enough coins in Treasury!');\n            console.error('Not enough coins in Treasury');\n          }\n\n          break;\n\n        case 'Coup':\n        case 'Assassinate':\n        case 'Steal':\n          this.targetPlayer(action);\n          break;\n\n        default:\n          console.error('Invalid player action');\n      }\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.targetPlayer = action => {\n      console.log(`Using ${action}. Choose a player to target.`); // swal with buttons for now, can later convert to onClick opponent div w/ hover effect\n\n      Swal.fire({\n        title: `Choose an opponent to ${action}.`,\n        showConfirmButton: false,\n        showCancelButton: true,\n        allowOutsideClick: false,\n        timer: 10000,\n        timerProgressBar: true,\n        onBeforeOpen: () => {\n          // console.log(this.props.players)\n          const actionsDiv = document.querySelector('.swal2-actions');\n          const opponents = this.props.players.filter(player => player.id !== this.props.player.id); // opponents.forEach(o => console.log(o.username))\n\n          opponents.forEach(opponent => {\n            const btn = document.createElement('button');\n            btn.innerText = opponent.username;\n            btn.className = \"swal2-confirm swal2-styled\"; // let id = opponent.id\n\n            btn.addEventListener('click', () => {\n              console.log(opponent.id);\n              Swal.close();\n              this.props.pubnub.publish({\n                message: {\n                  type: 'target',\n                  targetPlayerId: opponent.id\n                },\n                channel: this.props.gameChannel\n              });\n            });\n            actionsDiv.append(btn);\n          });\n        }\n      });\n    };\n\n    this.alertPlayers = (action, associatedCard, counterCard) => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'alert',\n          // fromPlayer: this.props.player,\n          action: action,\n          // message: msg,\n          associatedCard: associatedCard,\n          counterCard: counterCard\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {// console.log(this.props.player)\n  }\n\n  render() {\n    const player = this.props.player;\n    const actions = [];\n\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-hand-coin-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-name-coins-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, player.username), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"coins\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, \"Coins: \", player.coins)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-hand-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"Hand\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-hand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, player.hand.map(card => /*#__PURE__*/React.createElement(Card, {\n      key: card.id,\n      card: card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 40\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, \"Actions:\", actions.map(action => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      key: action.action,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.takeAction(e.target.value),\n      value: action.action,\n      disabled: this.isYourTurn() ? '' : 'disabled',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, action.action)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/containers/Player.js"],"names":["React","connect","Card","Swal","Player","Component","isYourTurn","props","activePlayer","id","player","takeAction","action","console","log","treasury","updateCoins","updateTreasury","endTurn","fire","error","alertPlayers","undefined","targetPlayer","updatePlayer","pubnub","publish","message","type","channel","gameChannel","amt","title","showConfirmButton","showCancelButton","allowOutsideClick","timer","timerProgressBar","onBeforeOpen","actionsDiv","document","querySelector","opponents","players","filter","forEach","opponent","btn","createElement","innerText","username","className","addEventListener","close","targetPlayerId","append","associatedCard","counterCard","componentDidMount","componentDidUpdate","render","actions","push","coins","hand","map","card","e","target","value","mapStateToProps","state","connectionReducer","isHost","gameReducer","deck","playerReducer","mapDispatchToProps","dispatch","changeTreasury"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport './Player.css'\nimport Card from '../components/Card.js'\nimport Swal from 'sweetalert2'\n\nclass Player extends React.Component {\n  componentDidMount() {\n\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.player)\n  }\n\n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // don't need to account for turn anymore; actions are disabled if it's not your turn\n  takeAction = (action) => {\n    console.log(action)\n    switch (action) {\n      case 'Income':\n        if (this.props.treasury >= 1) {\n          this.updateCoins(1)\n          // await this.props.changeTreasury(-amt)\n          this.updateTreasury(-1)\n          this.endTurn()\n        } else {\n          Swal.fire('Not enough coins in Treasury!')\n          console.error('Not enough coins in Treasury')\n        }\n        break\n      case 'Foreign Aid':\n        if (this.props.treasury >= 2) {\n          this.alertPlayers(action, undefined, 'Duke')\n          // this.updateCoins(2)\n          // this.updateTreasury(-2)\n          // this.endTurn()\n        } else {\n          Swal.fire('Not enough coins in Treasury!')\n          console.error('Not enough coins in Treasury')\n        }\n        break\n      case 'Tax':\n        if (this.props.treasury >= 3) {\n          this.alertPlayers(action, 'Duke', undefined)\n          // this.updateCoins(3)\n          // this.updateTreasury(-3)\n          // this.endTurn()\n        } else {\n          Swal.fire('Not enough coins in Treasury!')\n          console.error('Not enough coins in Treasury')\n        }\n        break\n      case 'Coup':\n      case 'Assassinate':\n      case 'Steal':\n        this.targetPlayer(action)\n        break\n      default:\n        console.error('Invalid player action')\n    }\n  }\n\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  targetPlayer = (action) => {\n    console.log(`Using ${action}. Choose a player to target.`)\n    // swal with buttons for now, can later convert to onClick opponent div w/ hover effect\n    Swal.fire({\n      title: `Choose an opponent to ${action}.`,\n      showConfirmButton: false,\n      showCancelButton: true,\n      allowOutsideClick: false,\n      timer: 10000,\n      timerProgressBar: true,\n      onBeforeOpen: () => {\n        // console.log(this.props.players)\n        const actionsDiv = document.querySelector('.swal2-actions')\n        const opponents = this.props.players.filter(player => player.id !== this.props.player.id)\n        // opponents.forEach(o => console.log(o.username))\n        opponents.forEach(opponent => {\n          const btn = document.createElement('button')\n          btn.innerText = opponent.username\n          btn.className = \"swal2-confirm swal2-styled\"\n          // let id = opponent.id\n          btn.addEventListener('click', () => {\n            console.log(opponent.id)\n            Swal.close()\n\n            this.props.pubnub.publish({\n              message: {\n                type: 'target',\n                targetPlayerId: opponent.id,\n              },\n              channel: this.props.gameChannel\n            })\n          })\n          actionsDiv.append(btn)\n        })\n      }\n    })\n\n\n\n  }\n\n  alertPlayers = (action, associatedCard, counterCard) => {\n    this.props.pubnub.publish({\n      message: {\n        type: 'alert',\n        // fromPlayer: this.props.player,\n        action: action,\n        // message: msg,\n        associatedCard: associatedCard,\n        counterCard: counterCard,\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  render() {\n    const player = this.props.player\n    const actions = []\n    for (const action in this.props.player.actions) {\n      actions.push(this.props.player.actions[action])\n    }\n    return (\n      <div className='player-container'>\n        <div className='player-name-hand-coin-container'>\n          <div className='player-name-coins-container'>\n            <p className='player-name'>{player.username}</p>\n            <p className='coins'>Coins: {player.coins}</p>\n          </div>\n          <div className='player-hand-container'>\n            <p>Hand</p>\n            <div className='player-hand'>\n              {player.hand.map(card => <Card key={card.id} card={card} />)}\n            </div>\n          </div>\n        </div>\n        <div className='actions'>Actions: \n          {actions.map(action => \n            <div className='actions' key={action.action}>\n              <button onClick={e => this.takeAction(e.target.value)} value={action.action} disabled={this.isYourTurn() ? '' : 'disabled'}>{action.action}</button>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    player: state.playerReducer,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    endTurn: (() => dispatch({type: 'endTurn'})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)"]},"metadata":{},"sourceType":"module"}