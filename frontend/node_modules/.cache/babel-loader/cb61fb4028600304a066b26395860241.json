{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMessage = getMessage;\n\nvar _immutabilityHelper = require('immutability-helper');\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction init(component, channel) {\n  if (component.state.pn_messages[channel]) {\n    return false;\n  } else {\n    component.setState(function (prevState) {\n      return {\n        pn_messages: (0, _immutabilityHelper2.default)(prevState.pn_messages, {\n          $merge: _defineProperty({}, channel, [])\n        })\n      };\n    });\n    return true;\n  }\n}\n\nfunction emit(instance, channel, message) {\n  var messages = instance._component.state.pn_messages[channel];\n  var keepMessages = instance._keepMessages[channel];\n  messages.push(message);\n\n  if (keepMessages && messages.length > keepMessages) {\n    messages = messages.slice(messages.length - keepMessages);\n  }\n\n  instance._component.setState(function (prevState) {\n    return {\n      pn_messages: (0, _immutabilityHelper2.default)(prevState.pn_messages, _defineProperty({}, channel, {\n        $set: messages\n      }))\n    };\n  });\n\n  instance._broadcast.emit('message', channel, message);\n}\n\nfunction getMessage(channel) {\n  var _this = this;\n\n  var component = this._component;\n  var callback = void 0;\n  var keepMessages = 100;\n\n  if (arguments.length === 2 && typeof arguments[1] === 'function') {\n    callback = arguments[1];\n  } else if (arguments.length === 2 && typeof arguments[1] === 'number') {\n    keepMessages = arguments[1];\n  } else if (arguments.length === 3) {\n    callback = arguments[1];\n    keepMessages = arguments[2];\n  }\n\n  if (init(component, channel)) {\n    this._keepMessages[channel] = keepMessages;\n\n    this._autoload.getHistory(channel, callback);\n  }\n\n  this._broadcast.message(channel, callback);\n\n  if (!this._listener.message) {\n    this._listener.message = function (message) {\n      if (message.subscription && _this._broadcast.isSubscribe('message', message.subscription)) {\n        emit(_this, message.subscription, message);\n      }\n\n      if (message.channel && _this._broadcast.isSubscribe('message', message.channel)) {\n        emit(_this, message.channel, message);\n      }\n    };\n  }\n\n  if (component.state && component.state.pn_messages && component.state.pn_messages[channel]) {\n    return component.state.pn_messages[channel];\n  } else {\n    return [];\n  }\n}","map":{"version":3,"sources":["modules/getMessage.js"],"names":["component","pn_messages","prevState","$merge","messages","instance","keepMessages","$set","getMessage","callback","arguments","init","message","emit"],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Add a channel to the state pn_messages\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(component, channel) {\n  if (component.state.pn_messages[channel]) {\n    return false;\n  } else {\n    component.setState(prevState => ({\n      pn_messages: update(prevState.pn_messages, { $merge: { [channel]: [] } })\n    }));\n\n    return true;\n  }\n}\n\n/**\n * Emit a message through a callback and update the state\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @param {object} message\n */\nfunction emit(instance, channel, message) {\n  let messages = instance._component.state.pn_messages[channel];\n  let keepMessages = instance._keepMessages[channel];\n\n  messages.push(message);\n\n  if (keepMessages && messages.length > keepMessages) {\n    messages = messages.slice(messages.length - keepMessages);\n  }\n\n  instance._component.setState(prevState => ({\n    pn_messages: update(prevState.pn_messages, { [channel]: { $set: messages } })\n  }));\n\n  instance._broadcast.emit('message', channel, message);\n}\n\n/**\n * Get to receive messages from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {[]}\n */\nexport function getMessage(channel) {\n  let component = this._component;\n  let callback;\n  let keepMessages = 100;\n\n  if (arguments.length === 2 && typeof arguments[1] === 'function') {\n    callback = arguments[1];\n  } else if (arguments.length === 2 && typeof arguments[1] === 'number') {\n    keepMessages = arguments[1];\n  } else if (arguments.length === 3) {\n    callback = arguments[1];\n    keepMessages = arguments[2];\n  }\n\n  if (init(component, channel)) {\n    this._keepMessages[channel] = keepMessages;\n    this._autoload.getHistory(channel, callback);\n  }\n\n  this._broadcast.message(channel, callback);\n\n  if (!this._listener.message) {\n    this._listener.message = (message) => {\n      if (message.subscription && this._broadcast.isSubscribe('message', message.subscription)) {\n        emit(this, message.subscription, message);\n      }\n\n      if (message.channel && this._broadcast.isSubscribe('message', message.channel)) {\n        emit(this, message.channel, message);\n      }\n    };\n  }\n\n  if (component.state && component.state.pn_messages && component.state.pn_messages[channel]) {\n    return component.state.pn_messages[channel];\n  } else {\n    return [];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}