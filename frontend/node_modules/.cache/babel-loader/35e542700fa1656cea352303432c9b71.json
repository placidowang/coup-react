{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport './Game.css';\nconst globalSwalTimer = 10000;\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.isYourTurn = () => {\n      return this.props.activePlayer.id === this.props.player.id;\n    };\n\n    this.updatePlayer = () => {\n      // console.log(this.props.player.coins + 'coins')\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayer',\n          player: this.props.player\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateTreasury = amt => {\n      // console.log(this.props.treasury)\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateTreasury',\n          treasury: this.props.treasury + amt\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.updateCoins = async amt => {\n      await this.props.updateCoins(amt);\n      this.updatePlayer();\n    };\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.loseCard = () => {\n      Swal.fire({\n        title: `You were called out! :(`,\n        focusConfirm: false,\n        showCancelButton: true,\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: 'Lose Card 1',\n        cancelButtonText: 'Lose Card 2',\n        allowOutsideClick: false,\n        timer: globalSwalTimer,\n        timerProgressBar: true,\n        html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n        onBeforeOpen: () => {\n          setInterval(() => {\n            const content = Swal.getContent();\n\n            if (content) {\n              const b = content.querySelector('b');\n\n              if (b && Swal.getTimerLeft()) {\n                b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n              }\n            }\n          }, 100);\n        } // footer: 'fuck',\n\n      }).then();\n    };\n\n    this.revealCard = () => {};\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'addCardsToHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n          }\n\n          break;\n\n        case 'endTurn':\n          // Swal.close()\n          this.props.endTurn();\n          console.log(this.props.whosTurnIsIt);\n          this.props.setActivePlayer();\n          break;\n\n        case 'alert':\n          if (!this.isYourTurn()) {\n            if (!msg.message.associatedCard && msg.message.counterCard) {\n              Swal.fire({\n                title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                showCancelButton: true,\n                cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent();\n\n                    if (content) {\n                      const b = content.querySelector('b');\n\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                      }\n                    }\n                  }, 100);\n                }\n              }).then(r => {\n                if (r.value) {\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'counter',\n                      action: msg.message.action,\n                      counterCard: msg.message.counterCard,\n                      counteredPlayerId: this.props.activePlayer.id,\n                      counteredPlayerUn: this.props.activePlayer.username,\n                      counteringPlayerId: this.props.player.id,\n                      counteringPlayerUn: this.props.player.username\n                    },\n                    channel: this.props.gameChannel\n                  });\n                } else {\n                  console.log(\"Letting it slide\");\n                }\n              });\n            } // include buttons to counter OR challenge\n            else if (msg.message.associatedCard && msg.message.counterCard) {}\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              showConfirmButton: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You used ${msg.message.action}!`,\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                }); // case switch reward depending on action\n\n                this.updateCoins(2);\n                this.updateTreasury(-2);\n                this.endTurn();\n              }\n            });\n          }\n\n          break;\n\n        case 'counter':\n          if (this.props.player.id === msg.message.counteredPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'CHALLENGE',\n              allowOutsideClick: false,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n              onBeforeOpen: () => {\n                setInterval(() => {\n                  const content = Swal.getContent();\n\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b && Swal.getTimerLeft()) {\n                      b.textContent = Math.ceil(Swal.getTimerLeft() / 1000);\n                    }\n                  }\n                }, 100);\n              }\n            }).then(r => {\n              if (r.value) {\n                console.log('send challenge to: ' + this.props.activePlayer);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.counteringPlayerId,\n                    challengedPlayerUn: msg.message.counteringPlayerUn,\n                    challengingPlayerId: this.props.player.id,\n                    challengingPlayerUn: this.props.player.username,\n                    challengedCard: msg.message.counterCard\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else if (r.dismiss) {\n                console.log(\"Where's your honor??\");\n                this.endTurn();\n              }\n            });\n          } else if (this.props.player.id === msg.message.counteringPlayerId) {\n            console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`);\n            Swal.fire({\n              title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n              timer: globalSwalTimer,\n              timerProgressBar: true,\n              allowOutsideClick: false,\n              showConfirmButton: false\n            }).then(r => {\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                  icon: 'success',\n                  timer: 1500,\n                  timerProgressBar: true,\n                  allowOutsideClick: false,\n                  showConfirmButton: false\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'challenge':\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard);\n\n            if (challengedCard && !challengedCard.revealed) {\n              Swal.fire({\n                title: `${msg.message.challengingPlayerUn} challenged you!`,\n                showCancelButton: true,\n                cancelButtonText: \"Lose a card (Hint: don't do this)\",\n                confirmButtonText: `Show my ${msg.message.challengedCard}.`\n              }).then(r => console.log(r));\n            } else {\n              this.loseCard(); // Swal.fire({\n              //   title: `You were called out! :(`,\n              //   focusConfirm: false,\n              //   showCancelButton: true,\n              //   cancelButtonColor: '#3085d6',\n              //   confirmButtonText: 'Lose Card 1',\n              //   cancelButtonText: 'Lose Card 2',\n              //   // footer: 'fuck',\n              // })\n              // .then()\n            }\n          } else if (this.props.player.id === msg.message.challengingPlayerId) {\n            console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`);\n            Swal.fire({\n              title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n              showConfirmButton: false // timer: globalSwalTimer,\n              // timerProgressBar: true,\n\n            }).then(r => {\n              console.log(r);\n\n              if (r.dismiss === 'timer') {\n                Swal.fire({\n                  title: `${msg.message.challengedPlayerUn} lost a card!`,\n                  showConfirmButton: false,\n                  timer: 1500,\n                  icon: 'success'\n                });\n              }\n            });\n          } else {\n            console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`);\n            Swal.close();\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"whose-turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }\n    }, \"Court Deck: \", this.props.deck.length, \" cards\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.endTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 14\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateCoins: amt => dispatch({\n      type: 'updateCoins',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","globalSwalTimer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","isYourTurn","activePlayer","updatePlayer","updateTreasury","amt","treasury","updateCoins","endTurn","loseCard","fire","title","focusConfirm","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","allowOutsideClick","timer","timerProgressBar","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","getTimerLeft","textContent","ceil","then","revealCard","testMsg","msg","text","hereNow","channels","console","log","logPlayers","componentDidMount","isHost","fetch","r","json","getMessage","changeTreasury","setActivePlayer","addCardsToHand","whosTurnIsIt","associatedCard","counterCard","username","action","value","counteredPlayerId","counteredPlayerUn","counteringPlayerId","counteringPlayerUn","showConfirmButton","dismiss","icon","close","challengedPlayerId","challengedPlayerUn","challengingPlayerId","challengingPlayerUn","challengedCard","hand","find","name","revealed","error","componentDidUpdate","render","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport './Game.css'\n\nconst globalSwalTimer = 10000\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'addCardsToHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n            }\n            break\n          case 'endTurn':\n            // Swal.close()\n            this.props.endTurn()\n            console.log(this.props.whosTurnIsIt)\n            this.props.setActivePlayer()\n            break\n          case 'alert':\n            if (!this.isYourTurn()) {\n              if (!msg.message.associatedCard && msg.message.counterCard) {\n                Swal.fire({\n                  title: `${this.props.activePlayer.username} is trying to use ${msg.message.action}!`,\n                  timer: globalSwalTimer,\n                  timerProgressBar: true,\n                  showCancelButton: true,\n                  cancelButtonText: `Let ${this.props.activePlayer.username} use ${msg.message.action}... this time.`,\n                  confirmButtonText: `BLOCK ${this.props.activePlayer.username} with a ${msg.message.counterCard}.`,\n                  html: `<span class='swal2-text'>Letting ${this.props.activePlayer.username} use ${msg.message.action} in <b></b></span>`,\n                  onBeforeOpen: () => {\n                    setInterval(() => {\n                      const content = Swal.getContent()\n                      if (content) {\n                        const b = content.querySelector('b')\n                        if (b && Swal.getTimerLeft()) {\n                          b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                        }\n                      }\n                    }, 100)\n                  }\n                })\n                .then(r => {\n                  if (r.value) {\n                    this.props.pubnub.publish({\n                      message: {\n                        type: 'counter',\n                        action: msg.message.action,\n                        counterCard: msg.message.counterCard,\n                        counteredPlayerId: this.props.activePlayer.id,\n                        counteredPlayerUn: this.props.activePlayer.username,\n                        counteringPlayerId: this.props.player.id,\n                        counteringPlayerUn: this.props.player.username,\n                      },\n                      channel: this.props.gameChannel\n                    })\n                  } else {\n                    console.log(\"Letting it slide\")\n                  }\n                })\n              }\n              // include buttons to counter OR challenge\n              else if (msg.message.associatedCard && msg.message.counterCard) {\n                \n              }\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                showConfirmButton: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You used ${msg.message.action}!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                  // case switch reward depending on action\n                  this.updateCoins(2)\n                  this.updateTreasury(-2)\n                  this.endTurn()\n                }\n              })\n            }\n            break\n          case 'counter':\n            if (this.props.player.id === msg.message.counteredPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: `${msg.message.counteringPlayerUn} is trying to BLOCK your ${msg.message.action} with a ${msg.message.counterCard}!`,\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'CHALLENGE',\n                allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent()\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                    }\n                  }, 100)\n                }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('send challenge to: ' + this.props.activePlayer)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.counteringPlayerId,\n                      challengedPlayerUn: msg.message.counteringPlayerUn,\n                      challengingPlayerId: this.props.player.id,\n                      challengingPlayerUn: this.props.player.username,\n                      challengedCard: msg.message.counterCard\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else if (r.dismiss) {\n                  console.log(\"Where's your honor??\")\n                  this.endTurn()\n                }\n              })\n            } else if (this.props.player.id === msg.message.counteringPlayerId) {\n              console.log(`You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`)\n              Swal.fire({\n                title: `You have attempted to block ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                allowOutsideClick: false,\n                showConfirmButton: false,\n              })\n              .then(r => {\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `You blocked ${msg.message.counteredPlayerUn}'s ${msg.message.action}!`,\n                    icon: 'success',\n                    timer: 1500,\n                    timerProgressBar: true,\n                    allowOutsideClick: false,\n                    showConfirmButton: false,\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.counteringPlayerUn} has attempted to block ${msg.message.counteredPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'challenge':\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              const challengedCard = this.props.player.hand.find(card => card.name === msg.message.challengedCard)\n              if (challengedCard && !challengedCard.revealed) {\n                Swal.fire({\n                  title: `${msg.message.challengingPlayerUn} challenged you!`,\n                  showCancelButton: true,\n                  cancelButtonText: \"Lose a card (Hint: don't do this)\",\n                  confirmButtonText: `Show my ${msg.message.challengedCard}.`\n                })\n                .then(r => console.log(r))\n              } else {\n                this.loseCard()\n                // Swal.fire({\n                //   title: `You were called out! :(`,\n                //   focusConfirm: false,\n                //   showCancelButton: true,\n                //   cancelButtonColor: '#3085d6',\n                //   confirmButtonText: 'Lose Card 1',\n                //   cancelButtonText: 'Lose Card 2',\n                //   // footer: 'fuck',\n                // })\n                // .then()\n              }\n            } else if (this.props.player.id === msg.message.challengingPlayerId) {\n              console.log(`You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`)\n              Swal.fire({\n                title: `You challenged ${msg.message.challengedPlayerUn}'s ${msg.message.challengedCard}!`,\n                showConfirmButton: false,\n                // timer: globalSwalTimer,\n                // timerProgressBar: true,\n              })\n              .then(r => {\n                console.log(r)\n                if (r.dismiss === 'timer') {\n                  Swal.fire({\n                    title: `${msg.message.challengedPlayerUn} lost a card!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                    icon: 'success'\n                  })\n                }\n              })\n            } else {\n              console.log(`${msg.message.challengedPlayerUn} has been challenged by ${msg.message.challengingPlayerUn}.`)\n              Swal.close()\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n  \n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n  \n  isYourTurn = () => {\n    return (this.props.activePlayer.id === this.props.player.id)\n  }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayer = () => {\n    // console.log(this.props.player.coins + 'coins')\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayer',\n        player: this.props.player\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateTreasury = (amt) => {\n    // console.log(this.props.treasury)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updateTreasury',\n        treasury: this.props.treasury + amt\n      },\n      channel: this.props.gameChannel\n    })\n  }\n\n  updateCoins = async(amt) => {\n    await this.props.updateCoins(amt)\n    this.updatePlayer()\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // pick card to reveal, or lose one randomly based on timer\n  loseCard = () => {\n    Swal.fire({\n      title: `You were called out! :(`,\n      focusConfirm: false,\n      showCancelButton: true,\n      cancelButtonColor: '#3085d6',\n      confirmButtonText: 'Lose Card 1',\n      cancelButtonText: 'Lose Card 2',\n      allowOutsideClick: false,\n                timer: globalSwalTimer,\n                timerProgressBar: true,\n                html: \"<span class='swal2-text'>Backing down in <b></b></span>\",\n                onBeforeOpen: () => {\n                  setInterval(() => {\n                    const content = Swal.getContent()\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b && Swal.getTimerLeft()) {\n                        b.textContent = Math.ceil(Swal.getTimerLeft() / 1000)\n                      }\n                    }\n                  }, 100)\n                }\n      // footer: 'fuck',\n    })\n    .then()\n  }\n\n  // choose card to reveal, reveal on timer(?), shuffle into deck and draw a new card\n  revealCard = () => {\n\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p className='whose-turn'>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n        <p>Treasury: {this.props.treasury} coins</p>\n\n        <p>Court Deck: {this.props.deck.length} cards</p>\n        {/* <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p> */}\n        {/* <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button> */}\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        {/* <button onClick={this.hereNow}>log who's here</button> */}\n        {/* <button onClick={this.logPlayers}>log players</button> */}\n        <br/><button onClick={this.endTurn}>End Turn</button>\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateCoins: ((amt) => dispatch({type: 'updateCoins', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}