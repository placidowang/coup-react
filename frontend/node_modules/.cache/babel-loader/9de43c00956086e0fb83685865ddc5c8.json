{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const cards = this.props.init(deck.cards);\n    };\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.props.shuffleDeck(shuffledDeck);\n    };\n\n    this.testMsg = msg => {\n      console.log(msg);\n      this.props.pubnub.publish({\n        message: {\n          test: msg\n        },\n        channel: this.props.lobbyChannel\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deck => {\n        this.props.init(deck.cards);\n      });\n    }\n\n    console.log(this.props.deck); // console.log(`Current players: ${this.props.players.map(player => player)}`)\n    // this.props.pubnub.addListener({\n    //   message: (msg) => {\n    //     console.log(msg)\n    //   }\n    // })\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, \"message\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    init: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    shuffleDeck: shuffledDeck => dispatch({\n      type: 'shuffleDeck',\n      shuffledDeck: shuffledDeck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","initializeGame","deckData","cards","props","init","deck","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","testMsg","msg","console","log","pubnub","publish","message","test","channel","lobbyChannel","componentDidMount","isHost","fetch","then","r","json","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAoBjCC,cApBiC,GAoBfC,QAAD,IAAc;AAC7B,YAAMC,KAAK,GACX,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,CAACH,KAArB,CADA;AAED,KAvBgC;;AAAA,SAyBjCI,WAzBiC,GAyBnB,MAAM;AAClB,UAAIC,YAAY,GAAG,CAAC,GAAG,KAAKJ,KAAL,CAAWE,IAAf,CAAnB;;AACA,WAAK,IAAIG,CAAC,GAAGD,YAAY,CAACE,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,GAAG,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,YAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,SAACD,YAAY,CAACC,CAAD,CAAb,EAAkBD,YAAY,CAACG,CAAD,CAA9B,IAAqC,CAACH,YAAY,CAACG,CAAD,CAAb,EAAkBH,YAAY,CAACC,CAAD,CAA9B,CAArC;AACD;;AAED,WAAKL,KAAL,CAAWG,WAAX,CAAuBC,YAAvB;AACD,KAjCgC;;AAAA,SAmCjCO,OAnCiC,GAmCtBC,GAAD,IAAS;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAKZ,KAAL,CAAWe,MAAX,CAAkBC,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEN;AADC,SADe;AAIxBO,QAAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWoB;AAJI,OAA1B;AAMD,KA3CgC;AAAA;;AACjCC,EAAAA,iBAAiB,GAAE;AACjB,QAAI,KAAKrB,KAAL,CAAWsB,MAAf,EAAuB;AACrBC,MAAAA,KAAK,CAAC,4BAAD,CAAL,CACCC,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEMtB,IAAI,IAAI;AACZ,aAAKF,KAAL,CAAWC,IAAX,CAAgBC,IAAI,CAACH,KAArB;AACD,OAJD;AAKD;;AAEDc,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWE,IAAvB,EATiB,CAUjB;AAEA;AACA;AACA;AACA;AACA;AACD;;AA2BDyB,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAU,KAAK3B,KAAL,CAAWE,IAAX,CAAgB0B,GAAhB,CAAoBC,IAAI,IAAIA,IAAI,CAACC,IAAL,GAAY,IAAxC,CAAV,CAJF,eAKE;AAAQ,MAAA,OAAO,EAAE,KAAK3B,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAQE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKQ,OAAL,CAAa,SAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,CADF;AAYD;;AA3DgC;;AA8DnC,MAAMoB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLjB,IAAAA,MAAM,EAAEiB,KAAK,CAACC,iBAAN,CAAwBlB,MAD3B;AAELK,IAAAA,YAAY,EAAEY,KAAK,CAACC,iBAAN,CAAwBb,YAFjC;AAGLE,IAAAA,MAAM,EAAEU,KAAK,CAACC,iBAAN,CAAwBX,MAH3B;AAILY,IAAAA,OAAO,EAAEF,KAAK,CAACC,iBAAN,CAAwBC,OAJ5B;AAKLhC,IAAAA,IAAI,EAAE8B,KAAK,CAACG,WAAN,CAAkBjC;AALnB,GAAP;AAOD,CARD;;AAUA,MAAMkC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLpC,IAAAA,IAAI,EAAIF,KAAD,IAAWsC,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,gBAAP;AAAyBvC,MAAAA,KAAK,EAAEA;AAAhC,KAAD,CADrB;AAELI,IAAAA,WAAW,EAAIC,YAAD,IAAkBiC,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,aAAP;AAAsBlC,MAAAA,YAAY,EAAEA;AAApC,KAAD;AAFnC,GAAP;AAID,CALD;;AAOA,eAAeV,OAAO,CAACqC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CzC,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deck => {\n        this.props.init(deck.cards)\n      })\n    }\n\n    console.log(this.props.deck)\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n    // this.props.pubnub.addListener({\n    //   message: (msg) => {\n    //     console.log(msg)\n    //   }\n    // })\n  }\n\n  initializeGame = (deckData) => {\n    const cards = \n    this.props.init(deck.cards)\n  }\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    \n    this.props.shuffleDeck(shuffledDeck)\n  }\n\n  testMsg = (msg) => {\n    console.log(msg)\n    this.props.pubnub.publish({\n      message: {\n        test: msg\n      },\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    init: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}