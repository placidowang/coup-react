{"ast":null,"code":"const initialState = {\n  players: [],\n  // pubnub.hereNow?\n  deck: [],\n  treasury: 50,\n  activePlayer: {},\n  whosTurnIsIt: 0\n};\nexport default function gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'initializeDeck':\n      return { ...state,\n        deck: action.cards\n      };\n\n    case 'updateDeck':\n      return { ...state,\n        deck: action.updatedDeck\n      };\n\n    case 'updatePlayer':\n      const i = state.players.indexOf(state.players.find(player => player.id === action.player.id));\n      const updatedPlayers = [...state.players];\n      updatedPlayers[i] = action.player;\n      return { ...state,\n        players: updatedPlayers\n      };\n\n    case 'changeTreasury':\n      return { ...state,\n        treasury: state.treasury + action.amt\n      };\n\n    case 'updateTreasury':\n      return { ...state,\n        treasury: action.treasury\n      };\n\n    case 'addToPlayers':\n      const newPlayers = [...state.players];\n      newPlayers.push(action.player);\n      return { ...state,\n        players: newPlayers\n      };\n\n    case 'updatePlayers':\n      return { ...state,\n        players: action.players\n      };\n\n    case 'setActivePlayer':\n      return { ...state,\n        activePlayer: state.players[state.whosTurnIsIt]\n      };\n\n    case 'endTurn':\n      do {\n        state.whosTurnIsIt = (state.whosTurnIsIt + 1) % state.players.length;\n      } while (state.players[state.whosTurnIsIt].gameOver === true); // return {...state,\n      //   whosTurnIsIt: \n      // }\n\n\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/coup-react/frontend/src/reducers/gameReducer.js"],"names":["initialState","players","deck","treasury","activePlayer","whosTurnIsIt","gameReducer","state","action","type","cards","updatedDeck","i","indexOf","find","player","id","updatedPlayers","amt","newPlayers","push","length","gameOver"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AACN;AACbC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,YAAY,EAAE;AALK,CAArB;AAQA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGP,YAA7B,EAA2CQ,MAA3C,EAAmD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AACLL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AADR,OAAP;;AAGF,SAAK,YAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELL,QAAAA,IAAI,EAAEM,MAAM,CAACG;AAFR,OAAP;;AAIF,SAAK,cAAL;AACE,YAAMC,CAAC,GAAGL,KAAK,CAACN,OAAN,CAAcY,OAAd,CAAsBN,KAAK,CAACN,OAAN,CAAca,IAAd,CAAmBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcR,MAAM,CAACO,MAAP,CAAcC,EAAzD,CAAtB,CAAV;AACA,YAAMC,cAAc,GAAG,CAAC,GAAGV,KAAK,CAACN,OAAV,CAAvB;AACAgB,MAAAA,cAAc,CAACL,CAAD,CAAd,GAAoBJ,MAAM,CAACO,MAA3B;AACA,aAAO,EAAC,GAAGR,KAAJ;AACLN,QAAAA,OAAO,EAAEgB;AADJ,OAAP;;AAGF,SAAK,gBAAL;AACE,aAAO,EAAC,GAAGV,KAAJ;AACLJ,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACU;AAD7B,OAAP;;AAGF,SAAK,gBAAL;AACE,aAAO,EAAC,GAAGX,KAAJ;AACLJ,QAAAA,QAAQ,EAAEK,MAAM,CAACL;AADZ,OAAP;;AAGF,SAAK,cAAL;AACE,YAAMgB,UAAU,GAAG,CAAC,GAAGZ,KAAK,CAACN,OAAV,CAAnB;AACAkB,MAAAA,UAAU,CAACC,IAAX,CAAgBZ,MAAM,CAACO,MAAvB;AACA,aAAO,EAAC,GAAGR,KAAJ;AACLN,QAAAA,OAAO,EAAEkB;AADJ,OAAP;;AAGF,SAAK,eAAL;AACE,aAAO,EAAC,GAAGZ,KAAJ;AACLN,QAAAA,OAAO,EAAEO,MAAM,CAACP;AADX,OAAP;;AAGF,SAAK,iBAAL;AACE,aAAO,EAAC,GAAGM,KAAJ;AACLH,QAAAA,YAAY,EAAEG,KAAK,CAACN,OAAN,CAAcM,KAAK,CAACF,YAApB;AADT,OAAP;;AAGF,SAAK,SAAL;AACE,SAAG;AACDE,QAAAA,KAAK,CAACF,YAAN,GAAqB,CAACE,KAAK,CAACF,YAAN,GAAqB,CAAtB,IAA2BE,KAAK,CAACN,OAAN,CAAcoB,MAA9D;AACD,OAFD,QAGOd,KAAK,CAACN,OAAN,CAAcM,KAAK,CAACF,YAApB,EAAkCiB,QAAlC,KAA+C,IAHtD,EADF,CAKE;AACA;AACA;;;AACA,aAAOf,KAAP;;AACF;AACE,aAAOA,KAAP;AAjDJ;AAmDD","sourcesContent":["const initialState = {\n  players: [], // pubnub.hereNow?\n  deck: [],\n  treasury: 50,\n  activePlayer: {},\n  whosTurnIsIt: 0,\n}\n\nexport default function gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'initializeDeck':\n      return {...state,\n        deck: action.cards\n      }\n    case 'updateDeck':\n      return {\n        ...state,\n        deck: action.updatedDeck\n      }\n    case 'updatePlayer':\n      const i = state.players.indexOf(state.players.find(player => player.id === action.player.id))\n      const updatedPlayers = [...state.players]\n      updatedPlayers[i] = action.player\n      return {...state,\n        players: updatedPlayers\n      }\n    case 'changeTreasury':\n      return {...state,\n        treasury: state.treasury + action.amt\n      }\n    case 'updateTreasury':\n      return {...state,\n        treasury: action.treasury\n      }\n    case 'addToPlayers':\n      const newPlayers = [...state.players]\n      newPlayers.push(action.player)\n      return {...state,\n        players: newPlayers\n      }\n    case 'updatePlayers':\n      return {...state,\n        players: action.players\n      }\n    case 'setActivePlayer':\n      return {...state,\n        activePlayer: state.players[state.whosTurnIsIt]\n      }\n    case 'endTurn':\n      do {\n        state.whosTurnIsIt = (state.whosTurnIsIt + 1) % state.players.length\n      }\n      while (state.players[state.whosTurnIsIt].gameOver === true)\n      // return {...state,\n      //   whosTurnIsIt: \n      // }\n      return state\n    default:\n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}