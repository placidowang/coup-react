{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/GameContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Game from '../components/Game';\nimport '../components/Game.css';\nimport Board from '../components/Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\"; // import shortid  from 'shortid';\n\nimport keys from '../PubNub-keys.js';\n\nclass GameContainer extends React.Component {\n  constructor(props) {\n    super(props); // // REPLACE with your keys\n    // this.pubnub = new PubNubReact({\n    //   publishKey: keys.publishKey, \n    //   subscribeKey: keys.subscribeKey    \n    // });\n\n    this.onPressCreate = e => {\n      // Create a random name for the channel\n      // this.roomId = shortid.generate().substring(0,5);\n      this.roomId = Math.random().toString(36).substring(2, 7).toUpperCase();\n      this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n      this.pubnub.subscribe({\n        channels: [this.lobbyChannel],\n        withPresence: true\n      }); // Open the modal\n\n      Swal.fire({\n        position: 'top',\n        allowOutsideClick: false,\n        title: 'Share this room ID with your friend',\n        text: this.roomId,\n        width: 275,\n        padding: '0.7em',\n        // Custom CSS\n        customClass: {\n          heightAuto: false,\n          title: 'title-class',\n          popup: 'popup-class',\n          confirmButton: 'button-class'\n        }\n      });\n      this.setState({\n        piece: 'X',\n        isRoomCreator: true,\n        isDisabled: true,\n        // Disable the 'Create' button\n        myTurn: true // Room creator makes the 1st move\n\n      });\n    };\n\n    this.onPressJoin = e => {\n      Swal.fire({\n        position: 'top',\n        input: 'text',\n        allowOutsideClick: false,\n        inputPlaceholder: 'Enter the room id',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        confirmButtonText: 'OK',\n        width: 275,\n        padding: '0.7em',\n        customClass: {\n          heightAuto: false,\n          popup: 'popup-class',\n          confirmButton: 'join-button-class ',\n          cancelButton: 'join-button-class'\n        }\n      }).then(result => {\n        // Check if the user typed a value in the input field\n        if (result.value) {\n          this.joinRoom(result.value);\n        }\n      });\n    };\n\n    this.joinRoom = value => {\n      this.roomId = value;\n      this.lobbyChannel = 'tictactoelobby--' + this.roomId; // Check the number of people in the channel\n\n      this.pubnub.hereNow({\n        channels: [this.lobbyChannel]\n      }).then(response => {\n        if (response.totalOccupancy < 2) {\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          this.setState({\n            piece: 'O'\n          });\n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n              heightAuto: false,\n              title: 'title-class',\n              popup: 'popup-class',\n              confirmButton: 'button-class'\n            }\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        piece: '',\n        isPlaying: false,\n        isRoomCreator: false,\n        isDisabled: false,\n        myTurn: false\n      });\n      this.lobbyChannel = null;\n      this.gameChannel = null;\n      this.roomId = null;\n      this.pubnub.unsubscribe({\n        channels: [this.lobbyChannel, this.gameChannel]\n      });\n    };\n\n    this.state = {\n      piece: '',\n      // X or O\n      isPlaying: false,\n      // Set to true when 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n    this.lobbyChannel = null; // Lobby channel\n\n    this.gameChannel = null; // Game channel\n\n    this.roomId = null; // Unique id when player creates a room   \n\n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        // Start the game once an opponent joins the channel\n        if (msg.message.notRoomCreator) {\n          // Create a different channel for the game\n          this.gameChannel = 'tictactoegame--' + this.roomId;\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n          this.setState({\n            isPlaying: true\n          }); // Close the modals if they are opened\n\n          Swal.close();\n        }\n      });\n    }\n  } // Create a room channel\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, \"React Tic Tac Toe\")), !this.state.isPlaying && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: 0,\n      onClick: index => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"create-button \",\n      disabled: this.state.isDisabled,\n      onClick: e => this.onPressCreate(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    }, \" Create\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"join-button\",\n      onClick: e => this.onPressJoin(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, \" Join\")))), this.state.isPlaying && /*#__PURE__*/React.createElement(Game, {\n      pubnub: this.pubnub,\n      gameChannel: this.gameChannel,\n      piece: this.state.piece,\n      isRoomCreator: this.state.isRoomCreator,\n      myTurn: this.state.myTurn,\n      xUsername: this.state.xUsername,\n      oUsername: this.state.oUsername,\n      endGame: this.endGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    deck: state.deck\n  };\n};\n\nexport default connect(mapStateToProps)(GameContainer);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/containers/GameContainer.js"],"names":["React","connect","Game","Board","PubNubReact","Swal","keys","GameContainer","Component","constructor","props","onPressCreate","e","roomId","Math","random","toString","substring","toUpperCase","lobbyChannel","pubnub","subscribe","channels","withPresence","fire","position","allowOutsideClick","title","text","width","padding","customClass","heightAuto","popup","confirmButton","setState","piece","isRoomCreator","isDisabled","myTurn","onPressJoin","input","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","cancelButton","then","result","value","joinRoom","hereNow","response","totalOccupancy","publish","message","notRoomCreator","channel","catch","error","console","log","endGame","isPlaying","gameChannel","unsubscribe","state","init","componentWillUnmount","componentDidUpdate","getMessage","msg","close","render","index","xUsername","oUsername","mapStateToProps","deck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport Game from '../components/Game';\nimport '../components/Game.css';\nimport Board from '../components/Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \n// import shortid  from 'shortid';\nimport keys from '../PubNub-keys.js'\n\nclass GameContainer extends React.Component {\n  constructor(props) {  \n    super(props);\n    // // REPLACE with your keys\n    // this.pubnub = new PubNubReact({\n    //   publishKey: keys.publishKey, \n    //   subscribeKey: keys.subscribeKey    \n    // });\n    \n    this.state = {\n      piece: '', // X or O\n      isPlaying: false, // Set to true when 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n    this.lobbyChannel = null; // Lobby channel\n    this.gameChannel = null; // Game channel\n    this.roomId = null; // Unique id when player creates a room   \n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if(this.lobbyChannel != null){\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        // Start the game once an opponent joins the channel\n        if(msg.message.notRoomCreator){\n          // Create a different channel for the game\n          this.gameChannel = 'tictactoegame--' + this.roomId;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });  \n\n          // Close the modals if they are opened\n          Swal.close();\n        }\n      }); \n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    // this.roomId = shortid.generate().substring(0,5);\n    this.roomId = Math.random().toString(36).substring(2,7).toUpperCase()\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n  // Open the modal\n  Swal.fire({\n    position: 'top',\n    allowOutsideClick: false,\n    title: 'Share this room ID with your friend',\n    text: this.roomId,\n    width: 275,\n    padding: '0.7em',\n    // Custom CSS\n    customClass: {\n        heightAuto: false,\n        title: 'title-class',\n        popup: 'popup-class',\n        confirmButton: 'button-class'\n    }\n  })\n\n    this.setState({\n      piece: 'X',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });   \n  }\n  \n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class ',\n        cancelButton: 'join-button-class'\n      } \n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if(result.value){\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel], \n    }).then((response) => { \n        if(response.totalOccupancy < 2){\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          \n          this.setState({\n            piece: 'O',\n          });  \n          \n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true,\n            },\n            channel: this.lobbyChannel\n          });\n        } \n        else{\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n          })\n        }\n    }).catch((error) => { \n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;  \n\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  render() {  \n    return (  \n        <div> \n          <div className=\"title\">\n            <p>React Tic Tac Toe</p>\n          </div>\n\n          {\n            !this.state.isPlaying &&\n            <div className=\"game\">\n              <div className=\"board\">\n                <Board\n                    squares={0}\n                    onClick={index => null}\n                  />  \n                  \n                <div className=\"button-container\">\n                  <button \n                    className=\"create-button \"\n                    disabled={this.state.isDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                    > Create \n                  </button>\n                  <button \n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                    > Join \n                  </button>\n                </div>                        \n          \n              </div>\n            </div>\n          }\n\n          {\n            this.state.isPlaying &&\n            <Game \n              pubnub={this.pubnub}\n              gameChannel={this.gameChannel} \n              piece={this.state.piece}\n              isRoomCreator={this.state.isRoomCreator}\n              myTurn={this.state.myTurn}\n              xUsername={this.state.xUsername}\n              oUsername={this.state.oUsername}\n              endGame={this.endGame}\n            />\n          }\n        </div>\n    );  \n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    deck: state.deck\n  }\n}\n\nexport default connect(mapStateToProps)(GameContainer)"]},"metadata":{},"sourceType":"module"}