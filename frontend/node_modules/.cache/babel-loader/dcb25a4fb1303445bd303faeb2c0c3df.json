{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Lobby.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\n\nclass Lobby extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createLobby = () => {\n      console.log('You are the host!');\n      const roomId = Math.random().toString(36).slice(2, 6).toUpperCase(); // try again if roomId already exists\n\n      this.props.pubnub.hereNow({\n        channels: [`coup-lobby-${roomId}`]\n      }).then(channel => {\n        if (channel.totalOccupancy === 0) {\n          this.props.setHost();\n          this.subscribeToLobby(roomId);\n        } else {\n          console.log('Trying a different roomId');\n          this.createLobby();\n        }\n      });\n    };\n\n    this.joinLobby = e => {\n      e.preventDefault();\n      const roomId = e.target[0].value.toUpperCase();\n\n      if (roomId.length === 0) {\n        Swal.fire('Please enter a Room ID');\n        return;\n      }\n\n      this.props.pubnub.hereNow({\n        channels: [`coup-lobby-${roomId}`]\n      }).then(channel => {\n        if (channel.totalOccupancy === 0) {\n          console.error(\"Room doesn't exist!\");\n          Swal.fire(\"Room doesn't exist!\");\n        } else if (channel.totalOccupancy < 5) {\n          console.log('You are not the host.');\n          this.subscribeToLobby(roomId);\n        } else {\n          console.error('Room is full!');\n          Swal.fire('Room is full!');\n        }\n      });\n    };\n\n    this.subscribeToLobby = roomId => {\n      const lobbyChannel = `coup-lobby-${roomId}`; // console.log(`Setting roomId to: ${roomId}`)\n\n      this.props.setRoomId(roomId);\n      this.props.joinLobby(lobbyChannel);\n      console.log(`Joining lobbyChannel: ${lobbyChannel}`);\n      this.props.pubnub.subscribe({\n        channels: [lobbyChannel],\n        withPresence: true\n      });\n      this.props.pubnub.publish({\n        message: {\n          type: 'addToPlayers',\n          player: this.props.player\n        },\n        channel: lobbyChannel\n      });\n    };\n\n    this.addToPlayers = async player => {\n      await this.props.addToPlayers(player); // console.log(this.props.players)\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'updatePlayers',\n          players: this.props.players\n        },\n        channel: this.props.lobbyChannel\n      });\n    };\n\n    this.updatePlayers = players => {\n      if (!this.props.isHost) {\n        this.props.updatePlayers(players);\n      }\n    };\n\n    this.startGame = () => {\n      // this.props.pubnub.hereNow({channels: [this.props.lobbyChannel]})\n      // .then(channel => {\n      // console.log(channel)\n      if (!this.props.isHost) {\n        console.log('You are NOT the host!!');\n        Swal.fire('Please wait for the host to start the game.'); // } else if (channel.totalOccupancy > 1) {\n      } else if (this.props.players.length > 1) {\n        console.log('Starting game'); // publish message for everyone to start game\n\n        this.props.pubnub.publish({\n          message: {\n            type: 'startGame'\n          },\n          channel: this.props.lobbyChannel\n        });\n      } else {\n        console.log('Please wait for at least one opponent.');\n        Swal.fire('Please wait for at least one opponent.');\n      } // })\n\n    };\n\n    this.playGame = () => {\n      const gameChannel = `coup-game-${this.props.roomId}`;\n      this.props.joinGame(gameChannel);\n      this.props.pubnub.subscribe({\n        channels: [gameChannel],\n        withPresence: true\n      });\n      console.log(`Joining gameChannel: ${this.props.gameChannel}`);\n      console.log('Game start!!');\n      this.props.playGame();\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.lobbyChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.lobbyChannel]\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    if (this.props.lobbyChannel) {\n      this.props.pubnub.getMessage(this.props.lobbyChannel, msg => {\n        switch (msg.message.type) {\n          case 'startGame':\n            Swal.close();\n            this.playGame();\n            break;\n\n          case 'log':\n            console.log(msg.message.text);\n            break;\n\n          case 'addToPlayers':\n            this.props.isHost && this.addToPlayers(msg.message.player);\n            break;\n\n          case 'updatePlayers':\n            this.updatePlayers(msg.message.players);\n            break;\n\n          default:\n            console.error('Unknown lobby message.');\n            console.log(msg);\n        }\n      });\n    }\n  }\n\n  render() {\n    // console.log('rendering: ' + this.props.players)\n    // this.props.players.map(player => console.log(player.username))\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, \"Welcome, \", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'red',\n        fontSize: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, this.props.player.username), \".\"), !this.props.lobbyChannel && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createLobby,\n      className: \"createLobby\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, \"Create Room\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.joinLobby(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Room ID\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, \"Join Room\"))), this.props.lobbyChannel && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \"Room ID: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }), this.props.roomId), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lobby-player-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lobby-player-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lobby-player-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, \"Players: \"), this.props.players.map(player => /*#__PURE__*/React.createElement(\"p\", {\n      key: player.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 51\n      }\n    }, player.username)))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.startGame,\n      className: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 18\n      }\n    }, \"START\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    roomId: state.connectionReducer.roomId,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setRoomId: roomId => dispatch({\n      type: 'setRoomId',\n      roomId: roomId\n    }),\n    setHost: () => dispatch({\n      type: 'setHost'\n    }),\n    joinLobby: lobbyChannel => dispatch({\n      type: 'joinLobby',\n      lobbyChannel: lobbyChannel\n    }),\n    joinGame: gameChannel => dispatch({\n      type: 'joinGame',\n      gameChannel: gameChannel\n    }),\n    addToPlayers: player => dispatch({\n      type: 'addToPlayers',\n      player: player\n    }),\n    playGame: () => dispatch({\n      type: 'playGame'\n    }),\n    updatePlayers: players => dispatch({\n      type: 'updatePlayers',\n      players: players\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lobby);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Lobby.js"],"names":["React","connect","Swal","Lobby","Component","createLobby","console","log","roomId","Math","random","toString","slice","toUpperCase","props","pubnub","hereNow","channels","then","channel","totalOccupancy","setHost","subscribeToLobby","joinLobby","e","preventDefault","target","value","length","fire","error","lobbyChannel","setRoomId","subscribe","withPresence","publish","message","type","player","addToPlayers","players","updatePlayers","isHost","startGame","playGame","gameChannel","joinGame","testMsg","msg","text","componentDidMount","componentDidUpdate","getMessage","close","render","color","fontSize","username","map","id","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport Swal from 'sweetalert2'\n\nclass Lobby extends React.Component {\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate() {\n    if (this.props.lobbyChannel) {\n      this.props.pubnub.getMessage(this.props.lobbyChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'startGame':\n            Swal.close()\n            this.playGame()\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          case 'addToPlayers':\n            this.props.isHost &&\n              this.addToPlayers(msg.message.player)\n            break\n          case 'updatePlayers':\n            this.updatePlayers(msg.message.players)\n            break\n          default:\n            console.error('Unknown lobby message.')\n            console.log(msg)\n        }\n      })\n    }\n  }\n\n  createLobby = () => {\n    console.log('You are the host!')\n    const roomId = Math.random().toString(36).slice(2,6).toUpperCase()\n\n    // try again if roomId already exists\n    this.props.pubnub.hereNow({channels: [`coup-lobby-${roomId}`]})\n    .then(channel => {\n      if (channel.totalOccupancy === 0) {\n        this.props.setHost()\n        this.subscribeToLobby(roomId)\n      } else {\n        console.log('Trying a different roomId')\n        this.createLobby()\n      }\n    })\n  }\n\n  joinLobby = (e) => {\n    e.preventDefault()\n    const roomId = e.target[0].value.toUpperCase()\n    if (roomId.length === 0) {\n      Swal.fire('Please enter a Room ID')\n      return\n    }\n\n    this.props.pubnub.hereNow({channels: [`coup-lobby-${roomId}`]})\n    .then(channel => {\n      if (channel.totalOccupancy === 0) {\n        console.error(\"Room doesn't exist!\")\n        Swal.fire(\"Room doesn't exist!\")\n      } else if (channel.totalOccupancy < 5) {\n        console.log('You are not the host.')\n        this.subscribeToLobby(roomId)\n      } else {\n        console.error('Room is full!')\n        Swal.fire('Room is full!')\n      }\n    })\n  }\n\n  subscribeToLobby = (roomId) => {\n    const lobbyChannel = `coup-lobby-${roomId}`\n\n    // console.log(`Setting roomId to: ${roomId}`)\n    this.props.setRoomId(roomId)\n    this.props.joinLobby(lobbyChannel)\n\n    console.log(`Joining lobbyChannel: ${lobbyChannel}`)\n    this.props.pubnub.subscribe({\n      channels: [lobbyChannel],\n      withPresence: true\n    })\n    \n    this.props.pubnub.publish({\n      message: {\n        type: 'addToPlayers',\n        player: this.props.player\n      },\n      channel: lobbyChannel\n    })\n  }\n\n  // async/await, just in case\n  addToPlayers = async(player) => {\n    await this.props.addToPlayers(player)\n    // console.log(this.props.players)\n    this.props.pubnub.publish({\n      message: {\n        type: 'updatePlayers',\n        players: this.props.players\n      },\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  updatePlayers = (players) => {\n    if (!this.props.isHost) {\n      this.props.updatePlayers(players)\n    }\n  }\n\n  startGame = () => {\n    // this.props.pubnub.hereNow({channels: [this.props.lobbyChannel]})\n    // .then(channel => {\n      // console.log(channel)\n      if (!this.props.isHost) {\n        console.log('You are NOT the host!!')\n        Swal.fire('Please wait for the host to start the game.')\n      // } else if (channel.totalOccupancy > 1) {\n      } else if (this.props.players.length > 1) {\n        console.log('Starting game')\n\n        // publish message for everyone to start game\n        this.props.pubnub.publish({\n          message: { type: 'startGame' },\n          channel: this.props.lobbyChannel\n        })\n      } else {\n        console.log('Please wait for at least one opponent.')\n        Swal.fire('Please wait for at least one opponent.')\n      }\n    // })\n  }\n\n  playGame = () => {\n    const gameChannel = `coup-game-${this.props.roomId}`\n\n    this.props.joinGame(gameChannel)\n\n    this.props.pubnub.subscribe({\n      channels: [gameChannel],\n      withPresence: true\n    })\n\n    console.log(`Joining gameChannel: ${this.props.gameChannel}`)\n    console.log('Game start!!')\n\n    this.props.playGame()\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.lobbyChannel]\n    })\n    .then(console.log)\n  }\n\n  render() {\n    // console.log('rendering: ' + this.props.players)\n    // this.props.players.map(player => console.log(player.username))\n    return(\n      <div>\n        <p>Welcome, <span style={{color: 'red', fontSize: 40}}>{this.props.player.username}</span>.</p>\n\n        {!this.props.lobbyChannel &&\n          <div>\n            <button onClick={this.createLobby} className='createLobby'>Create Room</button>\n\n            <form onSubmit={(e)=>this.joinLobby(e)}>\n              <input type='text' placeholder='Enter Room ID'/>\n              <button type='submit'>Join Room</button>\n            </form>\n\n          </div>\n        }\n\n        {this.props.lobbyChannel &&\n          <div>\n            <p>Room ID: <br/>{this.props.roomId}</p>\n            <div className='lobby-player-list-container'>\n              {/* <p>{this.props.player.username + ' (You)'}</p> */}\n              <div className='lobby-player-list'>\n                <p className='lobby-player-list-title'>Players: </p>\n                {this.props.players.map(player => <p key={player.id}>{player.username}</p>)}\n              </div>\n            </div>\n\n            <br/><button onClick={this.startGame} className='start'>START</button>\n            {/* <button onClick={() => this.testMsg('i am hostman')}>send him a message</button> */}\n            {/* <button onClick={()=>this.testMsg('hey host')}>msg</button> */}\n            {/* <button onClick={this.hereNow}>who here</button> */}\n\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    roomId: state.connectionReducer.roomId,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setRoomId: ((roomId) => dispatch({type: 'setRoomId', roomId: roomId})),\n    setHost: (() => dispatch({type: 'setHost'})),\n    joinLobby: ((lobbyChannel) => dispatch({type: 'joinLobby', lobbyChannel: lobbyChannel})),\n    joinGame: ((gameChannel) => dispatch({type: 'joinGame', gameChannel: gameChannel})),\n    addToPlayers: ((player) => dispatch({type: 'addToPlayers', player: player})),\n    playGame: (() => dispatch({type: 'playGame'})),\n    updatePlayers: ((players) => dispatch({type: 'updatePlayers', players: players})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lobby)"]},"metadata":{},"sourceType":"module"}