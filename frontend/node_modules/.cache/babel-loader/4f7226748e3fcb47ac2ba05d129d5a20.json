{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.updatePlayers = players => {};\n\n    this.nextTurn = () => {\n      //whosturnisit + 1 % 5\n      console.log(this.props.whosTurnIsIt);\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'addCardsToHand':\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // when there is a new activePlayer message, do I need to toggle myTurn?\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, \"Players: \", this.props.players.map(player => player.username)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \"who here\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logPlayers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, \"Players\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.nextTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 14\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Player","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","updatePlayers","nextTurn","console","log","whosTurnIsIt","testMsg","msg","text","hereNow","then","logPlayers","componentDidMount","isHost","fetch","r","json","getMessage","addCardsToHand","error","componentDidUpdate","render","username","name","join","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'addCardsToHand':\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // when there is a new activePlayer message, do I need to toggle myTurn?\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  updatePlayers = (players) => {\n\n  }\n\n  nextTurn = () => {\n    //whosturnisit + 1 % 5\n    console.log(this.props.whosTurnIsIt)\n  }\n  \n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Players: {this.props.players.map(player => player.username)}</p>\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}>who here</button>\n\n        <button onClick={this.logPlayers}>Players</button>\n        \n        <br/><button onClick={this.nextTurn}>End Turn</button>\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}