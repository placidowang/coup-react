{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      console.log('Game start!');\n      const deck = deckData.cards;\n      this.props.init(deck);\n      this.shuffleDeck();\n    };\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.props.shuffleDeck(shuffledDeck);\n      this.updateDeck();\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: this.props.deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: msg,\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            // if (!this.props.isHost) {\n            this.props.updateDeck(msg.message.updatedDeck);\n          // }\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \" who here\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    init: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    shuffleDeck: shuffledDeck => dispatch({\n      type: 'shuffleDeck',\n      shuffledDeck: shuffledDeck\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      deck: deck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","initializeGame","deckData","console","log","deck","cards","props","init","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","testMsg","msg","hereNow","then","componentDidMount","isHost","fetch","r","json","componentDidUpdate","getMessage","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  initializeGame = (deckData) => {\n    console.log('Game start!')\n    const deck = deckData.cards\n    this.props.init(deck)\n    this.shuffleDeck()\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            // if (!this.props.isHost) {\n              this.props.updateDeck(msg.message.updatedDeck)\n            // }\n        }\n      })\n    }\n  }\n\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    this.props.shuffleDeck(shuffledDeck)\n    this.updateDeck()\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: this.props.deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: msg,\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}> who here</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    init: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', deck: deck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}