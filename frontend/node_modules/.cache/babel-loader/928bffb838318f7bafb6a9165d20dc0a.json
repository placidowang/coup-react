{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.lobbyChannel\n      }).then(console.log);\n    };\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards;\n      this.props.init(deck);\n      this.shuffleDeck(); // this.props.pubnub.publish({\n      //   // status: 'testStatus',\n      //   message: {\n      //     startGame: true\n      //   },\n      //   channel: this.props.lobbyChannel\n      // })\n    };\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.props.shuffleDeck(shuffledDeck);\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: msg,\n        channel: this.props.lobbyChannel\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // console.log(`Current players: ${this.props.players.map(player => player)}`)\n    // this.props.pubnub.addListener({\n    //   message: (msg) => {\n    //     console.log(msg)\n    //     switch (msg) {\n    //     }\n    //   }\n    // })\n\n  }\n\n  componentDidUpdate() {// console.log('updated game component')\n    // if (this.props.lobbyChannel) {\n    //   // debugger\n    //   this.props.pubnub.getMessage(this.props.lobbyChannel, (msg) => {\n    //     console.log(msg.message.test)\n    //   })\n    // }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \" who here\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    init: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    shuffleDeck: shuffledDeck => dispatch({\n      type: 'shuffleDeck',\n      shuffledDeck: shuffledDeck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","hereNow","props","pubnub","channel","lobbyChannel","then","console","log","initializeGame","deckData","deck","cards","init","shuffleDeck","shuffledDeck","i","length","j","Math","floor","random","testMsg","msg","publish","message","componentDidMount","isHost","fetch","r","json","componentDidUpdate","render","map","card","name","mapStateToProps","state","connectionReducer","gameChannel","players","gameReducer","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAgCjCC,OAhCiC,GAgCvB,MAAM;AACd,WAAKC,KAAL,CAAWC,MAAX,CAAkBF,OAAlB,CAA0B;AACxBG,QAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG;AADI,OAA1B,EAGCC,IAHD,CAGMC,OAAO,CAACC,GAHd;AAID,KArCgC;;AAAA,SAuCjCC,cAvCiC,GAuCfC,QAAD,IAAc;AAC7B,YAAMC,IAAI,GAAGD,QAAQ,CAACE,KAAtB;AACA,WAAKV,KAAL,CAAWW,IAAX,CAAgBF,IAAhB;AACA,WAAKG,WAAL,GAH6B,CAK7B;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAnDgC;;AAAA,SAqDjCA,WArDiC,GAqDnB,MAAM;AAClB,UAAIC,YAAY,GAAG,CAAC,GAAG,KAAKb,KAAL,CAAWS,IAAf,CAAnB;;AACA,WAAK,IAAIK,CAAC,GAAGD,YAAY,CAACE,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,GAAG,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,YAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,SAACD,YAAY,CAACC,CAAD,CAAb,EAAkBD,YAAY,CAACG,CAAD,CAA9B,IAAqC,CAACH,YAAY,CAACG,CAAD,CAAb,EAAkBH,YAAY,CAACC,CAAD,CAA9B,CAArC;AACD;;AACD,WAAKd,KAAL,CAAWY,WAAX,CAAuBC,YAAvB;AACD,KA5DgC;;AAAA,SA8DjCO,OA9DiC,GA8DtBC,GAAD,IAAS;AACjB,WAAKrB,KAAL,CAAWC,MAAX,CAAkBqB,OAAlB,CAA0B;AACxBC,QAAAA,OAAO,EAAEF,GADe;AAExBnB,QAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG;AAFI,OAA1B;AAID,KAnEgC;AAAA;;AACjCqB,EAAAA,iBAAiB,GAAE;AACjB,QAAI,KAAKxB,KAAL,CAAWyB,MAAf,EAAuB;AACrBC,MAAAA,KAAK,CAAC,4BAAD,CAAL,CACCtB,IADD,CACMuB,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECxB,IAFD,CAEMI,QAAQ,IAAI;AAChB,aAAKD,cAAL,CAAoBC,QAApB;AACD,OAJD;AAKD,KAPgB,CASjB;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACD;;AAEDqB,EAAAA,kBAAkB,GAAG,CACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAuCDC,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAU,KAAK9B,KAAL,CAAWS,IAAX,CAAgBsB,GAAhB,CAAoBC,IAAI,IAAIA,IAAI,CAACC,IAAL,GAAY,IAAxC,CAAV,CAJF,eAKE;AAAQ,MAAA,OAAO,EAAE,KAAKrB,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAQE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKQ,OAAL,CAAa,SAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,eASE;AAAQ,MAAA,OAAO,EAAE,KAAKrB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,CADF;AAaD;;AApFgC;;AAuFnC,MAAMmC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLlC,IAAAA,MAAM,EAAEkC,KAAK,CAACC,iBAAN,CAAwBnC,MAD3B;AAELE,IAAAA,YAAY,EAAEgC,KAAK,CAACC,iBAAN,CAAwBjC,YAFjC;AAGLkC,IAAAA,WAAW,EAAEF,KAAK,CAACC,iBAAN,CAAwBC,WAHhC;AAILZ,IAAAA,MAAM,EAAEU,KAAK,CAACC,iBAAN,CAAwBX,MAJ3B;AAKLa,IAAAA,OAAO,EAAEH,KAAK,CAACC,iBAAN,CAAwBE,OAL5B;AAML7B,IAAAA,IAAI,EAAE0B,KAAK,CAACI,WAAN,CAAkB9B;AANnB,GAAP;AAQD,CATD;;AAWA,MAAM+B,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACL9B,IAAAA,IAAI,EAAID,KAAD,IAAW+B,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,gBAAP;AAAyBhC,MAAAA,KAAK,EAAEA;AAAhC,KAAD,CADrB;AAELE,IAAAA,WAAW,EAAIC,YAAD,IAAkB4B,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,aAAP;AAAsB7B,MAAAA,YAAY,EAAEA;AAApC,KAAD;AAFnC,GAAP;AAID,CALD;;AAOA,eAAejB,OAAO,CAACsC,eAAD,EAAkBM,kBAAlB,CAAP,CAA6C3C,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n    // this.props.pubnub.addListener({\n    //   message: (msg) => {\n    //     console.log(msg)\n    //     switch (msg) {\n\n    //     }\n    //   }\n    // })\n  }\n\n  componentDidUpdate() {\n    // console.log('updated game component')\n    // if (this.props.lobbyChannel) {\n    //   // debugger\n    //   this.props.pubnub.getMessage(this.props.lobbyChannel, (msg) => {\n    //     console.log(msg.message.test)\n    //   })\n    // }\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.lobbyChannel\n    })\n    .then(console.log)\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards\n    this.props.init(deck)\n    this.shuffleDeck()\n\n    // this.props.pubnub.publish({\n    //   // status: 'testStatus',\n    //   message: {\n    //     startGame: true\n    //   },\n    //   channel: this.props.lobbyChannel\n    // })\n  }\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    this.props.shuffleDeck(shuffledDeck)\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: msg,\n      channel: this.props.lobbyChannel\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}> who here</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    lobbyChannel: state.connectionReducer.lobbyChannel,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    init: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}