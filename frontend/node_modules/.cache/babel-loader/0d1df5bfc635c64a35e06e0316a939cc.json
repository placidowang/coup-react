{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channel: this.props.gameChannel\n      }).then(console.log);\n    };\n\n    this.shuffleDeck = () => {\n      let shuffledDeck = [...this.props.deck];\n\n      for (let i = shuffledDeck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n      }\n\n      this.props.shuffleDeck(shuffledDeck);\n    };\n\n    this.updateDeck = () => {\n      if (!this.props.isHost) {}\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: msg,\n        channel: this.props.gameChannel\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // console.log(`Current players: ${this.props.players.map(player => player)}`)\n\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, msg => {});\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name + \", \")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shuffleDeck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testMsg('GAME YO'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, \"message\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \" who here\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    init: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    shuffleDeck: shuffledDeck => dispatch({\n      type: 'shuffleDeck',\n      shuffledDeck: shuffledDeck\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","connect","Game","Component","hereNow","props","pubnub","channel","gameChannel","then","console","log","shuffleDeck","shuffledDeck","deck","i","length","j","Math","floor","random","updateDeck","isHost","testMsg","msg","publish","message","componentDidMount","fetch","r","json","deckData","initializeGame","componentDidUpdate","getMessage","render","map","card","name","mapStateToProps","state","connectionReducer","players","gameReducer","mapDispatchToProps","dispatch","init","cards","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // console.log(`Current players: ${this.props.players.map(player => player)}`)\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n\n      })\n    }\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channel: this.props.gameChannel\n    })\n    .then(console.log)\n  }\n\n\n\n  shuffleDeck = () => {\n    let shuffledDeck = [...this.props.deck]\n    for (let i = shuffledDeck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]]\n    }\n    this.props.shuffleDeck(shuffledDeck)\n  }\n\n  updateDeck = () => {\n    if (!this.props.isHost) {\n\n    }\n  }\n\n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: msg,\n      channel: this.props.gameChannel\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        {/* <p>Players: {this.props.pubnub.hereNow({\n          channels: [this.props.pubnub.gameChannel]\n        })}</p> */}\n        <p>Deck: {this.props.deck.map(card => card.name + \", \")}</p>\n        <button onClick={this.shuffleDeck}>Shuffle Deck</button>\n\n\n        <button onClick={() => this.testMsg('GAME YO')}>message</button>\n        <button onClick={this.hereNow}> who here</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    players: state.connectionReducer.players,\n    deck: state.gameReducer.deck\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    init: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    shuffleDeck: ((shuffledDeck) => dispatch({type: 'shuffleDeck', shuffledDeck: shuffledDeck}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}