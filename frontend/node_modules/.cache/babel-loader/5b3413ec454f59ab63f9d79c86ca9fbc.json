{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPresence = getPresence;\n\nvar _immutabilityHelper = require('immutability-helper');\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction init(instance, channel) {\n  if (instance._component.state.pn_presence[channel]) {\n    return false;\n  }\n\n  instance._component.setState(function (prevState) {\n    return {\n      pn_presence: (0, _immutabilityHelper2.default)(prevState.pn_presence, {\n        $merge: _defineProperty({}, channel, {})\n      })\n    };\n  });\n\n  return true;\n}\n\nfunction emit(instance, channel, presence) {\n  instance._component.setState(function (prevState) {\n    return {\n      pn_presence: (0, _immutabilityHelper2.default)(prevState.pn_presence, _defineProperty({}, channel, {\n        $set: presence\n      }))\n    };\n  });\n\n  instance._broadcast.emit('presence', presence.channel, presence);\n}\n\nfunction getPresence(channel, callback) {\n  var _this = this;\n\n  this._broadcast.presence(channel, callback);\n\n  init(this, channel);\n\n  if (!this._listener.presence) {\n    this._listener.presence = function (ps) {\n      if (ps.subscription && _this._broadcast.isSubscribe('presence', ps.subscription)) {\n        emit(_this, ps.subscription, ps);\n      }\n\n      if (ps.channel && _this._broadcast.isSubscribe('presence', ps.channel)) {\n        emit(_this, ps.channel, ps);\n      }\n    };\n  }\n\n  if (this._component.state && this._component.state.pn_presence) {\n    return this._component.state.pn_presence[channel];\n  } else {\n    return {};\n  }\n}","map":{"version":3,"sources":["modules/getPresence.js"],"names":["instance","pn_presence","prevState","$merge","$set","presence","getPresence","init","ps","emit"],"mappings":";;;;;QA4CgBM,W,GAAAA,W;;AA5ChB,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;AASA,SAAA,IAAA,CAAA,QAAA,EAAA,OAAA,EAAiC;AAC/B,MAAIN,QAAAA,CAAAA,UAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CAAJ,OAAIA,CAAJ,EAAoD;AAClD,WAAA,KAAA;AACD;;AAEDA,EAAAA,QAAAA,CAAAA,UAAAA,CAAAA,QAAAA,CAA6B,UAAA,SAAA,EAAA;AAAA,WAAc;AACzCC,MAAAA,WAAAA,EAAa,CAAA,GAAA,oBAAA,CAAA,OAAA,EAAOC,SAAAA,CAAP,WAAA,EAA8B;AAAEC,QAAAA,MAAAA,EAAAA,eAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAhC,EAAgCA;AAAF,OAA9B;AAD4B,KAAd;AAA7BH,GAAAA;;AAIA,SAAA,IAAA;AACD;;AASD,SAAA,IAAA,CAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAA2C;AACzCA,EAAAA,QAAAA,CAAAA,UAAAA,CAAAA,QAAAA,CAA6B,UAAA,SAAA,EAAA;AAAA,WAAc;AACzCC,MAAAA,WAAAA,EAAa,CAAA,GAAA,oBAAA,CAAA,OAAA,EAAOC,SAAAA,CAAP,WAAA,EAAA,eAAA,CAAA,EAAA,EAAA,OAAA,EAA2C;AAAEE,QAAAA,IAAAA,EAA7C;AAA2C,OAA3C,CAAA;AAD4B,KAAd;AAA7BJ,GAAAA;;AAIAA,EAAAA,QAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAqCK,QAAAA,CAArCL,OAAAA,EAAAA,QAAAA;AACD;;AAUM,SAAA,WAAA,CAAA,OAAA,EAAA,QAAA,EAAwC;AAAA,MAAA,KAAA,GAAA,IAAA;;AAC7C,OAAA,UAAA,CAAA,QAAA,CAAA,OAAA,EAAA,QAAA;;AAEAO,EAAAA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAEA,MAAI,CAAC,KAAA,SAAA,CAAL,QAAA,EAA8B;AAC5B,SAAA,SAAA,CAAA,QAAA,GAA0B,UAAA,EAAA,EAAQ;AAChC,UAAIC,EAAAA,CAAAA,YAAAA,IAAmB,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,UAAA,EAAwCA,EAAAA,CAA/D,YAAuB,CAAvB,EAAiF;AAC/EC,QAAAA,IAAAA,CAAAA,KAAAA,EAAWD,EAAAA,CAAXC,YAAAA,EAAAA,EAAAA,CAAAA;AACD;;AAED,UAAID,EAAAA,CAAAA,OAAAA,IAAc,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,UAAA,EAAwCA,EAAAA,CAA1D,OAAkB,CAAlB,EAAuE;AACrEC,QAAAA,IAAAA,CAAAA,KAAAA,EAAWD,EAAAA,CAAXC,OAAAA,EAAAA,EAAAA,CAAAA;AACD;AAPH,KAAA;AASD;;AAED,MAAI,KAAA,UAAA,CAAA,KAAA,IAAyB,KAAA,UAAA,CAAA,KAAA,CAA7B,WAAA,EAAgE;AAC9D,WAAO,KAAA,UAAA,CAAA,KAAA,CAAA,WAAA,CAAP,OAAO,CAAP;AADF,GAAA,MAEO;AACL,WAAA,EAAA;AACD;AACF","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Add a channel to the state pn_presence\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @returns {boolean}\n */\nfunction init(instance, channel) {\n  if (instance._component.state.pn_presence[channel]) {\n    return false;\n  }\n\n  instance._component.setState(prevState => ({\n    pn_presence: update(prevState.pn_presence, { $merge: { [channel]: {} } })\n  }));\n\n  return true;\n}\n\n/**\n * Emit a presence information through a callback and update the state\n *\n * @param {PubNubReact} instance\n * @param {string} channel\n * @param {object} presence\n */\nfunction emit(instance, channel, presence) {\n  instance._component.setState(prevState => ({\n    pn_presence: update(prevState.pn_presence, { [channel]: { $set: presence } })\n  }));\n\n  instance._broadcast.emit('presence', presence.channel, presence);\n}\n\n\n/**\n * Get to receive presence information from a channel through a callback\n *\n * @param {string} channel\n * @param {function} callback\n * @returns {object}\n */\nexport function getPresence(channel, callback) {\n  this._broadcast.presence(channel, callback);\n\n  init(this, channel);\n\n  if (!this._listener.presence) {\n    this._listener.presence = (ps) => {\n      if (ps.subscription && this._broadcast.isSubscribe('presence', ps.subscription)) {\n        emit(this, ps.subscription, ps);\n      }\n\n      if (ps.channel && this._broadcast.isSubscribe('presence', ps.channel)) {\n        emit(this, ps.channel, ps);\n      }\n    };\n  }\n\n  if (this._component.state && this._component.state.pn_presence) {\n    return this._component.state.pn_presence[channel];\n  } else {\n    return {};\n  }\n}\n"]},"metadata":{},"sourceType":"script"}