{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { connect } from 'react-redux';\nimport Player from '../containers/Player.js';\nimport OpponentsContainer from '../containers/OpponentsContainer.js';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.initializeGame = deckData => {\n      const deck = deckData.cards.map(card => ({ ...card,\n        isRevealed: false\n      }));\n      const shuffledDeck = this.shuffleDeck(deck);\n      this.distributeCards(shuffledDeck);\n    };\n\n    this.shuffleDeck = (deck = [...this.props.deck]) => {\n      for (let i = deck.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n      }\n\n      this.updateDeck(deck);\n      return deck;\n    };\n\n    this.updateDeck = deck => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'updateDeck',\n          updatedDeck: deck\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.distributeCards = deck => {\n      for (const player of this.props.players) {\n        const card1 = deck.shift();\n        const card2 = deck.shift();\n        this.props.pubnub.publish({\n          message: {\n            type: 'addCardsToHand',\n            playerId: player.id,\n            cards: [card1, card2]\n          },\n          channel: this.props.gameChannel\n        });\n      }\n\n      this.updateDeck(deck);\n    };\n\n    this.updatePlayer = () => {};\n\n    this.endTurn = () => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'endTurn'\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.testMsg = msg => {\n      this.props.pubnub.publish({\n        message: {\n          type: 'log',\n          text: msg\n        },\n        channel: this.props.gameChannel\n      });\n    };\n\n    this.hereNow = () => {\n      this.props.pubnub.hereNow({\n        channels: [this.props.gameChannel]\n      }).then(console.log);\n    };\n\n    this.logPlayers = () => {\n      console.log(this.props.players);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck').then(r => r.json()).then(deckData => {\n        this.initializeGame(deckData);\n      });\n    } // if (this.props.gameChannel) {\n\n\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      switch (msg.message.type) {\n        case 'updateDeck':\n          this.props.updateDeck(msg.message.updatedDeck);\n          break;\n\n        case 'updatePlayer':\n          this.props.updatePlayer(msg.message.player);\n          break;\n\n        case 'changeTreasury':\n          this.props.changeTreasury(msg.message.amt);\n          break;\n\n        case 'updateTreasury':\n          this.props.updateTreasury(msg.message.treasury);\n          break;\n\n        case 'addCardsToHand':\n          this.props.setActivePlayer();\n\n          if (msg.message.playerId === this.props.player.id) {\n            this.props.addCardsToHand(msg.message.cards);\n          }\n\n          break;\n\n        case 'endTurn':\n          this.props.endTurn();\n          console.log(this.props.whosTurnIsIt);\n          this.props.setActivePlayer();\n          break;\n\n        case 'alert':\n          if (this.props.player.id !== msg.message.fromPlayerId) {\n            // alert(msg.message.message)\n            let timerInterval;\n            Swal.fire({\n              title: 'Oh SHIT.',\n              text: msg.message.message,\n              timer: 5000,\n              timerProgressBar: true,\n              showCancelButton: true,\n              // cancelButtonColor: '#B0B0B0',\n              cancelButtonText: 'Let him get away with it... this time',\n              confirmButtonText: 'STOP that bastard',\n              html: 'I will close in <b></b> milliseconds.',\n              onBeforeOpen: () => {\n                // Swal.showLoading()\n                timerInterval = setInterval(() => {\n                  const content = Swal.getContent();\n\n                  if (content) {\n                    const b = content.querySelector('b');\n\n                    if (b) {\n                      b.textContent = Swal.getTimerLeft().toString().slice(0, 1);\n                    }\n                  }\n                }, 100);\n              } // onClose: () => {\n              //   clearInterval(timerInterval)\n              // }\n\n            }).then(r => {\n              if (r.value) {\n                console.log('send challenge to: ' + msg.message.fromPlayerId);\n                this.props.pubnub.publish({\n                  message: {\n                    type: 'challenge',\n                    challengedPlayerId: msg.message.fromPlayerId,\n                    challengerPlayerId: this.props.player.id\n                  },\n                  channel: this.props.gameChannel\n                });\n              } else {\n                console.log(\"Where's your honor??\");\n              }\n            });\n          } else {\n            Swal.fire({\n              title: 'Waiting for other players.',\n              allowOutsideClick: false,\n              showConfirmButton: false,\n              timer: 5000,\n              timerProgressBar: true\n            });\n          }\n\n          break;\n\n        case 'challenge':\n          // console.log(this.props.player.id)\n          // console.log(msg)\n          // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n          if (this.props.player.id === msg.message.challengedPlayerId) {\n            Swal.close();\n            Swal.fire({\n              title: \"You've been challenged!!\",\n              showCancelButton: true,\n              cancelButtonText: 'Back down',\n              confirmButtonText: 'Oh YEAH??'\n            });\n          } else if (this.props.player.id === msg.message.challengerPlayerId) {\n            console.log(\"You have challenged the player!\");\n            Swal.fire('You have challenged the player!');\n          } else {\n            console.log(\"Player has been challenged.\");\n            Swal.close();\n          }\n\n          break;\n\n        case 'log':\n          console.log(msg.message.text);\n          break;\n\n        default:\n          console.error('Unknown game message.');\n          console.log(msg);\n      }\n    }); // }\n    // initiate treasury for every player\n\n    this.props.changeTreasury(-(this.props.players.length * 2));\n  }\n\n  componentDidUpdate() {// console.log(this.props.deck)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpponentsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }, \"Deck: \", this.props.deck.map(card => card.name).join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, \"Treasury: \", this.props.treasury, \" coins\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.shuffleDeck(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, \"Shuffle Deck\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.hereNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }, \"log who's here\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logPlayers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }, \"log players\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.endTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 14\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, \"Whose turn: \", this.props.activePlayer.username ? this.props.activePlayer.username : null), /*#__PURE__*/React.createElement(Player, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDeck: cards => dispatch({\n      type: 'initializeDeck',\n      cards: cards\n    }),\n    updateDeck: deck => dispatch({\n      type: 'updateDeck',\n      updatedDeck: deck\n    }),\n    updatePlayer: player => dispatch({\n      type: 'updatePlayer',\n      player: player\n    }),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: cards => dispatch({\n      type: 'addCardsToHand',\n      cards: cards\n    }),\n    changeTreasury: amt => dispatch({\n      type: 'changeTreasury',\n      amt: amt\n    }),\n    updateTreasury: treasury => dispatch({\n      type: 'updateTreasury',\n      treasury: treasury\n    }),\n    setActivePlayer: () => dispatch({\n      type: 'setActivePlayer'\n    }),\n    endTurn: () => dispatch({\n      type: 'endTurn'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module 5/mod_5_final_project/frontend/src/components/Game.js"],"names":["React","Swal","connect","Player","OpponentsContainer","Game","Component","initializeGame","deckData","deck","cards","map","card","isRevealed","shuffledDeck","shuffleDeck","distributeCards","props","i","length","j","Math","floor","random","updateDeck","pubnub","publish","message","type","updatedDeck","channel","gameChannel","player","players","card1","shift","card2","playerId","id","updatePlayer","endTurn","testMsg","msg","text","hereNow","channels","then","console","log","logPlayers","componentDidMount","isHost","fetch","r","json","getMessage","changeTreasury","amt","updateTreasury","treasury","setActivePlayer","addCardsToHand","whosTurnIsIt","fromPlayerId","timerInterval","fire","title","timer","timerProgressBar","showCancelButton","cancelButtonText","confirmButtonText","html","onBeforeOpen","setInterval","content","getContent","b","querySelector","textContent","getTimerLeft","toString","slice","value","challengedPlayerId","challengerPlayerId","allowOutsideClick","showConfirmButton","close","error","componentDidUpdate","render","name","join","activePlayer","username","mapStateToProps","state","connectionReducer","playerReducer","gameReducer","mapDispatchToProps","dispatch","initDeck"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\nimport { connect } from 'react-redux'\nimport Player from '../containers/Player.js'\nimport OpponentsContainer from '../containers/OpponentsContainer.js'\nimport './Game.css'\n\nclass Game extends React.Component {\n  componentDidMount(){\n    if (this.props.isHost) {\n      fetch('http://localhost:3000/deck')\n      .then(r => r.json())\n      .then(deckData => {\n        this.initializeGame(deckData)\n      })\n    }\n\n    // if (this.props.gameChannel) {\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n        switch (msg.message.type) {\n          case 'updateDeck':\n            this.props.updateDeck(msg.message.updatedDeck)\n            break\n          case 'updatePlayer':\n            this.props.updatePlayer(msg.message.player)\n            break\n          case 'changeTreasury':\n            this.props.changeTreasury(msg.message.amt)\n            break\n          case 'updateTreasury':\n            this.props.updateTreasury(msg.message.treasury)\n            break\n          case 'addCardsToHand':\n            this.props.setActivePlayer()\n            if (msg.message.playerId === this.props.player.id) {\n              this.props.addCardsToHand(msg.message.cards)\n            }\n            break\n          case 'endTurn':\n            this.props.endTurn()\n            console.log(this.props.whosTurnIsIt)\n            this.props.setActivePlayer()\n            break\n          case 'alert':\n            if (this.props.player.id !== msg.message.fromPlayerId) {\n              // alert(msg.message.message)\n              let timerInterval\n              Swal.fire({\n                title: 'Oh SHIT.',\n                text: msg.message.message,\n                timer: 5000,\n                timerProgressBar: true,\n                showCancelButton: true,\n                // cancelButtonColor: '#B0B0B0',\n                cancelButtonText: 'Let him get away with it... this time',\n                confirmButtonText: 'STOP that bastard',\n                html: 'I will close in <b></b> milliseconds.',\n                onBeforeOpen: () => {\n                  // Swal.showLoading()\n                  timerInterval = setInterval(() => {\n                    const content = Swal.getContent()\n                    if (content) {\n                      const b = content.querySelector('b')\n                      if (b) {\n                        b.textContent = Swal.getTimerLeft().toString().slice(0,1)\n                      }\n                    }\n                  }, 100)\n                },\n                // onClose: () => {\n                //   clearInterval(timerInterval)\n                // }\n              })\n              .then(r => {\n                if (r.value) {\n                  console.log('send challenge to: ' + msg.message.fromPlayerId)\n                  this.props.pubnub.publish({\n                    message: {\n                      type: 'challenge',\n                      challengedPlayerId: msg.message.fromPlayerId,\n                      challengerPlayerId: this.props.player.id\n                    },\n                    channel: this.props.gameChannel\n                  })\n                } else {\n                  console.log(\"Where's your honor??\")\n                }\n              })\n            } else {\n              Swal.fire({\n                title: 'Waiting for other players.',\n                allowOutsideClick: false,\n                showConfirmButton: false,\n                timer: 5000,\n                timerProgressBar: true,\n              })\n            }\n            break\n          case 'challenge':\n            // console.log(this.props.player.id)\n            // console.log(msg)\n            // console.log(msg.message.challengedPlayerId + ' has been challenged!')\n            if (this.props.player.id === msg.message.challengedPlayerId) {\n              Swal.close()\n              Swal.fire({\n                title: \"You've been challenged!!\",\n                showCancelButton: true,\n                cancelButtonText: 'Back down',\n                confirmButtonText: 'Oh YEAH??'\n              })\n            } else if (this.props.player.id === msg.message.challengerPlayerId) {\n              console.log(\"You have challenged the player!\")\n              Swal.fire('You have challenged the player!')\n            } else {\n              console.log(\"Player has been challenged.\")\n              Swal.close()\n            }\n            break\n          case 'log':\n            console.log(msg.message.text)\n            break\n          default:\n            console.error('Unknown game message.')\n            console.log(msg)\n        }\n      })\n    // }\n\n    // initiate treasury for every player\n    this.props.changeTreasury(-(this.props.players.length * 2))\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.deck)\n\n  }\n\n  initializeGame = (deckData) => {\n    const deck = deckData.cards.map(card => ({...card, isRevealed: false}))\n    const shuffledDeck = this.shuffleDeck(deck)\n    this.distributeCards(shuffledDeck)\n  }\n\n  shuffleDeck = (deck = [...this.props.deck]) => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]]\n    }\n\n    this.updateDeck(deck)\n    return deck\n  }\n\n  updateDeck = (deck) => {\n    this.props.pubnub.publish({\n      message: { type: 'updateDeck', updatedDeck: deck },\n      channel: this.props.gameChannel\n    })\n  }\n\n  // consider sending message for everyone to draw 2 cards\n  distributeCards = (deck) => {\n    for (const player of this.props.players) {\n      const card1 = deck.shift()\n      const card2 = deck.shift()\n\n      this.props.pubnub.publish({\n        message: {\n          type: 'addCardsToHand',\n          playerId: player.id,\n          cards: [card1, card2]\n        },\n        channel: this.props.gameChannel\n      })\n    }\n\n    this.updateDeck(deck)\n  }\n\n  // ehhhhhhhhh\n  // drawCard = () => {\n  //   const card = this.props.deck[0]\n  //   console.log('drew ' + card)\n  //   this.props.drawCard(card)\n  //   this.props.removeCardFromDeck()\n  // }\n\n  // need this in case players aren't automatically synced, which they probably won't be\n  // currently being used in Player.js\n  updatePlayer = () => {\n\n  }\n\n  endTurn = () => {\n    this.props.pubnub.publish({\n      message: { type: 'endTurn' },\n      channel: this.props.gameChannel\n    })\n  }\n\n\n  \n  testMsg = (msg) => {\n    this.props.pubnub.publish({\n      message: {type: 'log', text: msg},\n      channel: this.props.gameChannel\n    })\n  }\n\n  hereNow = () => {\n    this.props.pubnub.hereNow({\n      channels: [this.props.gameChannel]\n    })\n    .then(console.log)\n  }\n\n  logPlayers = () => {\n    console.log(this.props.players)\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <OpponentsContainer />\n        <p>Deck: {this.props.deck.map(card => card.name).join(', ')}</p>\n        <p>Treasury: {this.props.treasury} coins</p>\n\n        <button onClick={()=>this.shuffleDeck()}>Shuffle Deck</button>\n        {/* <button onClick={() => this.testMsg('GAME YO')}>message</button> */}\n        <button onClick={this.hereNow}>log who's here</button>\n        <button onClick={this.logPlayers}>log players</button>\n        <br/><button onClick={this.endTurn}>End Turn</button>\n\n        <p>Whose turn: {this.props.activePlayer.username ? this.props.activePlayer.username : null}</p>\n\n        {/* <p style={{fontSize: '20px'}}>Players: {this.props.players.map(player => player.username).join(', ')}</p> */}\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    pubnub: state.connectionReducer.pubnub,\n    gameChannel: state.connectionReducer.gameChannel,\n    isHost: state.connectionReducer.isHost,\n    player: state.playerReducer,\n    players: state.gameReducer.players,\n    deck: state.gameReducer.deck,\n    treasury: state.gameReducer.treasury,\n    whosTurnIsIt: state.gameReducer.whosTurnIsIt,\n    activePlayer: state.gameReducer.activePlayer,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initDeck: ((cards) => dispatch({type: 'initializeDeck', cards: cards})),\n    updateDeck: ((deck) => dispatch({type: 'updateDeck', updatedDeck: deck})),\n    updatePlayer: ((player) => dispatch({type: 'updatePlayer', player: player})),\n    // drawCard: ((card) => dispatch({type: 'drawCard', card: card})),\n    addCardsToHand: ((cards) => dispatch({type: 'addCardsToHand', cards: cards})),\n    changeTreasury: ((amt) => dispatch({type: 'changeTreasury', amt: amt})),\n    updateTreasury: ((treasury) => dispatch({type: 'updateTreasury', treasury: treasury})),\n    setActivePlayer: (() => dispatch({type: 'setActivePlayer'})),\n    endTurn: (() => dispatch({type: 'endTurn'})),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n"]},"metadata":{},"sourceType":"module"}